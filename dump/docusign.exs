defmodule(Docusign) do
  (
    @external_resource "priv/specs/docusign.json"
    @moduledoc "#{"DocuSign REST API"}
    
    #{"The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign."}
    
    Version #{"v2.1"}
    "
  )

  defmodule(Reminders) do
    @moduledoc "#{nil}
    "
    defstruct(reminder_delay: nil, reminder_enabled: nil, reminder_frequency: nil)

    @type t :: %__MODULE__{
            reminder_delay: binary | nil,
            reminder_enabled: binary | nil,
            reminder_frequency: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, reminder_delay} <-
          case(data["reminderDelay"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["reminderDelay"]}}
          end,
        {:ok, reminder_enabled} <-
          case(data["reminderEnabled"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["reminderEnabled"]}}
          end,
        {:ok, reminder_frequency} <-
          case(data["reminderFrequency"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["reminderFrequency"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           reminder_delay: reminder_delay,
           reminder_enabled: reminder_enabled,
           reminder_frequency: reminder_frequency
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["reminders" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "reminderDelay" => data.reminder_delay,
        "reminderEnabled" => data.reminder_enabled,
        "reminderFrequency" => data.reminder_frequency
      }
    end
  end

  defmodule(IdCheckInformationInput) do
    @moduledoc "#{nil}
    "
    defstruct(
      address_information_input: nil,
      dob_information_input: nil,
      ssn4_information_input: nil,
      ssn9_information_input: nil
    )

    @type t :: %__MODULE__{
            address_information_input: Docusign.AddressInformationInput.t() | nil,
            dob_information_input: Docusign.DobInformationInput.t() | nil,
            ssn4_information_input: Docusign.Ssn4InformationInput.t() | nil,
            ssn9_information_input: Docusign.Ssn9InformationInput.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, address_information_input} <-
          Docusign.AddressInformationInput.decode(data["addressInformationInput"]),
        {:ok, dob_information_input} <-
          Docusign.DobInformationInput.decode(data["dobInformationInput"]),
        {:ok, ssn4_information_input} <-
          Docusign.Ssn4InformationInput.decode(data["ssn4InformationInput"]),
        {:ok, ssn9_information_input} <-
          Docusign.Ssn9InformationInput.decode(data["ssn9InformationInput"])
      ) do
        {:ok,
         %__MODULE__{
           address_information_input: address_information_input,
           dob_information_input: dob_information_input,
           ssn4_information_input: ssn4_information_input,
           ssn9_information_input: ssn9_information_input
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["idCheckInformationInput" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "addressInformationInput" =>
          Docusign.AddressInformationInput.encode(data.address_information_input),
        "dobInformationInput" => Docusign.DobInformationInput.encode(data.dob_information_input),
        "ssn4InformationInput" =>
          Docusign.Ssn4InformationInput.encode(data.ssn4_information_input),
        "ssn9InformationInput" =>
          Docusign.Ssn9InformationInput.encode(data.ssn9_information_input)
      }
    end
  end

  defmodule(Signer) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      creation_reason: nil,
      allow_system_override_for_locked_recipient: nil,
      agent_can_edit_email: nil,
      is_bulk_recipient_metadata: nil,
      bulk_recipients_uri: nil,
      proof_file: nil,
      sign_in_each_location_metadata: nil,
      delivery_method_metadata: nil,
      require_upload_signature: nil,
      sign_in_each_location: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      require_signer_certificate: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      auto_navigation: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      require_sign_on_paper: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      signature_info: nil,
      recipient_signature_providers: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      is_bulk_recipient: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      tabs: nil,
      can_sign_offline: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      excluded_documents: nil,
      agent_can_edit_name: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      default_recipient: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      notary_id: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil,
      recipient_supplies_tabs: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            creation_reason: binary | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            agent_can_edit_email: binary | nil,
            is_bulk_recipient_metadata: Docusign.PropertyMetadata.t() | nil,
            bulk_recipients_uri: binary | nil,
            proof_file: Docusign.RecipientProofFile.t() | nil,
            sign_in_each_location_metadata: Docusign.PropertyMetadata.t() | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            require_upload_signature: binary | nil,
            sign_in_each_location: binary | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            require_signer_certificate: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            auto_navigation: binary | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            require_sign_on_paper: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            signature_info: Docusign.RecipientSignatureInformation.t() | nil,
            recipient_signature_providers: [Docusign.RecipientSignatureProvider.t()] | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            is_bulk_recipient: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            can_sign_offline: binary | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            excluded_documents: [binary] | nil,
            agent_can_edit_name: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            default_recipient: binary | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            notary_id: binary | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil,
            recipient_supplies_tabs: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, creation_reason} <-
          case(data["creationReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["creationReason"]}}
          end,
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, agent_can_edit_email} <-
          case(data["agentCanEditEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditEmail"]}}
          end,
        {:ok, is_bulk_recipient_metadata} <-
          Docusign.PropertyMetadata.decode(data["isBulkRecipientMetadata"]),
        {:ok, bulk_recipients_uri} <-
          case(data["bulkRecipientsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bulkRecipientsUri"]}}
          end,
        {:ok, proof_file} <- Docusign.RecipientProofFile.decode(data["proofFile"]),
        {:ok, sign_in_each_location_metadata} <-
          Docusign.PropertyMetadata.decode(data["signInEachLocationMetadata"]),
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, require_upload_signature} <-
          case(data["requireUploadSignature"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireUploadSignature"]}}
          end,
        {:ok, sign_in_each_location} <-
          case(data["signInEachLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signInEachLocation"]}}
          end,
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, require_signer_certificate} <-
          case(data["requireSignerCertificate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignerCertificate"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, auto_navigation} <-
          case(data["autoNavigation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoNavigation"]}}
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, require_sign_on_paper} <-
          case(data["requireSignOnPaper"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignOnPaper"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, signature_info} <-
          Docusign.RecipientSignatureInformation.decode(data["signatureInfo"]),
        {:ok, recipient_signature_providers} <-
          case(data["recipientSignatureProviders"]) do
            nil ->
              nil

            _ ->
              data["recipientSignatureProviders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientSignatureProvider.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, is_bulk_recipient} <-
          case(data["isBulkRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isBulkRecipient"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, can_sign_offline} <-
          case(data["canSignOffline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["canSignOffline"]}}
          end,
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, agent_can_edit_name} <-
          case(data["agentCanEditName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditName"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, default_recipient} <-
          case(data["defaultRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["defaultRecipient"]}}
          end,
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, notary_id} <-
          case(data["notaryId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["notaryId"]}}
          end,
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, recipient_supplies_tabs} <-
          case(data["recipientSuppliesTabs"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientSuppliesTabs"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           creation_reason: creation_reason,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           agent_can_edit_email: agent_can_edit_email,
           is_bulk_recipient_metadata: is_bulk_recipient_metadata,
           bulk_recipients_uri: bulk_recipients_uri,
           proof_file: proof_file,
           sign_in_each_location_metadata: sign_in_each_location_metadata,
           delivery_method_metadata: delivery_method_metadata,
           require_upload_signature: require_upload_signature,
           sign_in_each_location: sign_in_each_location,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           require_signer_certificate: require_signer_certificate,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           auto_navigation: auto_navigation,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           require_sign_on_paper: require_sign_on_paper,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           signature_info: signature_info,
           recipient_signature_providers: recipient_signature_providers,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           is_bulk_recipient: is_bulk_recipient,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           tabs: tabs,
           can_sign_offline: can_sign_offline,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           excluded_documents: excluded_documents,
           agent_can_edit_name: agent_can_edit_name,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           default_recipient: default_recipient,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           notary_id: notary_id,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments,
           recipient_supplies_tabs: recipient_supplies_tabs
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["signer" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "creationReason" => data.creation_reason,
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "agentCanEditEmail" => data.agent_can_edit_email,
        "isBulkRecipientMetadata" =>
          Docusign.PropertyMetadata.encode(data.is_bulk_recipient_metadata),
        "bulkRecipientsUri" => data.bulk_recipients_uri,
        "proofFile" => Docusign.RecipientProofFile.encode(data.proof_file),
        "signInEachLocationMetadata" =>
          Docusign.PropertyMetadata.encode(data.sign_in_each_location_metadata),
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "requireUploadSignature" => data.require_upload_signature,
        "signInEachLocation" => data.sign_in_each_location,
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "requireSignerCertificate" => data.require_signer_certificate,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "autoNavigation" => data.auto_navigation,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "requireSignOnPaper" => data.require_sign_on_paper,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "signatureInfo" => Docusign.RecipientSignatureInformation.encode(data.signature_info),
        "recipientSignatureProviders" =>
          case(data.recipient_signature_providers) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_signature_providers, fn item ->
                Docusign.RecipientSignatureProvider.encode(item)
              end)
          end,
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "isBulkRecipient" => data.is_bulk_recipient,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "canSignOffline" => data.can_sign_offline,
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "agentCanEditName" => data.agent_can_edit_name,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "defaultRecipient" => data.default_recipient,
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "notaryId" => data.notary_id,
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end,
        "recipientSuppliesTabs" => data.recipient_supplies_tabs
      }
    end
  end

  defmodule(EnvelopeDocument) do
    @moduledoc "#{nil}
    "
    defstruct(
      added_recipient_ids: nil,
      attachment_tab_id: nil,
      authoritative_copy: nil,
      authoritative_copy_metadata: nil,
      available_document_types: nil,
      contains_pdf_form_fields: nil,
      display: nil,
      display_metadata: nil,
      document_base64: nil,
      document_fields: nil,
      document_id: nil,
      document_id_guid: nil,
      error_details: nil,
      include_in_download: nil,
      include_in_download_metadata: nil,
      name: nil,
      name_metadata: nil,
      order: nil,
      pages: nil,
      signer_must_acknowledge: nil,
      signer_must_acknowledge_metadata: nil,
      size_bytes: nil,
      template_locked: nil,
      template_required: nil,
      type: nil,
      uri: nil
    )

    @type t :: %__MODULE__{
            added_recipient_ids: [binary] | nil,
            attachment_tab_id: binary | nil,
            authoritative_copy: binary | nil,
            authoritative_copy_metadata: Docusign.PropertyMetadata.t() | nil,
            available_document_types: [Docusign.SignatureType.t()] | nil,
            contains_pdf_form_fields: binary | nil,
            display: binary | nil,
            display_metadata: Docusign.PropertyMetadata.t() | nil,
            document_base64: binary | nil,
            document_fields: [Docusign.NameValue.t()] | nil,
            document_id: binary | nil,
            document_id_guid: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            include_in_download: binary | nil,
            include_in_download_metadata: Docusign.PropertyMetadata.t() | nil,
            name: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            order: binary | nil,
            pages: [Docusign.Page.t()] | nil,
            signer_must_acknowledge: binary | nil,
            signer_must_acknowledge_metadata: Docusign.PropertyMetadata.t() | nil,
            size_bytes: binary | nil,
            template_locked: binary | nil,
            template_required: binary | nil,
            type: binary | nil,
            uri: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, added_recipient_ids} <-
          case(data["addedRecipientIds"]) do
            nil ->
              nil

            _ ->
              data["addedRecipientIds"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, attachment_tab_id} <-
          case(data["attachmentTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["attachmentTabId"]}}
          end,
        {:ok, authoritative_copy} <-
          case(data["authoritativeCopy"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authoritativeCopy"]}}
          end,
        {:ok, authoritative_copy_metadata} <-
          Docusign.PropertyMetadata.decode(data["authoritativeCopyMetadata"]),
        {:ok, available_document_types} <-
          case(data["availableDocumentTypes"]) do
            nil ->
              nil

            _ ->
              data["availableDocumentTypes"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SignatureType.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, contains_pdf_form_fields} <-
          case(data["containsPdfFormFields"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["containsPdfFormFields"]}}
          end,
        {:ok, display} <-
          case(data["display"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["display"]}}
          end,
        {:ok, display_metadata} <- Docusign.PropertyMetadata.decode(data["displayMetadata"]),
        {:ok, document_base64} <-
          case(data["documentBase64"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentBase64"]}}
          end,
        {:ok, document_fields} <-
          case(data["documentFields"]) do
            nil ->
              nil

            _ ->
              data["documentFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.NameValue.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, document_id_guid} <-
          case(data["documentIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentIdGuid"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, include_in_download} <-
          case(data["includeInDownload"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeInDownload"]}}
          end,
        {:ok, include_in_download_metadata} <-
          Docusign.PropertyMetadata.decode(data["includeInDownloadMetadata"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, order} <-
          case(data["order"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["order"]}}
          end,
        {:ok, pages} <-
          case(data["pages"]) do
            nil ->
              nil

            _ ->
              data["pages"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Page.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signer_must_acknowledge} <-
          case(data["signerMustAcknowledge"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerMustAcknowledge"]}}
          end,
        {:ok, signer_must_acknowledge_metadata} <-
          Docusign.PropertyMetadata.decode(data["signerMustAcknowledgeMetadata"]),
        {:ok, size_bytes} <-
          case(data["sizeBytes"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sizeBytes"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, type} <-
          case(data["type"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["type"]}}
          end,
        {:ok, uri} <-
          case(data["uri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["uri"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           added_recipient_ids: added_recipient_ids,
           attachment_tab_id: attachment_tab_id,
           authoritative_copy: authoritative_copy,
           authoritative_copy_metadata: authoritative_copy_metadata,
           available_document_types: available_document_types,
           contains_pdf_form_fields: contains_pdf_form_fields,
           display: display,
           display_metadata: display_metadata,
           document_base64: document_base64,
           document_fields: document_fields,
           document_id: document_id,
           document_id_guid: document_id_guid,
           error_details: error_details,
           include_in_download: include_in_download,
           include_in_download_metadata: include_in_download_metadata,
           name: name,
           name_metadata: name_metadata,
           order: order,
           pages: pages,
           signer_must_acknowledge: signer_must_acknowledge,
           signer_must_acknowledge_metadata: signer_must_acknowledge_metadata,
           size_bytes: size_bytes,
           template_locked: template_locked,
           template_required: template_required,
           type: type,
           uri: uri
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["envelopeDocument" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "addedRecipientIds" =>
          case(data.added_recipient_ids) do
            nil ->
              nil

            _ ->
              Enum.map(data.added_recipient_ids, fn item -> item end)
          end,
        "attachmentTabId" => data.attachment_tab_id,
        "authoritativeCopy" => data.authoritative_copy,
        "authoritativeCopyMetadata" =>
          Docusign.PropertyMetadata.encode(data.authoritative_copy_metadata),
        "availableDocumentTypes" =>
          case(data.available_document_types) do
            nil ->
              nil

            _ ->
              Enum.map(data.available_document_types, fn item ->
                Docusign.SignatureType.encode(item)
              end)
          end,
        "containsPdfFormFields" => data.contains_pdf_form_fields,
        "display" => data.display,
        "displayMetadata" => Docusign.PropertyMetadata.encode(data.display_metadata),
        "documentBase64" => data.document_base64,
        "documentFields" =>
          case(data.document_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_fields, fn item -> Docusign.NameValue.encode(item) end)
          end,
        "documentId" => data.document_id,
        "documentIdGuid" => data.document_id_guid,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "includeInDownload" => data.include_in_download,
        "includeInDownloadMetadata" =>
          Docusign.PropertyMetadata.encode(data.include_in_download_metadata),
        "name" => data.name,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "order" => data.order,
        "pages" =>
          case(data.pages) do
            nil ->
              nil

            _ ->
              Enum.map(data.pages, fn item -> Docusign.Page.encode(item) end)
          end,
        "signerMustAcknowledge" => data.signer_must_acknowledge,
        "signerMustAcknowledgeMetadata" =>
          Docusign.PropertyMetadata.encode(data.signer_must_acknowledge_metadata),
        "sizeBytes" => data.size_bytes,
        "templateLocked" => data.template_locked,
        "templateRequired" => data.template_required,
        "type" => data.type,
        "uri" => data.uri
      }
    end
  end

  defmodule(CarbonCopy) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      allow_system_override_for_locked_recipient: nil,
      agent_can_edit_email: nil,
      proof_file: nil,
      delivery_method_metadata: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      linked_account_configuration_id: nil,
      tabs: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      excluded_documents: nil,
      agent_can_edit_name: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            agent_can_edit_email: binary | nil,
            proof_file: Docusign.RecipientProofFile.t() | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            linked_account_configuration_id: binary | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            excluded_documents: [binary] | nil,
            agent_can_edit_name: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, agent_can_edit_email} <-
          case(data["agentCanEditEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditEmail"]}}
          end,
        {:ok, proof_file} <- Docusign.RecipientProofFile.decode(data["proofFile"]),
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, linked_account_configuration_id} <-
          case(data["linkedAccountConfigurationId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["linkedAccountConfigurationId"]}}
          end,
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, agent_can_edit_name} <-
          case(data["agentCanEditName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditName"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           agent_can_edit_email: agent_can_edit_email,
           proof_file: proof_file,
           delivery_method_metadata: delivery_method_metadata,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           linked_account_configuration_id: linked_account_configuration_id,
           tabs: tabs,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           excluded_documents: excluded_documents,
           agent_can_edit_name: agent_can_edit_name,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["carbonCopy" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "agentCanEditEmail" => data.agent_can_edit_email,
        "proofFile" => Docusign.RecipientProofFile.encode(data.proof_file),
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "linkedAccountConfigurationId" => data.linked_account_configuration_id,
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "agentCanEditName" => data.agent_can_edit_name,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end
      }
    end
  end

  defmodule(TabGroup) do
    @moduledoc "#{nil}
    "
    defstruct(
      group_rule: nil,
      form_page_label_metadata: nil,
      tab_scope: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      tab_scope_metadata: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      group_label: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      minimum_required: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      maximum_allowed: nil,
      maximum_allowed_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      minimum_required_metadata: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      group_label_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      group_rule_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            group_rule: binary | nil,
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_scope: binary | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            tab_scope_metadata: Docusign.PropertyMetadata.t() | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            group_label: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            minimum_required: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            maximum_allowed: binary | nil,
            maximum_allowed_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            minimum_required_metadata: Docusign.PropertyMetadata.t() | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            group_label_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            group_rule_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, group_rule} <-
          case(data["groupRule"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["groupRule"]}}
          end,
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, tab_scope} <-
          case(data["tabScope"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabScope"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, tab_scope_metadata} <- Docusign.PropertyMetadata.decode(data["tabScopeMetadata"]),
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, group_label} <-
          case(data["groupLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["groupLabel"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, minimum_required} <-
          case(data["minimumRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["minimumRequired"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, maximum_allowed} <-
          case(data["maximumAllowed"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maximumAllowed"]}}
          end,
        {:ok, maximum_allowed_metadata} <-
          Docusign.PropertyMetadata.decode(data["maximumAllowedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, minimum_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["minimumRequiredMetadata"]),
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, group_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["groupLabelMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, group_rule_metadata} <- Docusign.PropertyMetadata.decode(data["groupRuleMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           group_rule: group_rule,
           form_page_label_metadata: form_page_label_metadata,
           tab_scope: tab_scope,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           tab_scope_metadata: tab_scope_metadata,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           group_label: group_label,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           minimum_required: minimum_required,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           maximum_allowed: maximum_allowed,
           maximum_allowed_metadata: maximum_allowed_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           minimum_required_metadata: minimum_required_metadata,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           group_label_metadata: group_label_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           group_rule_metadata: group_rule_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["tabGroup" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "groupRule" => data.group_rule,
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "tabScope" => data.tab_scope,
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "tabScopeMetadata" => Docusign.PropertyMetadata.encode(data.tab_scope_metadata),
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "groupLabel" => data.group_label,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "minimumRequired" => data.minimum_required,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "maximumAllowed" => data.maximum_allowed,
        "maximumAllowedMetadata" =>
          Docusign.PropertyMetadata.encode(data.maximum_allowed_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "minimumRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.minimum_required_metadata),
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "groupLabelMetadata" => Docusign.PropertyMetadata.encode(data.group_label_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "groupRuleMetadata" => Docusign.PropertyMetadata.encode(data.group_rule_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(SmartSectionDisplaySettings) do
    @moduledoc "#{nil}
    "
    defstruct(
      cell_style: nil,
      collapsible_settings: nil,
      display: nil,
      display_label: nil,
      display_order: nil,
      display_page_number: nil,
      hide_label_when_opened: nil,
      inline_outer_style: nil,
      label_when_opened: nil,
      pre_label: nil,
      scroll_to_top_when_opened: nil,
      table_style: nil
    )

    @type t :: %__MODULE__{
            cell_style: binary | nil,
            collapsible_settings: Docusign.SmartSectionCollapsibleDisplaySettings.t() | nil,
            display: binary | nil,
            display_label: binary | nil,
            display_order: integer | nil,
            display_page_number: integer | nil,
            hide_label_when_opened: boolean | nil,
            inline_outer_style: binary | nil,
            label_when_opened: binary | nil,
            pre_label: binary | nil,
            scroll_to_top_when_opened: boolean | nil,
            table_style: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, cell_style} <-
          case(data["cellStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["cellStyle"]}}
          end,
        {:ok, collapsible_settings} <-
          Docusign.SmartSectionCollapsibleDisplaySettings.decode(data["collapsibleSettings"]),
        {:ok, display} <-
          case(data["display"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["display"]}}
          end,
        {:ok, display_label} <-
          case(data["displayLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayLabel"]}}
          end,
        {:ok, display_order} <-
          case(data["displayOrder"]) do
            x when is_nil(x) or is_integer(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_integer, x}, ["displayOrder"]}}
          end,
        {:ok, display_page_number} <-
          case(data["displayPageNumber"]) do
            x when is_nil(x) or is_integer(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_integer, x}, ["displayPageNumber"]}}
          end,
        {:ok, hide_label_when_opened} <-
          case(data["hideLabelWhenOpened"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["hideLabelWhenOpened"]}}
          end,
        {:ok, inline_outer_style} <-
          case(data["inlineOuterStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inlineOuterStyle"]}}
          end,
        {:ok, label_when_opened} <-
          case(data["labelWhenOpened"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["labelWhenOpened"]}}
          end,
        {:ok, pre_label} <-
          case(data["preLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["preLabel"]}}
          end,
        {:ok, scroll_to_top_when_opened} <-
          case(data["scrollToTopWhenOpened"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["scrollToTopWhenOpened"]}}
          end,
        {:ok, table_style} <-
          case(data["tableStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tableStyle"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           cell_style: cell_style,
           collapsible_settings: collapsible_settings,
           display: display,
           display_label: display_label,
           display_order: display_order,
           display_page_number: display_page_number,
           hide_label_when_opened: hide_label_when_opened,
           inline_outer_style: inline_outer_style,
           label_when_opened: label_when_opened,
           pre_label: pre_label,
           scroll_to_top_when_opened: scroll_to_top_when_opened,
           table_style: table_style
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["smartSectionDisplaySettings" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "cellStyle" => data.cell_style,
        "collapsibleSettings" =>
          Docusign.SmartSectionCollapsibleDisplaySettings.encode(data.collapsible_settings),
        "display" => data.display,
        "displayLabel" => data.display_label,
        "displayOrder" => data.display_order,
        "displayPageNumber" => data.display_page_number,
        "hideLabelWhenOpened" => data.hide_label_when_opened,
        "inlineOuterStyle" => data.inline_outer_style,
        "labelWhenOpened" => data.label_when_opened,
        "preLabel" => data.pre_label,
        "scrollToTopWhenOpened" => data.scroll_to_top_when_opened,
        "tableStyle" => data.table_style
      }
    end
  end

  defmodule(EnvelopeEvent) do
    @moduledoc "#{nil}
    "
    defstruct(envelope_event_status_code: nil, include_documents: nil)

    @type t :: %__MODULE__{
            envelope_event_status_code: binary | nil,
            include_documents: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, envelope_event_status_code} <-
          case(data["envelopeEventStatusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeEventStatusCode"]}}
          end,
        {:ok, include_documents} <-
          case(data["includeDocuments"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeDocuments"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           envelope_event_status_code: envelope_event_status_code,
           include_documents: include_documents
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["envelopeEvent" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "envelopeEventStatusCode" => data.envelope_event_status_code,
        "includeDocuments" => data.include_documents
      }
    end
  end

  defmodule(DocumentVisibility) do
    @moduledoc "#{nil}
    "
    defstruct(document_id: nil, error_details: nil, recipient_id: nil, rights: nil, visible: nil)

    @type t :: %__MODULE__{
            document_id: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            rights: binary | nil,
            visible: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, rights} <-
          case(data["rights"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["rights"]}}
          end,
        {:ok, visible} <-
          case(data["visible"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["visible"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           document_id: document_id,
           error_details: error_details,
           recipient_id: recipient_id,
           rights: rights,
           visible: visible
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["documentVisibility" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "documentId" => data.document_id,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "rights" => data.rights,
        "visible" => data.visible
      }
    end
  end

  defmodule(FullName) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["fullName" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(InPersonSigner) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      in_person_signing_type: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      signer_first_name_metadata: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      creation_reason: nil,
      allow_system_override_for_locked_recipient: nil,
      signer_first_name: nil,
      signer_last_name_metadata: nil,
      sign_in_each_location_metadata: nil,
      delivery_method_metadata: nil,
      require_upload_signature: nil,
      sign_in_each_location: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      require_signer_certificate: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      host_name_metadata: nil,
      custom_fields: nil,
      auto_navigation: nil,
      in_person_signing_type_metadata: nil,
      embedded_recipient_start_url: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      signer_email_metadata: nil,
      recipient_type: nil,
      signed_date_time: nil,
      require_sign_on_paper: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      signature_info: nil,
      recipient_signature_providers: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      signer_name: nil,
      signing_group_name: nil,
      host_email_metadata: nil,
      identity_verification: nil,
      tabs: nil,
      signer_email: nil,
      can_sign_offline: nil,
      signer_last_name: nil,
      notary_host: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      host_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      host_email: nil,
      excluded_documents: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      default_recipient: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      notary_id: nil,
      recipient_type_metadata: nil,
      note: nil,
      signer_name_metadata: nil,
      completed_count: nil,
      recipient_attachments: nil,
      recipient_supplies_tabs: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            in_person_signing_type: binary | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            signer_first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            creation_reason: binary | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            signer_first_name: binary | nil,
            signer_last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            sign_in_each_location_metadata: Docusign.PropertyMetadata.t() | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            require_upload_signature: binary | nil,
            sign_in_each_location: binary | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            require_signer_certificate: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            host_name_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_fields: [binary] | nil,
            auto_navigation: binary | nil,
            in_person_signing_type_metadata: Docusign.PropertyMetadata.t() | nil,
            embedded_recipient_start_url: binary | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            signer_email_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            require_sign_on_paper: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            signature_info: Docusign.RecipientSignatureInformation.t() | nil,
            recipient_signature_providers: [Docusign.RecipientSignatureProvider.t()] | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            signer_name: binary | nil,
            signing_group_name: binary | nil,
            host_email_metadata: Docusign.PropertyMetadata.t() | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            signer_email: binary | nil,
            can_sign_offline: binary | nil,
            signer_last_name: binary | nil,
            notary_host: Docusign.NotaryHost.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            host_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            host_email: binary | nil,
            excluded_documents: [binary] | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            default_recipient: binary | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            notary_id: binary | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            signer_name_metadata: Docusign.PropertyMetadata.t() | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil,
            recipient_supplies_tabs: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, in_person_signing_type} <-
          case(data["inPersonSigningType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inPersonSigningType"]}}
          end,
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signer_first_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["signerFirstNameMetadata"]),
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, creation_reason} <-
          case(data["creationReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["creationReason"]}}
          end,
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, signer_first_name} <-
          case(data["signerFirstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerFirstName"]}}
          end,
        {:ok, signer_last_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["signerLastNameMetadata"]),
        {:ok, sign_in_each_location_metadata} <-
          Docusign.PropertyMetadata.decode(data["signInEachLocationMetadata"]),
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, require_upload_signature} <-
          case(data["requireUploadSignature"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireUploadSignature"]}}
          end,
        {:ok, sign_in_each_location} <-
          case(data["signInEachLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signInEachLocation"]}}
          end,
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, require_signer_certificate} <-
          case(data["requireSignerCertificate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignerCertificate"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, host_name_metadata} <- Docusign.PropertyMetadata.decode(data["hostNameMetadata"]),
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, auto_navigation} <-
          case(data["autoNavigation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoNavigation"]}}
          end,
        {:ok, in_person_signing_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["inPersonSigningTypeMetadata"]),
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, signer_email_metadata} <-
          Docusign.PropertyMetadata.decode(data["signerEmailMetadata"]),
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, require_sign_on_paper} <-
          case(data["requireSignOnPaper"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignOnPaper"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, signature_info} <-
          Docusign.RecipientSignatureInformation.decode(data["signatureInfo"]),
        {:ok, recipient_signature_providers} <-
          case(data["recipientSignatureProviders"]) do
            nil ->
              nil

            _ ->
              data["recipientSignatureProviders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientSignatureProvider.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, signer_name} <-
          case(data["signerName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerName"]}}
          end,
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, host_email_metadata} <- Docusign.PropertyMetadata.decode(data["hostEmailMetadata"]),
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, signer_email} <-
          case(data["signerEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerEmail"]}}
          end,
        {:ok, can_sign_offline} <-
          case(data["canSignOffline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["canSignOffline"]}}
          end,
        {:ok, signer_last_name} <-
          case(data["signerLastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerLastName"]}}
          end,
        {:ok, notary_host} <- Docusign.NotaryHost.decode(data["notaryHost"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, host_name} <-
          case(data["hostName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hostName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, host_email} <-
          case(data["hostEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hostEmail"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, default_recipient} <-
          case(data["defaultRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["defaultRecipient"]}}
          end,
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, notary_id} <-
          case(data["notaryId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["notaryId"]}}
          end,
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, signer_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["signerNameMetadata"]),
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, recipient_supplies_tabs} <-
          case(data["recipientSuppliesTabs"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientSuppliesTabs"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           in_person_signing_type: in_person_signing_type,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           signer_first_name_metadata: signer_first_name_metadata,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           creation_reason: creation_reason,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           signer_first_name: signer_first_name,
           signer_last_name_metadata: signer_last_name_metadata,
           sign_in_each_location_metadata: sign_in_each_location_metadata,
           delivery_method_metadata: delivery_method_metadata,
           require_upload_signature: require_upload_signature,
           sign_in_each_location: sign_in_each_location,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           require_signer_certificate: require_signer_certificate,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           host_name_metadata: host_name_metadata,
           custom_fields: custom_fields,
           auto_navigation: auto_navigation,
           in_person_signing_type_metadata: in_person_signing_type_metadata,
           embedded_recipient_start_url: embedded_recipient_start_url,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           signer_email_metadata: signer_email_metadata,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           require_sign_on_paper: require_sign_on_paper,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           signature_info: signature_info,
           recipient_signature_providers: recipient_signature_providers,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           signer_name: signer_name,
           signing_group_name: signing_group_name,
           host_email_metadata: host_email_metadata,
           identity_verification: identity_verification,
           tabs: tabs,
           signer_email: signer_email,
           can_sign_offline: can_sign_offline,
           signer_last_name: signer_last_name,
           notary_host: notary_host,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           host_name: host_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           host_email: host_email,
           excluded_documents: excluded_documents,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           default_recipient: default_recipient,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           notary_id: notary_id,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           signer_name_metadata: signer_name_metadata,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments,
           recipient_supplies_tabs: recipient_supplies_tabs
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["inPersonSigner" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "inPersonSigningType" => data.in_person_signing_type,
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "signerFirstNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.signer_first_name_metadata),
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "creationReason" => data.creation_reason,
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "signerFirstName" => data.signer_first_name,
        "signerLastNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.signer_last_name_metadata),
        "signInEachLocationMetadata" =>
          Docusign.PropertyMetadata.encode(data.sign_in_each_location_metadata),
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "requireUploadSignature" => data.require_upload_signature,
        "signInEachLocation" => data.sign_in_each_location,
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "requireSignerCertificate" => data.require_signer_certificate,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "hostNameMetadata" => Docusign.PropertyMetadata.encode(data.host_name_metadata),
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "autoNavigation" => data.auto_navigation,
        "inPersonSigningTypeMetadata" =>
          Docusign.PropertyMetadata.encode(data.in_person_signing_type_metadata),
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "signerEmailMetadata" => Docusign.PropertyMetadata.encode(data.signer_email_metadata),
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "requireSignOnPaper" => data.require_sign_on_paper,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "signatureInfo" => Docusign.RecipientSignatureInformation.encode(data.signature_info),
        "recipientSignatureProviders" =>
          case(data.recipient_signature_providers) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_signature_providers, fn item ->
                Docusign.RecipientSignatureProvider.encode(item)
              end)
          end,
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "signerName" => data.signer_name,
        "signingGroupName" => data.signing_group_name,
        "hostEmailMetadata" => Docusign.PropertyMetadata.encode(data.host_email_metadata),
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "signerEmail" => data.signer_email,
        "canSignOffline" => data.can_sign_offline,
        "signerLastName" => data.signer_last_name,
        "notaryHost" => Docusign.NotaryHost.encode(data.notary_host),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "hostName" => data.host_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "hostEmail" => data.host_email,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "defaultRecipient" => data.default_recipient,
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "notaryId" => data.notary_id,
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "signerNameMetadata" => Docusign.PropertyMetadata.encode(data.signer_name_metadata),
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end,
        "recipientSuppliesTabs" => data.recipient_supplies_tabs
      }
    end
  end

  defmodule(ErrorDetails) do
    @moduledoc "#{nil}
    "
    defstruct(error_code: nil, message: nil)
    @type t :: %__MODULE__{error_code: binary | nil, message: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, error_code} <-
          case(data["errorCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["errorCode"]}}
          end,
        {:ok, message} <-
          case(data["message"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["message"]}}
          end
      ) do
        {:ok, %__MODULE__{error_code: error_code, message: message}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["errorDetails" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"errorCode" => data.error_code, "message" => data.message}
    end
  end

  defmodule(NameValue) do
    @moduledoc "#{nil}
    "
    defstruct(error_details: nil, name: nil, original_value: nil, value: nil)

    @type t :: %__MODULE__{
            error_details: Docusign.ErrorDetails.t() | nil,
            name: binary | nil,
            original_value: binary | nil,
            value: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           error_details: error_details,
           name: name,
           original_value: original_value,
           value: value
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["nameValue" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "name" => data.name,
        "originalValue" => data.original_value,
        "value" => data.value
      }
    end
  end

  defmodule(RecipientPhoneAuthentication) do
    @moduledoc "#{nil}
    "
    defstruct(
      recip_may_provide_number: nil,
      recip_may_provide_number_metadata: nil,
      record_voice_print: nil,
      record_voice_print_metadata: nil,
      sender_provided_numbers: nil,
      sender_provided_numbers_metadata: nil,
      validate_recip_provided_number: nil,
      validate_recip_provided_number_metadata: nil
    )

    @type t :: %__MODULE__{
            recip_may_provide_number: binary | nil,
            recip_may_provide_number_metadata: Docusign.PropertyMetadata.t() | nil,
            record_voice_print: binary | nil,
            record_voice_print_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_provided_numbers: [binary] | nil,
            sender_provided_numbers_metadata: Docusign.PropertyMetadata.t() | nil,
            validate_recip_provided_number: binary | nil,
            validate_recip_provided_number_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, recip_may_provide_number} <-
          case(data["recipMayProvideNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipMayProvideNumber"]}}
          end,
        {:ok, recip_may_provide_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipMayProvideNumberMetadata"]),
        {:ok, record_voice_print} <-
          case(data["recordVoicePrint"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recordVoicePrint"]}}
          end,
        {:ok, record_voice_print_metadata} <-
          Docusign.PropertyMetadata.decode(data["recordVoicePrintMetadata"]),
        {:ok, sender_provided_numbers} <-
          case(data["senderProvidedNumbers"]) do
            nil ->
              nil

            _ ->
              data["senderProvidedNumbers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, sender_provided_numbers_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderProvidedNumbersMetadata"]),
        {:ok, validate_recip_provided_number} <-
          case(data["validateRecipProvidedNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validateRecipProvidedNumber"]}}
          end,
        {:ok, validate_recip_provided_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["validateRecipProvidedNumberMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           recip_may_provide_number: recip_may_provide_number,
           recip_may_provide_number_metadata: recip_may_provide_number_metadata,
           record_voice_print: record_voice_print,
           record_voice_print_metadata: record_voice_print_metadata,
           sender_provided_numbers: sender_provided_numbers,
           sender_provided_numbers_metadata: sender_provided_numbers_metadata,
           validate_recip_provided_number: validate_recip_provided_number,
           validate_recip_provided_number_metadata: validate_recip_provided_number_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientPhoneAuthentication" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "recipMayProvideNumber" => data.recip_may_provide_number,
        "recipMayProvideNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.recip_may_provide_number_metadata),
        "recordVoicePrint" => data.record_voice_print,
        "recordVoicePrintMetadata" =>
          Docusign.PropertyMetadata.encode(data.record_voice_print_metadata),
        "senderProvidedNumbers" =>
          case(data.sender_provided_numbers) do
            nil ->
              nil

            _ ->
              Enum.map(data.sender_provided_numbers, fn item -> item end)
          end,
        "senderProvidedNumbersMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_provided_numbers_metadata),
        "validateRecipProvidedNumber" => data.validate_recip_provided_number,
        "validateRecipProvidedNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.validate_recip_provided_number_metadata)
      }
    end
  end

  defmodule(GraphicsContext) do
    @moduledoc "#{nil}
    "
    defstruct(fill_color: nil, line_color: nil, line_weight: nil)

    @type t :: %__MODULE__{
            fill_color: binary | nil,
            line_color: binary | nil,
            line_weight: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, fill_color} <-
          case(data["fillColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fillColor"]}}
          end,
        {:ok, line_color} <-
          case(data["lineColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lineColor"]}}
          end,
        {:ok, line_weight} <-
          case(data["lineWeight"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lineWeight"]}}
          end
      ) do
        {:ok,
         %__MODULE__{fill_color: fill_color, line_color: line_color, line_weight: line_weight}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["graphicsContext" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "fillColor" => data.fill_color,
        "lineColor" => data.line_color,
        "lineWeight" => data.line_weight
      }
    end
  end

  defmodule(Date) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      validation_pattern: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      validation_pattern_metadata: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_pattern: binary | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            validation_pattern_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, validation_pattern} <-
          case(data["validationPattern"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationPattern"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, validation_pattern_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationPatternMetadata"]),
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           validation_pattern: validation_pattern,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           validation_pattern_metadata: validation_pattern_metadata,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["date" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "validationPattern" => data.validation_pattern,
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "validationPatternMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_pattern_metadata),
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(EnvelopeRecipients) do
    @moduledoc "#{nil}
    "
    defstruct(
      agents: nil,
      carbon_copies: nil,
      certified_deliveries: nil,
      current_routing_order: nil,
      editors: nil,
      error_details: nil,
      in_person_signers: nil,
      intermediaries: nil,
      notaries: nil,
      recipient_count: nil,
      seals: nil,
      signers: nil,
      witnesses: nil
    )

    @type t :: %__MODULE__{
            agents: [Docusign.Agent.t()] | nil,
            carbon_copies: [Docusign.CarbonCopy.t()] | nil,
            certified_deliveries: [Docusign.CertifiedDelivery.t()] | nil,
            current_routing_order: binary | nil,
            editors: [Docusign.Editor.t()] | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            in_person_signers: [Docusign.InPersonSigner.t()] | nil,
            intermediaries: [Docusign.Intermediary.t()] | nil,
            notaries: [Docusign.NotaryRecipient.t()] | nil,
            recipient_count: binary | nil,
            seals: [Docusign.SealSign.t()] | nil,
            signers: [Docusign.Signer.t()] | nil,
            witnesses: [Docusign.Witness.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, agents} <-
          case(data["agents"]) do
            nil ->
              nil

            _ ->
              data["agents"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Agent.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, carbon_copies} <-
          case(data["carbonCopies"]) do
            nil ->
              nil

            _ ->
              data["carbonCopies"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CarbonCopy.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, certified_deliveries} <-
          case(data["certifiedDeliveries"]) do
            nil ->
              nil

            _ ->
              data["certifiedDeliveries"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CertifiedDelivery.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, current_routing_order} <-
          case(data["currentRoutingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["currentRoutingOrder"]}}
          end,
        {:ok, editors} <-
          case(data["editors"]) do
            nil ->
              nil

            _ ->
              data["editors"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Editor.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, in_person_signers} <-
          case(data["inPersonSigners"]) do
            nil ->
              nil

            _ ->
              data["inPersonSigners"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.InPersonSigner.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, intermediaries} <-
          case(data["intermediaries"]) do
            nil ->
              nil

            _ ->
              data["intermediaries"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Intermediary.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, notaries} <-
          case(data["notaries"]) do
            nil ->
              nil

            _ ->
              data["notaries"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.NotaryRecipient.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, recipient_count} <-
          case(data["recipientCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientCount"]}}
          end,
        {:ok, seals} <-
          case(data["seals"]) do
            nil ->
              nil

            _ ->
              data["seals"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SealSign.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signers} <-
          case(data["signers"]) do
            nil ->
              nil

            _ ->
              data["signers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Signer.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, witnesses} <-
          case(data["witnesses"]) do
            nil ->
              nil

            _ ->
              data["witnesses"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Witness.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           agents: agents,
           carbon_copies: carbon_copies,
           certified_deliveries: certified_deliveries,
           current_routing_order: current_routing_order,
           editors: editors,
           error_details: error_details,
           in_person_signers: in_person_signers,
           intermediaries: intermediaries,
           notaries: notaries,
           recipient_count: recipient_count,
           seals: seals,
           signers: signers,
           witnesses: witnesses
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["EnvelopeRecipients" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "agents" =>
          case(data.agents) do
            nil ->
              nil

            _ ->
              Enum.map(data.agents, fn item -> Docusign.Agent.encode(item) end)
          end,
        "carbonCopies" =>
          case(data.carbon_copies) do
            nil ->
              nil

            _ ->
              Enum.map(data.carbon_copies, fn item -> Docusign.CarbonCopy.encode(item) end)
          end,
        "certifiedDeliveries" =>
          case(data.certified_deliveries) do
            nil ->
              nil

            _ ->
              Enum.map(data.certified_deliveries, fn item ->
                Docusign.CertifiedDelivery.encode(item)
              end)
          end,
        "currentRoutingOrder" => data.current_routing_order,
        "editors" =>
          case(data.editors) do
            nil ->
              nil

            _ ->
              Enum.map(data.editors, fn item -> Docusign.Editor.encode(item) end)
          end,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "inPersonSigners" =>
          case(data.in_person_signers) do
            nil ->
              nil

            _ ->
              Enum.map(data.in_person_signers, fn item -> Docusign.InPersonSigner.encode(item) end)
          end,
        "intermediaries" =>
          case(data.intermediaries) do
            nil ->
              nil

            _ ->
              Enum.map(data.intermediaries, fn item -> Docusign.Intermediary.encode(item) end)
          end,
        "notaries" =>
          case(data.notaries) do
            nil ->
              nil

            _ ->
              Enum.map(data.notaries, fn item -> Docusign.NotaryRecipient.encode(item) end)
          end,
        "recipientCount" => data.recipient_count,
        "seals" =>
          case(data.seals) do
            nil ->
              nil

            _ ->
              Enum.map(data.seals, fn item -> Docusign.SealSign.encode(item) end)
          end,
        "signers" =>
          case(data.signers) do
            nil ->
              nil

            _ ->
              Enum.map(data.signers, fn item -> Docusign.Signer.encode(item) end)
          end,
        "witnesses" =>
          case(data.witnesses) do
            nil ->
              nil

            _ ->
              Enum.map(data.witnesses, fn item -> Docusign.Witness.encode(item) end)
          end
      }
    end
  end

  defmodule(EnvelopeViews) do
    @moduledoc "#{nil}
    "
    defstruct(url: nil)
    @type t :: %__MODULE__{url: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, url} <-
          case(data["url"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["url"]}}
          end
      ) do
        {:ok, %__MODULE__{url: url}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["EnvelopeViews" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"url" => data.url}
    end
  end

  defmodule(Witness) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      witness_for_guid: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      witness_for: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      creation_reason: nil,
      allow_system_override_for_locked_recipient: nil,
      agent_can_edit_email: nil,
      is_bulk_recipient_metadata: nil,
      bulk_recipients_uri: nil,
      proof_file: nil,
      sign_in_each_location_metadata: nil,
      delivery_method_metadata: nil,
      require_upload_signature: nil,
      sign_in_each_location: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      require_signer_certificate: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      auto_navigation: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      offline_attributes: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      require_sign_on_paper: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      signature_info: nil,
      recipient_signature_providers: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      is_bulk_recipient: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      tabs: nil,
      can_sign_offline: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      excluded_documents: nil,
      agent_can_edit_name: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      default_recipient: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      notary_id: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil,
      recipient_supplies_tabs: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            witness_for_guid: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            witness_for: binary | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            creation_reason: binary | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            agent_can_edit_email: binary | nil,
            is_bulk_recipient_metadata: Docusign.PropertyMetadata.t() | nil,
            bulk_recipients_uri: binary | nil,
            proof_file: Docusign.RecipientProofFile.t() | nil,
            sign_in_each_location_metadata: Docusign.PropertyMetadata.t() | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            require_upload_signature: binary | nil,
            sign_in_each_location: binary | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            require_signer_certificate: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            auto_navigation: binary | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            offline_attributes: Docusign.OfflineAttributes.t() | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            require_sign_on_paper: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            signature_info: Docusign.RecipientSignatureInformation.t() | nil,
            recipient_signature_providers: [Docusign.RecipientSignatureProvider.t()] | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            is_bulk_recipient: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            can_sign_offline: binary | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            excluded_documents: [binary] | nil,
            agent_can_edit_name: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            default_recipient: binary | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            notary_id: binary | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil,
            recipient_supplies_tabs: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, witness_for_guid} <-
          case(data["witnessForGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["witnessForGuid"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, witness_for} <-
          case(data["witnessFor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["witnessFor"]}}
          end,
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, creation_reason} <-
          case(data["creationReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["creationReason"]}}
          end,
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, agent_can_edit_email} <-
          case(data["agentCanEditEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditEmail"]}}
          end,
        {:ok, is_bulk_recipient_metadata} <-
          Docusign.PropertyMetadata.decode(data["isBulkRecipientMetadata"]),
        {:ok, bulk_recipients_uri} <-
          case(data["bulkRecipientsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bulkRecipientsUri"]}}
          end,
        {:ok, proof_file} <- Docusign.RecipientProofFile.decode(data["proofFile"]),
        {:ok, sign_in_each_location_metadata} <-
          Docusign.PropertyMetadata.decode(data["signInEachLocationMetadata"]),
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, require_upload_signature} <-
          case(data["requireUploadSignature"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireUploadSignature"]}}
          end,
        {:ok, sign_in_each_location} <-
          case(data["signInEachLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signInEachLocation"]}}
          end,
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, require_signer_certificate} <-
          case(data["requireSignerCertificate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignerCertificate"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, auto_navigation} <-
          case(data["autoNavigation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoNavigation"]}}
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, offline_attributes} <- Docusign.OfflineAttributes.decode(data["offlineAttributes"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, require_sign_on_paper} <-
          case(data["requireSignOnPaper"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignOnPaper"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, signature_info} <-
          Docusign.RecipientSignatureInformation.decode(data["signatureInfo"]),
        {:ok, recipient_signature_providers} <-
          case(data["recipientSignatureProviders"]) do
            nil ->
              nil

            _ ->
              data["recipientSignatureProviders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientSignatureProvider.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, is_bulk_recipient} <-
          case(data["isBulkRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isBulkRecipient"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, can_sign_offline} <-
          case(data["canSignOffline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["canSignOffline"]}}
          end,
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, agent_can_edit_name} <-
          case(data["agentCanEditName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditName"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, default_recipient} <-
          case(data["defaultRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["defaultRecipient"]}}
          end,
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, notary_id} <-
          case(data["notaryId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["notaryId"]}}
          end,
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, recipient_supplies_tabs} <-
          case(data["recipientSuppliesTabs"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientSuppliesTabs"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           witness_for_guid: witness_for_guid,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           witness_for: witness_for,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           creation_reason: creation_reason,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           agent_can_edit_email: agent_can_edit_email,
           is_bulk_recipient_metadata: is_bulk_recipient_metadata,
           bulk_recipients_uri: bulk_recipients_uri,
           proof_file: proof_file,
           sign_in_each_location_metadata: sign_in_each_location_metadata,
           delivery_method_metadata: delivery_method_metadata,
           require_upload_signature: require_upload_signature,
           sign_in_each_location: sign_in_each_location,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           require_signer_certificate: require_signer_certificate,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           auto_navigation: auto_navigation,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           offline_attributes: offline_attributes,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           require_sign_on_paper: require_sign_on_paper,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           signature_info: signature_info,
           recipient_signature_providers: recipient_signature_providers,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           is_bulk_recipient: is_bulk_recipient,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           tabs: tabs,
           can_sign_offline: can_sign_offline,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           excluded_documents: excluded_documents,
           agent_can_edit_name: agent_can_edit_name,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           default_recipient: default_recipient,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           notary_id: notary_id,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments,
           recipient_supplies_tabs: recipient_supplies_tabs
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["witness" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "witnessForGuid" => data.witness_for_guid,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "witnessFor" => data.witness_for,
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "creationReason" => data.creation_reason,
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "agentCanEditEmail" => data.agent_can_edit_email,
        "isBulkRecipientMetadata" =>
          Docusign.PropertyMetadata.encode(data.is_bulk_recipient_metadata),
        "bulkRecipientsUri" => data.bulk_recipients_uri,
        "proofFile" => Docusign.RecipientProofFile.encode(data.proof_file),
        "signInEachLocationMetadata" =>
          Docusign.PropertyMetadata.encode(data.sign_in_each_location_metadata),
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "requireUploadSignature" => data.require_upload_signature,
        "signInEachLocation" => data.sign_in_each_location,
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "requireSignerCertificate" => data.require_signer_certificate,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "autoNavigation" => data.auto_navigation,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "offlineAttributes" => Docusign.OfflineAttributes.encode(data.offline_attributes),
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "requireSignOnPaper" => data.require_sign_on_paper,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "signatureInfo" => Docusign.RecipientSignatureInformation.encode(data.signature_info),
        "recipientSignatureProviders" =>
          case(data.recipient_signature_providers) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_signature_providers, fn item ->
                Docusign.RecipientSignatureProvider.encode(item)
              end)
          end,
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "isBulkRecipient" => data.is_bulk_recipient,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "canSignOffline" => data.can_sign_offline,
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "agentCanEditName" => data.agent_can_edit_name,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "defaultRecipient" => data.default_recipient,
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "notaryId" => data.notary_id,
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end,
        "recipientSuppliesTabs" => data.recipient_supplies_tabs
      }
    end
  end

  defmodule(BulkEnvelopeStatus) do
    @moduledoc "#{nil}
    "
    defstruct(
      batch_id: nil,
      batch_size: nil,
      bulk_envelopes: nil,
      bulk_envelopes_batch_uri: nil,
      end_position: nil,
      failed: nil,
      next_uri: nil,
      previous_uri: nil,
      queued: nil,
      result_set_size: nil,
      sent: nil,
      start_position: nil,
      submitted_date: nil,
      total_set_size: nil
    )

    @type t :: %__MODULE__{
            batch_id: binary | nil,
            batch_size: binary | nil,
            bulk_envelopes: [Docusign.BulkEnvelope.t()] | nil,
            bulk_envelopes_batch_uri: binary | nil,
            end_position: binary | nil,
            failed: binary | nil,
            next_uri: binary | nil,
            previous_uri: binary | nil,
            queued: binary | nil,
            result_set_size: binary | nil,
            sent: binary | nil,
            start_position: binary | nil,
            submitted_date: binary | nil,
            total_set_size: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, batch_id} <-
          case(data["batchId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["batchId"]}}
          end,
        {:ok, batch_size} <-
          case(data["batchSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["batchSize"]}}
          end,
        {:ok, bulk_envelopes} <-
          case(data["bulkEnvelopes"]) do
            nil ->
              nil

            _ ->
              data["bulkEnvelopes"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.BulkEnvelope.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, bulk_envelopes_batch_uri} <-
          case(data["bulkEnvelopesBatchUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bulkEnvelopesBatchUri"]}}
          end,
        {:ok, end_position} <-
          case(data["endPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["endPosition"]}}
          end,
        {:ok, failed} <-
          case(data["failed"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["failed"]}}
          end,
        {:ok, next_uri} <-
          case(data["nextUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["nextUri"]}}
          end,
        {:ok, previous_uri} <-
          case(data["previousUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["previousUri"]}}
          end,
        {:ok, queued} <-
          case(data["queued"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["queued"]}}
          end,
        {:ok, result_set_size} <-
          case(data["resultSetSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["resultSetSize"]}}
          end,
        {:ok, sent} <-
          case(data["sent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sent"]}}
          end,
        {:ok, start_position} <-
          case(data["startPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["startPosition"]}}
          end,
        {:ok, submitted_date} <-
          case(data["submittedDate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["submittedDate"]}}
          end,
        {:ok, total_set_size} <-
          case(data["totalSetSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalSetSize"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           batch_id: batch_id,
           batch_size: batch_size,
           bulk_envelopes: bulk_envelopes,
           bulk_envelopes_batch_uri: bulk_envelopes_batch_uri,
           end_position: end_position,
           failed: failed,
           next_uri: next_uri,
           previous_uri: previous_uri,
           queued: queued,
           result_set_size: result_set_size,
           sent: sent,
           start_position: start_position,
           submitted_date: submitted_date,
           total_set_size: total_set_size
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["bulkEnvelopeStatus" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "batchId" => data.batch_id,
        "batchSize" => data.batch_size,
        "bulkEnvelopes" =>
          case(data.bulk_envelopes) do
            nil ->
              nil

            _ ->
              Enum.map(data.bulk_envelopes, fn item -> Docusign.BulkEnvelope.encode(item) end)
          end,
        "bulkEnvelopesBatchUri" => data.bulk_envelopes_batch_uri,
        "endPosition" => data.end_position,
        "failed" => data.failed,
        "nextUri" => data.next_uri,
        "previousUri" => data.previous_uri,
        "queued" => data.queued,
        "resultSetSize" => data.result_set_size,
        "sent" => data.sent,
        "startPosition" => data.start_position,
        "submittedDate" => data.submitted_date,
        "totalSetSize" => data.total_set_size
      }
    end
  end

  defmodule(WorkflowStep) do
    @moduledoc "#{nil}
    "
    defstruct(
      action: nil,
      completed_date: nil,
      item_id: nil,
      recipient_routing: nil,
      status: nil,
      trigger_on_item: nil,
      triggered_date: nil,
      workflow_step_id: nil
    )

    @type t :: %__MODULE__{
            action: binary | nil,
            completed_date: binary | nil,
            item_id: binary | nil,
            recipient_routing: Docusign.RecipientRouting.t() | nil,
            status: binary | nil,
            trigger_on_item: binary | nil,
            triggered_date: binary | nil,
            workflow_step_id: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, action} <-
          case(data["action"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["action"]}}
          end,
        {:ok, completed_date} <-
          case(data["completedDate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedDate"]}}
          end,
        {:ok, item_id} <-
          case(data["itemId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["itemId"]}}
          end,
        {:ok, recipient_routing} <- Docusign.RecipientRouting.decode(data["recipientRouting"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, trigger_on_item} <-
          case(data["triggerOnItem"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["triggerOnItem"]}}
          end,
        {:ok, triggered_date} <-
          case(data["triggeredDate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["triggeredDate"]}}
          end,
        {:ok, workflow_step_id} <-
          case(data["workflowStepId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["workflowStepId"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           action: action,
           completed_date: completed_date,
           item_id: item_id,
           recipient_routing: recipient_routing,
           status: status,
           trigger_on_item: trigger_on_item,
           triggered_date: triggered_date,
           workflow_step_id: workflow_step_id
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["workflowStep" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "action" => data.action,
        "completedDate" => data.completed_date,
        "itemId" => data.item_id,
        "recipientRouting" => Docusign.RecipientRouting.encode(data.recipient_routing),
        "status" => data.status,
        "triggerOnItem" => data.trigger_on_item,
        "triggeredDate" => data.triggered_date,
        "workflowStepId" => data.workflow_step_id
      }
    end
  end

  defmodule(CompositeTemplate) do
    @moduledoc "#{nil}
    "
    defstruct(
      composite_template_id: nil,
      document: nil,
      inline_templates: nil,
      pdf_meta_data_template_sequence: nil,
      server_templates: nil
    )

    @type t :: %__MODULE__{
            composite_template_id: binary | nil,
            document: Docusign.Document.t() | nil,
            inline_templates: [Docusign.InlineTemplate.t()] | nil,
            pdf_meta_data_template_sequence: binary | nil,
            server_templates: [Docusign.ServerTemplate.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, composite_template_id} <-
          case(data["compositeTemplateId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["compositeTemplateId"]}}
          end,
        {:ok, document} <- Docusign.Document.decode(data["document"]),
        {:ok, inline_templates} <-
          case(data["inlineTemplates"]) do
            nil ->
              nil

            _ ->
              data["inlineTemplates"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.InlineTemplate.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, pdf_meta_data_template_sequence} <-
          case(data["pdfMetaDataTemplateSequence"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pdfMetaDataTemplateSequence"]}}
          end,
        {:ok, server_templates} <-
          case(data["serverTemplates"]) do
            nil ->
              nil

            _ ->
              data["serverTemplates"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.ServerTemplate.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           composite_template_id: composite_template_id,
           document: document,
           inline_templates: inline_templates,
           pdf_meta_data_template_sequence: pdf_meta_data_template_sequence,
           server_templates: server_templates
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["compositeTemplate" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "compositeTemplateId" => data.composite_template_id,
        "document" => Docusign.Document.encode(data.document),
        "inlineTemplates" =>
          case(data.inline_templates) do
            nil ->
              nil

            _ ->
              Enum.map(data.inline_templates, fn item -> Docusign.InlineTemplate.encode(item) end)
          end,
        "pdfMetaDataTemplateSequence" => data.pdf_meta_data_template_sequence,
        "serverTemplates" =>
          case(data.server_templates) do
            nil ->
              nil

            _ ->
              Enum.map(data.server_templates, fn item -> Docusign.ServerTemplate.encode(item) end)
          end
      }
    end
  end

  defmodule(EnvelopeDefinition) do
    @moduledoc "#{nil}
    "
    defstruct(
      last_modified_date_time: nil,
      brand_id: nil,
      allow_recipient_recursion: nil,
      created_date_time: nil,
      voided_date_time: nil,
      expire_enabled: nil,
      declined_date_time: nil,
      template_roles: nil,
      envelope_uri: nil,
      any_signer: nil,
      voided_reason: nil,
      purge_request_date: nil,
      documents_uri: nil,
      documents_combined_uri: nil,
      lock_information: nil,
      has_form_data_changed: nil,
      purge_completed_date: nil,
      has_wav_file: nil,
      transaction_id: nil,
      custom_fields_uri: nil,
      recipient_view_request: nil,
      attachments_uri: nil,
      authoritative_copy: nil,
      is_dynamic_envelope: nil,
      power_form: nil,
      documents: nil,
      accessibility: nil,
      signer_can_sign_on_mobile: nil,
      email_subject: nil,
      document_base64: nil,
      allow_reassign: nil,
      sender: nil,
      allow_view_history: nil,
      envelope_id: nil,
      status_date_time: nil,
      is_signature_provider_envelope: nil,
      enable_wet_sign: nil,
      allow_comments: nil,
      envelope_id_stamping: nil,
      template_id: nil,
      allow_markup: nil,
      sent_date_time: nil,
      custom_fields: nil,
      certificate_uri: nil,
      auto_navigation: nil,
      has_comments: nil,
      expire_date_time: nil,
      recipients_lock: nil,
      envelope_documents: nil,
      purge_state: nil,
      templates_uri: nil,
      external_envelope_id: nil,
      workflow: nil,
      composite_templates: nil,
      folders: nil,
      message_lock: nil,
      disable_responsive_document: nil,
      use_disclosure: nil,
      location: nil,
      enforce_signer_visibility: nil,
      envelope_metadata: nil,
      recipients: nil,
      holder: nil,
      completed_date_time: nil,
      attachments: nil,
      email_blurb: nil,
      recipients_uri: nil,
      delivered_date_time: nil,
      status_changed_date_time: nil,
      is21_cfr_part11: nil,
      brand_lock: nil,
      password: nil,
      initial_sent_date_time: nil,
      envelope_attachments: nil,
      expire_after: nil,
      notification: nil,
      event_notification: nil,
      notification_uri: nil,
      status: nil,
      asynchronous: nil,
      authoritative_copy_default: nil,
      copy_recipient_data: nil,
      email_settings: nil,
      access_control_list_base64: nil,
      envelope_location: nil,
      deleted_date_time: nil,
      signing_location: nil
    )

    @type t :: %__MODULE__{
            last_modified_date_time: binary | nil,
            brand_id: binary | nil,
            allow_recipient_recursion: binary | nil,
            created_date_time: binary | nil,
            voided_date_time: binary | nil,
            expire_enabled: binary | nil,
            declined_date_time: binary | nil,
            template_roles: [Docusign.TemplateRole.t()] | nil,
            envelope_uri: binary | nil,
            any_signer: binary | nil,
            voided_reason: binary | nil,
            purge_request_date: binary | nil,
            documents_uri: binary | nil,
            documents_combined_uri: binary | nil,
            lock_information: Docusign.EnvelopeLocks.t() | nil,
            has_form_data_changed: binary | nil,
            purge_completed_date: binary | nil,
            has_wav_file: binary | nil,
            transaction_id: binary | nil,
            custom_fields_uri: binary | nil,
            recipient_view_request: Docusign.RecipientViewRequest.t() | nil,
            attachments_uri: binary | nil,
            authoritative_copy: binary | nil,
            is_dynamic_envelope: binary | nil,
            power_form: Docusign.PowerForm.t() | nil,
            documents: [Docusign.Document.t()] | nil,
            accessibility: binary | nil,
            signer_can_sign_on_mobile: binary | nil,
            email_subject: binary | nil,
            document_base64: binary | nil,
            allow_reassign: binary | nil,
            sender: Docusign.UserInfo.t() | nil,
            allow_view_history: binary | nil,
            envelope_id: binary | nil,
            status_date_time: binary | nil,
            is_signature_provider_envelope: binary | nil,
            enable_wet_sign: binary | nil,
            allow_comments: binary | nil,
            envelope_id_stamping: binary | nil,
            template_id: binary | nil,
            allow_markup: binary | nil,
            sent_date_time: binary | nil,
            custom_fields: Docusign.AccountCustomFields.t() | nil,
            certificate_uri: binary | nil,
            auto_navigation: binary | nil,
            has_comments: binary | nil,
            expire_date_time: binary | nil,
            recipients_lock: binary | nil,
            envelope_documents: [Docusign.EnvelopeDocument.t()] | nil,
            purge_state: binary | nil,
            templates_uri: binary | nil,
            external_envelope_id: binary | nil,
            workflow: Docusign.Workflow.t() | nil,
            composite_templates: [Docusign.CompositeTemplate.t()] | nil,
            folders: [Docusign.Folder.t()] | nil,
            message_lock: binary | nil,
            disable_responsive_document: binary | nil,
            use_disclosure: binary | nil,
            location: binary | nil,
            enforce_signer_visibility: binary | nil,
            envelope_metadata: Docusign.EnvelopeMetadata.t() | nil,
            recipients: Docusign.EnvelopeRecipients.t() | nil,
            holder: binary | nil,
            completed_date_time: binary | nil,
            attachments: [Docusign.Attachment.t()] | nil,
            email_blurb: binary | nil,
            recipients_uri: binary | nil,
            delivered_date_time: binary | nil,
            status_changed_date_time: binary | nil,
            is21_cfr_part11: binary | nil,
            brand_lock: binary | nil,
            password: binary | nil,
            initial_sent_date_time: binary | nil,
            envelope_attachments: [Docusign.Attachment.t()] | nil,
            expire_after: binary | nil,
            notification: Docusign.Notification.t() | nil,
            event_notification: Docusign.EventNotification.t() | nil,
            notification_uri: binary | nil,
            status: binary | nil,
            asynchronous: binary | nil,
            authoritative_copy_default: binary | nil,
            copy_recipient_data: binary | nil,
            email_settings: Docusign.EmailSettings.t() | nil,
            access_control_list_base64: binary | nil,
            envelope_location: binary | nil,
            deleted_date_time: binary | nil,
            signing_location: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, last_modified_date_time} <-
          case(data["lastModifiedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastModifiedDateTime"]}}
          end,
        {:ok, brand_id} <-
          case(data["brandId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["brandId"]}}
          end,
        {:ok, allow_recipient_recursion} <-
          case(data["allowRecipientRecursion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowRecipientRecursion"]}}
          end,
        {:ok, created_date_time} <-
          case(data["createdDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["createdDateTime"]}}
          end,
        {:ok, voided_date_time} <-
          case(data["voidedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["voidedDateTime"]}}
          end,
        {:ok, expire_enabled} <-
          case(data["expireEnabled"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireEnabled"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, template_roles} <-
          case(data["templateRoles"]) do
            nil ->
              nil

            _ ->
              data["templateRoles"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.TemplateRole.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, envelope_uri} <-
          case(data["envelopeUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeUri"]}}
          end,
        {:ok, any_signer} <-
          case(data["anySigner"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anySigner"]}}
          end,
        {:ok, voided_reason} <-
          case(data["voidedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["voidedReason"]}}
          end,
        {:ok, purge_request_date} <-
          case(data["purgeRequestDate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["purgeRequestDate"]}}
          end,
        {:ok, documents_uri} <-
          case(data["documentsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentsUri"]}}
          end,
        {:ok, documents_combined_uri} <-
          case(data["documentsCombinedUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentsCombinedUri"]}}
          end,
        {:ok, lock_information} <- Docusign.EnvelopeLocks.decode(data["lockInformation"]),
        {:ok, has_form_data_changed} <-
          case(data["hasFormDataChanged"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasFormDataChanged"]}}
          end,
        {:ok, purge_completed_date} <-
          case(data["purgeCompletedDate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["purgeCompletedDate"]}}
          end,
        {:ok, has_wav_file} <-
          case(data["hasWavFile"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasWavFile"]}}
          end,
        {:ok, transaction_id} <-
          case(data["transactionId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["transactionId"]}}
          end,
        {:ok, custom_fields_uri} <-
          case(data["customFieldsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customFieldsUri"]}}
          end,
        {:ok, recipient_view_request} <-
          Docusign.RecipientViewRequest.decode(data["recipientViewRequest"]),
        {:ok, attachments_uri} <-
          case(data["attachmentsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["attachmentsUri"]}}
          end,
        {:ok, authoritative_copy} <-
          case(data["authoritativeCopy"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authoritativeCopy"]}}
          end,
        {:ok, is_dynamic_envelope} <-
          case(data["isDynamicEnvelope"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isDynamicEnvelope"]}}
          end,
        {:ok, power_form} <- Docusign.PowerForm.decode(data["powerForm"]),
        {:ok, documents} <-
          case(data["documents"]) do
            nil ->
              nil

            _ ->
              data["documents"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Document.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, accessibility} <-
          case(data["accessibility"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessibility"]}}
          end,
        {:ok, signer_can_sign_on_mobile} <-
          case(data["signerCanSignOnMobile"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerCanSignOnMobile"]}}
          end,
        {:ok, email_subject} <-
          case(data["emailSubject"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailSubject"]}}
          end,
        {:ok, document_base64} <-
          case(data["documentBase64"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentBase64"]}}
          end,
        {:ok, allow_reassign} <-
          case(data["allowReassign"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowReassign"]}}
          end,
        {:ok, sender} <- Docusign.UserInfo.decode(data["sender"]),
        {:ok, allow_view_history} <-
          case(data["allowViewHistory"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowViewHistory"]}}
          end,
        {:ok, envelope_id} <-
          case(data["envelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeId"]}}
          end,
        {:ok, status_date_time} <-
          case(data["statusDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusDateTime"]}}
          end,
        {:ok, is_signature_provider_envelope} <-
          case(data["isSignatureProviderEnvelope"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isSignatureProviderEnvelope"]}}
          end,
        {:ok, enable_wet_sign} <-
          case(data["enableWetSign"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["enableWetSign"]}}
          end,
        {:ok, allow_comments} <-
          case(data["allowComments"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowComments"]}}
          end,
        {:ok, envelope_id_stamping} <-
          case(data["envelopeIdStamping"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeIdStamping"]}}
          end,
        {:ok, template_id} <-
          case(data["templateId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateId"]}}
          end,
        {:ok, allow_markup} <-
          case(data["allowMarkup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowMarkup"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, custom_fields} <- Docusign.AccountCustomFields.decode(data["customFields"]),
        {:ok, certificate_uri} <-
          case(data["certificateUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["certificateUri"]}}
          end,
        {:ok, auto_navigation} <-
          case(data["autoNavigation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoNavigation"]}}
          end,
        {:ok, has_comments} <-
          case(data["hasComments"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasComments"]}}
          end,
        {:ok, expire_date_time} <-
          case(data["expireDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireDateTime"]}}
          end,
        {:ok, recipients_lock} <-
          case(data["recipientsLock"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientsLock"]}}
          end,
        {:ok, envelope_documents} <-
          case(data["envelopeDocuments"]) do
            nil ->
              nil

            _ ->
              data["envelopeDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.EnvelopeDocument.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, purge_state} <-
          case(data["purgeState"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["purgeState"]}}
          end,
        {:ok, templates_uri} <-
          case(data["templatesUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templatesUri"]}}
          end,
        {:ok, external_envelope_id} <-
          case(data["externalEnvelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["externalEnvelopeId"]}}
          end,
        {:ok, workflow} <- Docusign.Workflow.decode(data["workflow"]),
        {:ok, composite_templates} <-
          case(data["compositeTemplates"]) do
            nil ->
              nil

            _ ->
              data["compositeTemplates"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CompositeTemplate.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, folders} <-
          case(data["folders"]) do
            nil ->
              nil

            _ ->
              data["folders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Folder.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, message_lock} <-
          case(data["messageLock"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["messageLock"]}}
          end,
        {:ok, disable_responsive_document} <-
          case(data["disableResponsiveDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableResponsiveDocument"]}}
          end,
        {:ok, use_disclosure} <-
          case(data["useDisclosure"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["useDisclosure"]}}
          end,
        {:ok, location} <-
          case(data["location"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["location"]}}
          end,
        {:ok, enforce_signer_visibility} <-
          case(data["enforceSignerVisibility"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["enforceSignerVisibility"]}}
          end,
        {:ok, envelope_metadata} <- Docusign.EnvelopeMetadata.decode(data["envelopeMetadata"]),
        {:ok, recipients} <- Docusign.EnvelopeRecipients.decode(data["recipients"]),
        {:ok, holder} <-
          case(data["holder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["holder"]}}
          end,
        {:ok, completed_date_time} <-
          case(data["completedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedDateTime"]}}
          end,
        {:ok, attachments} <-
          case(data["attachments"]) do
            nil ->
              nil

            _ ->
              data["attachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Attachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email_blurb} <-
          case(data["emailBlurb"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailBlurb"]}}
          end,
        {:ok, recipients_uri} <-
          case(data["recipientsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientsUri"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, status_changed_date_time} <-
          case(data["statusChangedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusChangedDateTime"]}}
          end,
        {:ok, is21_cfr_part11} <-
          case(data["is21CFRPart11"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["is21CFRPart11"]}}
          end,
        {:ok, brand_lock} <-
          case(data["brandLock"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["brandLock"]}}
          end,
        {:ok, password} <-
          case(data["password"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["password"]}}
          end,
        {:ok, initial_sent_date_time} <-
          case(data["initialSentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["initialSentDateTime"]}}
          end,
        {:ok, envelope_attachments} <-
          case(data["envelopeAttachments"]) do
            nil ->
              nil

            _ ->
              data["envelopeAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Attachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, expire_after} <-
          case(data["expireAfter"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireAfter"]}}
          end,
        {:ok, notification} <- Docusign.Notification.decode(data["notification"]),
        {:ok, event_notification} <- Docusign.EventNotification.decode(data["eventNotification"]),
        {:ok, notification_uri} <-
          case(data["notificationUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["notificationUri"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, asynchronous} <-
          case(data["asynchronous"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["asynchronous"]}}
          end,
        {:ok, authoritative_copy_default} <-
          case(data["authoritativeCopyDefault"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authoritativeCopyDefault"]}}
          end,
        {:ok, copy_recipient_data} <-
          case(data["copyRecipientData"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["copyRecipientData"]}}
          end,
        {:ok, email_settings} <- Docusign.EmailSettings.decode(data["emailSettings"]),
        {:ok, access_control_list_base64} <-
          case(data["accessControlListBase64"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessControlListBase64"]}}
          end,
        {:ok, envelope_location} <-
          case(data["envelopeLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeLocation"]}}
          end,
        {:ok, deleted_date_time} <-
          case(data["deletedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deletedDateTime"]}}
          end,
        {:ok, signing_location} <-
          case(data["signingLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingLocation"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           last_modified_date_time: last_modified_date_time,
           brand_id: brand_id,
           allow_recipient_recursion: allow_recipient_recursion,
           created_date_time: created_date_time,
           voided_date_time: voided_date_time,
           expire_enabled: expire_enabled,
           declined_date_time: declined_date_time,
           template_roles: template_roles,
           envelope_uri: envelope_uri,
           any_signer: any_signer,
           voided_reason: voided_reason,
           purge_request_date: purge_request_date,
           documents_uri: documents_uri,
           documents_combined_uri: documents_combined_uri,
           lock_information: lock_information,
           has_form_data_changed: has_form_data_changed,
           purge_completed_date: purge_completed_date,
           has_wav_file: has_wav_file,
           transaction_id: transaction_id,
           custom_fields_uri: custom_fields_uri,
           recipient_view_request: recipient_view_request,
           attachments_uri: attachments_uri,
           authoritative_copy: authoritative_copy,
           is_dynamic_envelope: is_dynamic_envelope,
           power_form: power_form,
           documents: documents,
           accessibility: accessibility,
           signer_can_sign_on_mobile: signer_can_sign_on_mobile,
           email_subject: email_subject,
           document_base64: document_base64,
           allow_reassign: allow_reassign,
           sender: sender,
           allow_view_history: allow_view_history,
           envelope_id: envelope_id,
           status_date_time: status_date_time,
           is_signature_provider_envelope: is_signature_provider_envelope,
           enable_wet_sign: enable_wet_sign,
           allow_comments: allow_comments,
           envelope_id_stamping: envelope_id_stamping,
           template_id: template_id,
           allow_markup: allow_markup,
           sent_date_time: sent_date_time,
           custom_fields: custom_fields,
           certificate_uri: certificate_uri,
           auto_navigation: auto_navigation,
           has_comments: has_comments,
           expire_date_time: expire_date_time,
           recipients_lock: recipients_lock,
           envelope_documents: envelope_documents,
           purge_state: purge_state,
           templates_uri: templates_uri,
           external_envelope_id: external_envelope_id,
           workflow: workflow,
           composite_templates: composite_templates,
           folders: folders,
           message_lock: message_lock,
           disable_responsive_document: disable_responsive_document,
           use_disclosure: use_disclosure,
           location: location,
           enforce_signer_visibility: enforce_signer_visibility,
           envelope_metadata: envelope_metadata,
           recipients: recipients,
           holder: holder,
           completed_date_time: completed_date_time,
           attachments: attachments,
           email_blurb: email_blurb,
           recipients_uri: recipients_uri,
           delivered_date_time: delivered_date_time,
           status_changed_date_time: status_changed_date_time,
           is21_cfr_part11: is21_cfr_part11,
           brand_lock: brand_lock,
           password: password,
           initial_sent_date_time: initial_sent_date_time,
           envelope_attachments: envelope_attachments,
           expire_after: expire_after,
           notification: notification,
           event_notification: event_notification,
           notification_uri: notification_uri,
           status: status,
           asynchronous: asynchronous,
           authoritative_copy_default: authoritative_copy_default,
           copy_recipient_data: copy_recipient_data,
           email_settings: email_settings,
           access_control_list_base64: access_control_list_base64,
           envelope_location: envelope_location,
           deleted_date_time: deleted_date_time,
           signing_location: signing_location
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["envelopeDefinition" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "lastModifiedDateTime" => data.last_modified_date_time,
        "brandId" => data.brand_id,
        "allowRecipientRecursion" => data.allow_recipient_recursion,
        "createdDateTime" => data.created_date_time,
        "voidedDateTime" => data.voided_date_time,
        "expireEnabled" => data.expire_enabled,
        "declinedDateTime" => data.declined_date_time,
        "templateRoles" =>
          case(data.template_roles) do
            nil ->
              nil

            _ ->
              Enum.map(data.template_roles, fn item -> Docusign.TemplateRole.encode(item) end)
          end,
        "envelopeUri" => data.envelope_uri,
        "anySigner" => data.any_signer,
        "voidedReason" => data.voided_reason,
        "purgeRequestDate" => data.purge_request_date,
        "documentsUri" => data.documents_uri,
        "documentsCombinedUri" => data.documents_combined_uri,
        "lockInformation" => Docusign.EnvelopeLocks.encode(data.lock_information),
        "hasFormDataChanged" => data.has_form_data_changed,
        "purgeCompletedDate" => data.purge_completed_date,
        "hasWavFile" => data.has_wav_file,
        "transactionId" => data.transaction_id,
        "customFieldsUri" => data.custom_fields_uri,
        "recipientViewRequest" =>
          Docusign.RecipientViewRequest.encode(data.recipient_view_request),
        "attachmentsUri" => data.attachments_uri,
        "authoritativeCopy" => data.authoritative_copy,
        "isDynamicEnvelope" => data.is_dynamic_envelope,
        "powerForm" => Docusign.PowerForm.encode(data.power_form),
        "documents" =>
          case(data.documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.documents, fn item -> Docusign.Document.encode(item) end)
          end,
        "accessibility" => data.accessibility,
        "signerCanSignOnMobile" => data.signer_can_sign_on_mobile,
        "emailSubject" => data.email_subject,
        "documentBase64" => data.document_base64,
        "allowReassign" => data.allow_reassign,
        "sender" => Docusign.UserInfo.encode(data.sender),
        "allowViewHistory" => data.allow_view_history,
        "envelopeId" => data.envelope_id,
        "statusDateTime" => data.status_date_time,
        "isSignatureProviderEnvelope" => data.is_signature_provider_envelope,
        "enableWetSign" => data.enable_wet_sign,
        "allowComments" => data.allow_comments,
        "envelopeIdStamping" => data.envelope_id_stamping,
        "templateId" => data.template_id,
        "allowMarkup" => data.allow_markup,
        "sentDateTime" => data.sent_date_time,
        "customFields" => Docusign.AccountCustomFields.encode(data.custom_fields),
        "certificateUri" => data.certificate_uri,
        "autoNavigation" => data.auto_navigation,
        "hasComments" => data.has_comments,
        "expireDateTime" => data.expire_date_time,
        "recipientsLock" => data.recipients_lock,
        "envelopeDocuments" =>
          case(data.envelope_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.envelope_documents, fn item ->
                Docusign.EnvelopeDocument.encode(item)
              end)
          end,
        "purgeState" => data.purge_state,
        "templatesUri" => data.templates_uri,
        "externalEnvelopeId" => data.external_envelope_id,
        "workflow" => Docusign.Workflow.encode(data.workflow),
        "compositeTemplates" =>
          case(data.composite_templates) do
            nil ->
              nil

            _ ->
              Enum.map(data.composite_templates, fn item ->
                Docusign.CompositeTemplate.encode(item)
              end)
          end,
        "folders" =>
          case(data.folders) do
            nil ->
              nil

            _ ->
              Enum.map(data.folders, fn item -> Docusign.Folder.encode(item) end)
          end,
        "messageLock" => data.message_lock,
        "disableResponsiveDocument" => data.disable_responsive_document,
        "useDisclosure" => data.use_disclosure,
        "location" => data.location,
        "enforceSignerVisibility" => data.enforce_signer_visibility,
        "envelopeMetadata" => Docusign.EnvelopeMetadata.encode(data.envelope_metadata),
        "recipients" => Docusign.EnvelopeRecipients.encode(data.recipients),
        "holder" => data.holder,
        "completedDateTime" => data.completed_date_time,
        "attachments" =>
          case(data.attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.attachments, fn item -> Docusign.Attachment.encode(item) end)
          end,
        "emailBlurb" => data.email_blurb,
        "recipientsUri" => data.recipients_uri,
        "deliveredDateTime" => data.delivered_date_time,
        "statusChangedDateTime" => data.status_changed_date_time,
        "is21CFRPart11" => data.is21_cfr_part11,
        "brandLock" => data.brand_lock,
        "password" => data.password,
        "initialSentDateTime" => data.initial_sent_date_time,
        "envelopeAttachments" =>
          case(data.envelope_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.envelope_attachments, fn item -> Docusign.Attachment.encode(item) end)
          end,
        "expireAfter" => data.expire_after,
        "notification" => Docusign.Notification.encode(data.notification),
        "eventNotification" => Docusign.EventNotification.encode(data.event_notification),
        "notificationUri" => data.notification_uri,
        "status" => data.status,
        "asynchronous" => data.asynchronous,
        "authoritativeCopyDefault" => data.authoritative_copy_default,
        "copyRecipientData" => data.copy_recipient_data,
        "emailSettings" => Docusign.EmailSettings.encode(data.email_settings),
        "accessControlListBase64" => data.access_control_list_base64,
        "envelopeLocation" => data.envelope_location,
        "deletedDateTime" => data.deleted_date_time,
        "signingLocation" => data.signing_location
      }
    end
  end

  defmodule(Radio) do
    @moduledoc "#{nil}
    "
    defstruct(
      x_position: nil,
      selected_metadata: nil,
      tab_order: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      value_metadata: nil,
      font_size: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      anchor_horizontal_alignment: nil,
      font_color_metadata: nil,
      anchor_string_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      selected: nil,
      font_size_metadata: nil,
      page_number_metadata: nil,
      locked_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      anchor_y_offset: nil,
      tab_order_metadata: nil,
      italic: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      anchor_horizontal_alignment_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      anchor_x_offset_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      locked: nil,
      anchor_match_whole_word: nil
    )

    @type t :: %__MODULE__{
            x_position: binary | nil,
            selected_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_order: binary | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            anchor_horizontal_alignment: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            selected: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            locked: binary | nil,
            anchor_match_whole_word: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, selected_metadata} <- Docusign.PropertyMetadata.decode(data["selectedMetadata"]),
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, selected} <-
          case(data["selected"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["selected"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           x_position: x_position,
           selected_metadata: selected_metadata,
           tab_order: tab_order,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           value_metadata: value_metadata,
           font_size: font_size,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           font_color_metadata: font_color_metadata,
           anchor_string_metadata: anchor_string_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           selected: selected,
           font_size_metadata: font_size_metadata,
           page_number_metadata: page_number_metadata,
           locked_metadata: locked_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           anchor_y_offset: anchor_y_offset,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           locked: locked,
           anchor_match_whole_word: anchor_match_whole_word
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["radio" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "xPosition" => data.x_position,
        "selectedMetadata" => Docusign.PropertyMetadata.encode(data.selected_metadata),
        "tabOrder" => data.tab_order,
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "selected" => data.selected,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "anchorYOffset" => data.anchor_y_offset,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "locked" => data.locked,
        "anchorMatchWholeWord" => data.anchor_match_whole_word
      }
    end
  end

  defmodule(RecipientPhoneNumber) do
    @moduledoc "#{nil}
    "
    defstruct(country_code: nil, country_code_metadata: nil, number: nil, number_metadata: nil)

    @type t :: %__MODULE__{
            country_code: binary | nil,
            country_code_metadata: Docusign.PropertyMetadata.t() | nil,
            number: binary | nil,
            number_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, country_code} <-
          case(data["countryCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["countryCode"]}}
          end,
        {:ok, country_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["countryCodeMetadata"]),
        {:ok, number} <-
          case(data["number"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["number"]}}
          end,
        {:ok, number_metadata} <- Docusign.PropertyMetadata.decode(data["numberMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           country_code: country_code,
           country_code_metadata: country_code_metadata,
           number: number,
           number_metadata: number_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientPhoneNumber" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "countryCode" => data.country_code,
        "countryCodeMetadata" => Docusign.PropertyMetadata.encode(data.country_code_metadata),
        "number" => data.number,
        "numberMetadata" => Docusign.PropertyMetadata.encode(data.number_metadata)
      }
    end
  end

  defmodule(ConnectEventData) do
    @moduledoc "#{nil}
    "
    defstruct(format: nil, include_data: nil, version: nil)

    @type t :: %__MODULE__{
            format: binary | nil,
            include_data: [binary] | nil,
            version: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, format} <-
          case(data["format"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["format"]}}
          end,
        {:ok, include_data} <-
          case(data["includeData"]) do
            nil ->
              nil

            _ ->
              data["includeData"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, version} <-
          case(data["version"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["version"]}}
          end
      ) do
        {:ok, %__MODULE__{format: format, include_data: include_data, version: version}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["connectEventData" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "format" => data.format,
        "includeData" =>
          case(data.include_data) do
            nil ->
              nil

            _ ->
              Enum.map(data.include_data, fn item -> item end)
          end,
        "version" => data.version
      }
    end
  end

  defmodule(RecipientAttachment) do
    @moduledoc "#{nil}
    "
    defstruct(
      attachment_id: nil,
      attachment_type: nil,
      data: nil,
      label: nil,
      name: nil,
      remote_url: nil
    )

    @type t :: %__MODULE__{
            attachment_id: binary | nil,
            attachment_type: binary | nil,
            data: binary | nil,
            label: binary | nil,
            name: binary | nil,
            remote_url: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, attachment_id} <-
          case(data["attachmentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["attachmentId"]}}
          end,
        {:ok, attachment_type} <-
          case(data["attachmentType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["attachmentType"]}}
          end,
        {:ok, data} <-
          case(data["data"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["data"]}}
          end,
        {:ok, label} <-
          case(data["label"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["label"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, remote_url} <-
          case(data["remoteUrl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["remoteUrl"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           attachment_id: attachment_id,
           attachment_type: attachment_type,
           data: data,
           label: label,
           name: name,
           remote_url: remote_url
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientAttachment" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "attachmentId" => data.attachment_id,
        "attachmentType" => data.attachment_type,
        "data" => data.data,
        "label" => data.label,
        "name" => data.name,
        "remoteUrl" => data.remote_url
      }
    end
  end

  defmodule(DobInformationInput) do
    @moduledoc "#{nil}
    "
    defstruct(date_of_birth: nil, display_level_code: nil, receive_in_response: nil)

    @type t :: %__MODULE__{
            date_of_birth: binary | nil,
            display_level_code: binary | nil,
            receive_in_response: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, date_of_birth} <-
          case(data["dateOfBirth"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["dateOfBirth"]}}
          end,
        {:ok, display_level_code} <-
          case(data["displayLevelCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayLevelCode"]}}
          end,
        {:ok, receive_in_response} <-
          case(data["receiveInResponse"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["receiveInResponse"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           date_of_birth: date_of_birth,
           display_level_code: display_level_code,
           receive_in_response: receive_in_response
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["dobInformationInput" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "dateOfBirth" => data.date_of_birth,
        "displayLevelCode" => data.display_level_code,
        "receiveInResponse" => data.receive_in_response
      }
    end
  end

  defmodule(PaymentSignerValues) do
    @moduledoc "#{nil}
    "
    defstruct(payment_option: nil)
    @type t :: %__MODULE__{payment_option: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, payment_option} <-
          case(data["paymentOption"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["paymentOption"]}}
          end
      ) do
        {:ok, %__MODULE__{payment_option: payment_option}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["paymentSignerValues" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"paymentOption" => data.payment_option}
    end
  end

  defmodule(ConditionalRecipientRuleFilter) do
    @moduledoc "#{nil}
    "
    defstruct(
      operator: nil,
      recipient_id: nil,
      scope: nil,
      tab_id: nil,
      tab_label: nil,
      tab_type: nil,
      value: nil
    )

    @type t :: %__MODULE__{
            operator: binary | nil,
            recipient_id: binary | nil,
            scope: binary | nil,
            tab_id: binary | nil,
            tab_label: binary | nil,
            tab_type: binary | nil,
            value: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, operator} <-
          case(data["operator"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["operator"]}}
          end,
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, scope} <-
          case(data["scope"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["scope"]}}
          end,
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           operator: operator,
           recipient_id: recipient_id,
           scope: scope,
           tab_id: tab_id,
           tab_label: tab_label,
           tab_type: tab_type,
           value: value
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["conditionalRecipientRuleFilter" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "operator" => data.operator,
        "recipientId" => data.recipient_id,
        "scope" => data.scope,
        "tabId" => data.tab_id,
        "tabLabel" => data.tab_label,
        "tabType" => data.tab_type,
        "value" => data.value
      }
    end
  end

  defmodule(FolderItemV2) do
    @moduledoc "#{nil}
    "
    defstruct(
      completed_date_time: nil,
      created_date_time: nil,
      envelope_id: nil,
      envelope_uri: nil,
      expire_date_time: nil,
      folder_id: nil,
      folder_uri: nil,
      is21_cfr_part11: nil,
      owner_name: nil,
      recipients: nil,
      recipients_uri: nil,
      sender_company: nil,
      sender_email: nil,
      sender_name: nil,
      sender_user_id: nil,
      sent_date_time: nil,
      status: nil,
      subject: nil,
      template_id: nil,
      template_uri: nil
    )

    @type t :: %__MODULE__{
            completed_date_time: binary | nil,
            created_date_time: binary | nil,
            envelope_id: binary | nil,
            envelope_uri: binary | nil,
            expire_date_time: binary | nil,
            folder_id: binary | nil,
            folder_uri: binary | nil,
            is21_cfr_part11: binary | nil,
            owner_name: binary | nil,
            recipients: Docusign.EnvelopeRecipients.t() | nil,
            recipients_uri: binary | nil,
            sender_company: binary | nil,
            sender_email: binary | nil,
            sender_name: binary | nil,
            sender_user_id: binary | nil,
            sent_date_time: binary | nil,
            status: binary | nil,
            subject: binary | nil,
            template_id: binary | nil,
            template_uri: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, completed_date_time} <-
          case(data["completedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedDateTime"]}}
          end,
        {:ok, created_date_time} <-
          case(data["createdDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["createdDateTime"]}}
          end,
        {:ok, envelope_id} <-
          case(data["envelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeId"]}}
          end,
        {:ok, envelope_uri} <-
          case(data["envelopeUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeUri"]}}
          end,
        {:ok, expire_date_time} <-
          case(data["expireDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireDateTime"]}}
          end,
        {:ok, folder_id} <-
          case(data["folderId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["folderId"]}}
          end,
        {:ok, folder_uri} <-
          case(data["folderUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["folderUri"]}}
          end,
        {:ok, is21_cfr_part11} <-
          case(data["is21CFRPart11"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["is21CFRPart11"]}}
          end,
        {:ok, owner_name} <-
          case(data["ownerName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["ownerName"]}}
          end,
        {:ok, recipients} <- Docusign.EnvelopeRecipients.decode(data["recipients"]),
        {:ok, recipients_uri} <-
          case(data["recipientsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientsUri"]}}
          end,
        {:ok, sender_company} <-
          case(data["senderCompany"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderCompany"]}}
          end,
        {:ok, sender_email} <-
          case(data["senderEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderEmail"]}}
          end,
        {:ok, sender_name} <-
          case(data["senderName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderName"]}}
          end,
        {:ok, sender_user_id} <-
          case(data["senderUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderUserId"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, subject} <-
          case(data["subject"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["subject"]}}
          end,
        {:ok, template_id} <-
          case(data["templateId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateId"]}}
          end,
        {:ok, template_uri} <-
          case(data["templateUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateUri"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           completed_date_time: completed_date_time,
           created_date_time: created_date_time,
           envelope_id: envelope_id,
           envelope_uri: envelope_uri,
           expire_date_time: expire_date_time,
           folder_id: folder_id,
           folder_uri: folder_uri,
           is21_cfr_part11: is21_cfr_part11,
           owner_name: owner_name,
           recipients: recipients,
           recipients_uri: recipients_uri,
           sender_company: sender_company,
           sender_email: sender_email,
           sender_name: sender_name,
           sender_user_id: sender_user_id,
           sent_date_time: sent_date_time,
           status: status,
           subject: subject,
           template_id: template_id,
           template_uri: template_uri
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["folderItem_v2" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "completedDateTime" => data.completed_date_time,
        "createdDateTime" => data.created_date_time,
        "envelopeId" => data.envelope_id,
        "envelopeUri" => data.envelope_uri,
        "expireDateTime" => data.expire_date_time,
        "folderId" => data.folder_id,
        "folderUri" => data.folder_uri,
        "is21CFRPart11" => data.is21_cfr_part11,
        "ownerName" => data.owner_name,
        "recipients" => Docusign.EnvelopeRecipients.encode(data.recipients),
        "recipientsUri" => data.recipients_uri,
        "senderCompany" => data.sender_company,
        "senderEmail" => data.sender_email,
        "senderName" => data.sender_name,
        "senderUserId" => data.sender_user_id,
        "sentDateTime" => data.sent_date_time,
        "status" => data.status,
        "subject" => data.subject,
        "templateId" => data.template_id,
        "templateUri" => data.template_uri
      }
    end
  end

  defmodule(CommentThread) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      font_size: nil,
      height: nil,
      font: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      thread_id: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      comments: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            thread_id: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            comments: [Docusign.Comment.t()] | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, thread_id} <-
          case(data["threadId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["threadId"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, comments} <-
          case(data["comments"]) do
            nil ->
              nil

            _ ->
              data["comments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Comment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           font_size: font_size,
           height: height,
           font: font,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           thread_id: thread_id,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           comments: comments,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["commentThread" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "threadId" => data.thread_id,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "comments" =>
          case(data.comments) do
            nil ->
              nil

            _ ->
              Enum.map(data.comments, fn item -> Docusign.Comment.encode(item) end)
          end,
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(View) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      font_size: nil,
      height: nil,
      font: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      required_read: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      button_text_metadata: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      button_text: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            required_read: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            button_text_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            button_text: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, required_read} <-
          case(data["requiredRead"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requiredRead"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, button_text_metadata} <-
          Docusign.PropertyMetadata.decode(data["buttonTextMetadata"]),
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, button_text} <-
          case(data["buttonText"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["buttonText"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           font_size: font_size,
           height: height,
           font: font,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           required_read: required_read,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           button_text_metadata: button_text_metadata,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           button_text: button_text
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["view" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "requiredRead" => data.required_read,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "buttonTextMetadata" => Docusign.PropertyMetadata.encode(data.button_text_metadata),
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "buttonText" => data.button_text
      }
    end
  end

  defmodule(SmartSection) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      start_position: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      remove_start_anchor: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      end_anchor: nil,
      height: nil,
      display_settings: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      overlay_type_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      end_position: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      case_sensitive: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      overlay_type: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      start_anchor: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      remove_end_anchor: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            start_position: Docusign.SmartSectionAnchorPosition.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            remove_start_anchor: boolean | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            end_anchor: binary | nil,
            height: binary | nil,
            display_settings: Docusign.SmartSectionDisplaySettings.t() | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            overlay_type_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            end_position: Docusign.SmartSectionAnchorPosition.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            case_sensitive: boolean | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            overlay_type: binary | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            start_anchor: binary | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            remove_end_anchor: boolean | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, start_position} <-
          Docusign.SmartSectionAnchorPosition.decode(data["startPosition"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, remove_start_anchor} <-
          case(data["removeStartAnchor"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["removeStartAnchor"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, end_anchor} <-
          case(data["endAnchor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["endAnchor"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, display_settings} <-
          Docusign.SmartSectionDisplaySettings.decode(data["displaySettings"]),
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, overlay_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["overlayTypeMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, end_position} <- Docusign.SmartSectionAnchorPosition.decode(data["endPosition"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, case_sensitive} <-
          case(data["caseSensitive"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["caseSensitive"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, overlay_type} <-
          case(data["overlayType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["overlayType"]}}
          end,
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, start_anchor} <-
          case(data["startAnchor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["startAnchor"]}}
          end,
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, remove_end_anchor} <-
          case(data["removeEndAnchor"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["removeEndAnchor"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           start_position: start_position,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           remove_start_anchor: remove_start_anchor,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           end_anchor: end_anchor,
           height: height,
           display_settings: display_settings,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           overlay_type_metadata: overlay_type_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           end_position: end_position,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           case_sensitive: case_sensitive,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           overlay_type: overlay_type,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           start_anchor: start_anchor,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           remove_end_anchor: remove_end_anchor
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["smartSection" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "startPosition" => Docusign.SmartSectionAnchorPosition.encode(data.start_position),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "removeStartAnchor" => data.remove_start_anchor,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "endAnchor" => data.end_anchor,
        "height" => data.height,
        "displaySettings" => Docusign.SmartSectionDisplaySettings.encode(data.display_settings),
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "overlayTypeMetadata" => Docusign.PropertyMetadata.encode(data.overlay_type_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "endPosition" => Docusign.SmartSectionAnchorPosition.encode(data.end_position),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "caseSensitive" => data.case_sensitive,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "overlayType" => data.overlay_type,
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "startAnchor" => data.start_anchor,
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "removeEndAnchor" => data.remove_end_anchor
      }
    end
  end

  defmodule(RecipientIdentityInputOption) do
    @moduledoc "#{nil}
    "
    defstruct(name: nil, phone_number_list: nil, value_type: nil)

    @type t :: %__MODULE__{
            name: binary | nil,
            phone_number_list: [Docusign.RecipientIdentityPhoneNumber.t()] | nil,
            value_type: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, phone_number_list} <-
          case(data["phoneNumberList"]) do
            nil ->
              nil

            _ ->
              data["phoneNumberList"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientIdentityPhoneNumber.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, value_type} <-
          case(data["valueType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["valueType"]}}
          end
      ) do
        {:ok,
         %__MODULE__{name: name, phone_number_list: phone_number_list, value_type: value_type}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientIdentityInputOption" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "name" => data.name,
        "phoneNumberList" =>
          case(data.phone_number_list) do
            nil ->
              nil

            _ ->
              Enum.map(data.phone_number_list, fn item ->
                Docusign.RecipientIdentityPhoneNumber.encode(item)
              end)
          end,
        "valueType" => data.value_type
      }
    end
  end

  defmodule(ListCustomField) do
    @moduledoc "#{nil}
    "
    defstruct(
      configuration_type: nil,
      error_details: nil,
      field_id: nil,
      list_items: nil,
      name: nil,
      required: nil,
      show: nil,
      value: nil
    )

    @type t :: %__MODULE__{
            configuration_type: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            field_id: binary | nil,
            list_items: [binary] | nil,
            name: binary | nil,
            required: binary | nil,
            show: binary | nil,
            value: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, configuration_type} <-
          case(data["configurationType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["configurationType"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, field_id} <-
          case(data["fieldId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fieldId"]}}
          end,
        {:ok, list_items} <-
          case(data["listItems"]) do
            nil ->
              nil

            _ ->
              data["listItems"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, show} <-
          case(data["show"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["show"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           configuration_type: configuration_type,
           error_details: error_details,
           field_id: field_id,
           list_items: list_items,
           name: name,
           required: required,
           show: show,
           value: value
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["listCustomField" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "configurationType" => data.configuration_type,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "fieldId" => data.field_id,
        "listItems" =>
          case(data.list_items) do
            nil ->
              nil

            _ ->
              Enum.map(data.list_items, fn item -> item end)
          end,
        "name" => data.name,
        "required" => data.required,
        "show" => data.show,
        "value" => data.value
      }
    end
  end

  defmodule(AccountCustomFields) do
    @moduledoc "#{nil}
    "
    defstruct(list_custom_fields: nil, text_custom_fields: nil)

    @type t :: %__MODULE__{
            list_custom_fields: [Docusign.ListCustomField.t()] | nil,
            text_custom_fields: [Docusign.TextCustomField.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, list_custom_fields} <-
          case(data["listCustomFields"]) do
            nil ->
              nil

            _ ->
              data["listCustomFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.ListCustomField.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, text_custom_fields} <-
          case(data["textCustomFields"]) do
            nil ->
              nil

            _ ->
              data["textCustomFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.TextCustomField.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           list_custom_fields: list_custom_fields,
           text_custom_fields: text_custom_fields
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["AccountCustomFields" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "listCustomFields" =>
          case(data.list_custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.list_custom_fields, fn item ->
                Docusign.ListCustomField.encode(item)
              end)
          end,
        "textCustomFields" =>
          case(data.text_custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.text_custom_fields, fn item ->
                Docusign.TextCustomField.encode(item)
              end)
          end
      }
    end
  end

  defmodule(UserInfo) do
    @moduledoc "#{nil}
    "
    defstruct(
      account_id: nil,
      account_name: nil,
      activation_access_code: nil,
      email: nil,
      error_details: nil,
      login_status: nil,
      membership_id: nil,
      send_activation_email: nil,
      uri: nil,
      user_id: nil,
      user_name: nil,
      user_status: nil,
      user_type: nil
    )

    @type t :: %__MODULE__{
            account_id: binary | nil,
            account_name: binary | nil,
            activation_access_code: binary | nil,
            email: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            login_status: binary | nil,
            membership_id: binary | nil,
            send_activation_email: binary | nil,
            uri: binary | nil,
            user_id: binary | nil,
            user_name: binary | nil,
            user_status: binary | nil,
            user_type: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, account_id} <-
          case(data["accountId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accountId"]}}
          end,
        {:ok, account_name} <-
          case(data["accountName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accountName"]}}
          end,
        {:ok, activation_access_code} <-
          case(data["activationAccessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["activationAccessCode"]}}
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, login_status} <-
          case(data["loginStatus"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["loginStatus"]}}
          end,
        {:ok, membership_id} <-
          case(data["membershipId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["membershipId"]}}
          end,
        {:ok, send_activation_email} <-
          case(data["sendActivationEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sendActivationEmail"]}}
          end,
        {:ok, uri} <-
          case(data["uri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["uri"]}}
          end,
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, user_name} <-
          case(data["userName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userName"]}}
          end,
        {:ok, user_status} <-
          case(data["userStatus"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userStatus"]}}
          end,
        {:ok, user_type} <-
          case(data["userType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userType"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           account_id: account_id,
           account_name: account_name,
           activation_access_code: activation_access_code,
           email: email,
           error_details: error_details,
           login_status: login_status,
           membership_id: membership_id,
           send_activation_email: send_activation_email,
           uri: uri,
           user_id: user_id,
           user_name: user_name,
           user_status: user_status,
           user_type: user_type
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["userInfo" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "accountId" => data.account_id,
        "accountName" => data.account_name,
        "activationAccessCode" => data.activation_access_code,
        "email" => data.email,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "loginStatus" => data.login_status,
        "membershipId" => data.membership_id,
        "sendActivationEmail" => data.send_activation_email,
        "uri" => data.uri,
        "userId" => data.user_id,
        "userName" => data.user_name,
        "userStatus" => data.user_status,
        "userType" => data.user_type
      }
    end
  end

  defmodule(RecipientViewRequest) do
    @moduledoc "#{nil}
    "
    defstruct(
      assertion_id: nil,
      authentication_instant: nil,
      authentication_method: nil,
      client_ur_ls: nil,
      client_user_id: nil,
      email: nil,
      frame_ancestors: nil,
      message_origins: nil,
      ping_frequency: nil,
      ping_url: nil,
      recipient_id: nil,
      return_url: nil,
      security_domain: nil,
      user_id: nil,
      user_name: nil,
      x_frame_options: nil,
      x_frame_options_allow_from_url: nil
    )

    @type t :: %__MODULE__{
            assertion_id: binary | nil,
            authentication_instant: binary | nil,
            authentication_method: binary | nil,
            client_ur_ls: Docusign.RecipientTokenClientURLs.t() | nil,
            client_user_id: binary | nil,
            email: binary | nil,
            frame_ancestors: [binary] | nil,
            message_origins: [binary] | nil,
            ping_frequency: binary | nil,
            ping_url: binary | nil,
            recipient_id: binary | nil,
            return_url: binary | nil,
            security_domain: binary | nil,
            user_id: binary | nil,
            user_name: binary | nil,
            x_frame_options: binary | nil,
            x_frame_options_allow_from_url: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, assertion_id} <-
          case(data["assertionId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["assertionId"]}}
          end,
        {:ok, authentication_instant} <-
          case(data["authenticationInstant"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authenticationInstant"]}}
          end,
        {:ok, authentication_method} <-
          case(data["authenticationMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authenticationMethod"]}}
          end,
        {:ok, client_ur_ls} <- Docusign.RecipientTokenClientURLs.decode(data["clientURLs"]),
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, frame_ancestors} <-
          case(data["frameAncestors"]) do
            nil ->
              nil

            _ ->
              data["frameAncestors"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, message_origins} <-
          case(data["messageOrigins"]) do
            nil ->
              nil

            _ ->
              data["messageOrigins"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, ping_frequency} <-
          case(data["pingFrequency"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pingFrequency"]}}
          end,
        {:ok, ping_url} <-
          case(data["pingUrl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pingUrl"]}}
          end,
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, return_url} <-
          case(data["returnUrl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["returnUrl"]}}
          end,
        {:ok, security_domain} <-
          case(data["securityDomain"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["securityDomain"]}}
          end,
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, user_name} <-
          case(data["userName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userName"]}}
          end,
        {:ok, x_frame_options} <-
          case(data["xFrameOptions"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xFrameOptions"]}}
          end,
        {:ok, x_frame_options_allow_from_url} <-
          case(data["xFrameOptionsAllowFromUrl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xFrameOptionsAllowFromUrl"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           assertion_id: assertion_id,
           authentication_instant: authentication_instant,
           authentication_method: authentication_method,
           client_ur_ls: client_ur_ls,
           client_user_id: client_user_id,
           email: email,
           frame_ancestors: frame_ancestors,
           message_origins: message_origins,
           ping_frequency: ping_frequency,
           ping_url: ping_url,
           recipient_id: recipient_id,
           return_url: return_url,
           security_domain: security_domain,
           user_id: user_id,
           user_name: user_name,
           x_frame_options: x_frame_options,
           x_frame_options_allow_from_url: x_frame_options_allow_from_url
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientViewRequest" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "assertionId" => data.assertion_id,
        "authenticationInstant" => data.authentication_instant,
        "authenticationMethod" => data.authentication_method,
        "clientURLs" => Docusign.RecipientTokenClientURLs.encode(data.client_ur_ls),
        "clientUserId" => data.client_user_id,
        "email" => data.email,
        "frameAncestors" =>
          case(data.frame_ancestors) do
            nil ->
              nil

            _ ->
              Enum.map(data.frame_ancestors, fn item -> item end)
          end,
        "messageOrigins" =>
          case(data.message_origins) do
            nil ->
              nil

            _ ->
              Enum.map(data.message_origins, fn item -> item end)
          end,
        "pingFrequency" => data.ping_frequency,
        "pingUrl" => data.ping_url,
        "recipientId" => data.recipient_id,
        "returnUrl" => data.return_url,
        "securityDomain" => data.security_domain,
        "userId" => data.user_id,
        "userName" => data.user_name,
        "xFrameOptions" => data.x_frame_options,
        "xFrameOptionsAllowFromUrl" => data.x_frame_options_allow_from_url
      }
    end
  end

  defmodule(Attachment) do
    @moduledoc "#{nil}
    "
    defstruct(
      access_control: nil,
      attachment_id: nil,
      attachment_type: nil,
      data: nil,
      label: nil,
      name: nil,
      remote_url: nil
    )

    @type t :: %__MODULE__{
            access_control: binary | nil,
            attachment_id: binary | nil,
            attachment_type: binary | nil,
            data: binary | nil,
            label: binary | nil,
            name: binary | nil,
            remote_url: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, access_control} <-
          case(data["accessControl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessControl"]}}
          end,
        {:ok, attachment_id} <-
          case(data["attachmentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["attachmentId"]}}
          end,
        {:ok, attachment_type} <-
          case(data["attachmentType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["attachmentType"]}}
          end,
        {:ok, data} <-
          case(data["data"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["data"]}}
          end,
        {:ok, label} <-
          case(data["label"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["label"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, remote_url} <-
          case(data["remoteUrl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["remoteUrl"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           access_control: access_control,
           attachment_id: attachment_id,
           attachment_type: attachment_type,
           data: data,
           label: label,
           name: name,
           remote_url: remote_url
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["attachment" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "accessControl" => data.access_control,
        "attachmentId" => data.attachment_id,
        "attachmentType" => data.attachment_type,
        "data" => data.data,
        "label" => data.label,
        "name" => data.name,
        "remoteUrl" => data.remote_url
      }
    end
  end

  defmodule(Email) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      validation_pattern: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      validation_pattern_metadata: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_pattern: binary | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            validation_pattern_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, validation_pattern} <-
          case(data["validationPattern"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationPattern"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, validation_pattern_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationPatternMetadata"]),
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           validation_pattern: validation_pattern,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           validation_pattern_metadata: validation_pattern_metadata,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["email" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "validationPattern" => data.validation_pattern,
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "validationPatternMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_pattern_metadata),
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(Company) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["company" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(SmartContractInformation) do
    @moduledoc "#{nil}
    "
    defstruct(code: nil, uri: nil)
    @type t :: %__MODULE__{code: binary | nil, uri: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, code} <-
          case(data["code"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["code"]}}
          end,
        {:ok, uri} <-
          case(data["uri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["uri"]}}
          end
      ) do
        {:ok, %__MODULE__{code: code, uri: uri}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["smartContractInformation" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"code" => data.code, "uri" => data.uri}
    end
  end

  defmodule(RadioGroup) do
    @moduledoc "#{nil}
    "
    defstruct(
      conditional_parent_label: nil,
      conditional_parent_label_metadata: nil,
      conditional_parent_value: nil,
      conditional_parent_value_metadata: nil,
      document_id: nil,
      document_id_metadata: nil,
      group_name: nil,
      group_name_metadata: nil,
      radios: nil,
      recipient_id: nil,
      recipient_id_guid: nil,
      recipient_id_guid_metadata: nil,
      recipient_id_metadata: nil,
      require_all: nil,
      require_all_metadata: nil,
      require_initial_on_shared_change: nil,
      require_initial_on_shared_change_metadata: nil,
      shared: nil,
      shared_metadata: nil,
      tab_type: nil,
      tab_type_metadata: nil,
      template_locked: nil,
      template_locked_metadata: nil,
      template_required: nil,
      template_required_metadata: nil,
      tooltip: nil,
      tooltip_metadata: nil
    )

    @type t :: %__MODULE__{
            conditional_parent_label: binary | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            group_name: binary | nil,
            group_name_metadata: Docusign.PropertyMetadata.t() | nil,
            radios: [Docusign.Radio.t()] | nil,
            recipient_id: binary | nil,
            recipient_id_guid: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all: binary | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change: binary | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required: binary | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            tooltip: binary | nil,
            tooltip_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, group_name} <-
          case(data["groupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["groupName"]}}
          end,
        {:ok, group_name_metadata} <- Docusign.PropertyMetadata.decode(data["groupNameMetadata"]),
        {:ok, radios} <-
          case(data["radios"]) do
            nil ->
              nil

            _ ->
              data["radios"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Radio.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, tooltip_metadata} <- Docusign.PropertyMetadata.decode(data["tooltipMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           conditional_parent_label: conditional_parent_label,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           conditional_parent_value: conditional_parent_value,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           document_id: document_id,
           document_id_metadata: document_id_metadata,
           group_name: group_name,
           group_name_metadata: group_name_metadata,
           radios: radios,
           recipient_id: recipient_id,
           recipient_id_guid: recipient_id_guid,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           recipient_id_metadata: recipient_id_metadata,
           require_all: require_all,
           require_all_metadata: require_all_metadata,
           require_initial_on_shared_change: require_initial_on_shared_change,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           shared: shared,
           shared_metadata: shared_metadata,
           tab_type: tab_type,
           tab_type_metadata: tab_type_metadata,
           template_locked: template_locked,
           template_locked_metadata: template_locked_metadata,
           template_required: template_required,
           template_required_metadata: template_required_metadata,
           tooltip: tooltip,
           tooltip_metadata: tooltip_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["radioGroup" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "conditionalParentLabel" => data.conditional_parent_label,
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "conditionalParentValue" => data.conditional_parent_value,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "documentId" => data.document_id,
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "groupName" => data.group_name,
        "groupNameMetadata" => Docusign.PropertyMetadata.encode(data.group_name_metadata),
        "radios" =>
          case(data.radios) do
            nil ->
              nil

            _ ->
              Enum.map(data.radios, fn item -> Docusign.Radio.encode(item) end)
          end,
        "recipientId" => data.recipient_id,
        "recipientIdGuid" => data.recipient_id_guid,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "requireAll" => data.require_all,
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "shared" => data.shared,
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "tabType" => data.tab_type,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "templateLocked" => data.template_locked,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "templateRequired" => data.template_required,
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "tooltip" => data.tooltip,
        "tooltipMetadata" => Docusign.PropertyMetadata.encode(data.tooltip_metadata)
      }
    end
  end

  defmodule(Money) do
    @moduledoc "#{nil}
    "
    defstruct(amount_in_base_unit: nil, currency: nil, display_amount: nil)

    @type t :: %__MODULE__{
            amount_in_base_unit: binary | nil,
            currency: binary | nil,
            display_amount: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, amount_in_base_unit} <-
          case(data["amountInBaseUnit"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["amountInBaseUnit"]}}
          end,
        {:ok, currency} <-
          case(data["currency"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["currency"]}}
          end,
        {:ok, display_amount} <-
          case(data["displayAmount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayAmount"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           amount_in_base_unit: amount_in_base_unit,
           currency: currency,
           display_amount: display_amount
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["money" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "amountInBaseUnit" => data.amount_in_base_unit,
        "currency" => data.currency,
        "displayAmount" => data.display_amount
      }
    end
  end

  defmodule(SmartSectionCollapsibleDisplaySettings) do
    @moduledoc "#{nil}
    "
    defstruct(
      arrow_closed: nil,
      arrow_color: nil,
      arrow_location: nil,
      arrow_open: nil,
      arrow_size: nil,
      arrow_style: nil,
      container_style: nil,
      label_style: nil,
      only_arrow_is_clickable: nil,
      outer_label_and_arrow_style: nil
    )

    @type t :: %__MODULE__{
            arrow_closed: binary | nil,
            arrow_color: binary | nil,
            arrow_location: binary | nil,
            arrow_open: binary | nil,
            arrow_size: binary | nil,
            arrow_style: binary | nil,
            container_style: binary | nil,
            label_style: binary | nil,
            only_arrow_is_clickable: boolean | nil,
            outer_label_and_arrow_style: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, arrow_closed} <-
          case(data["arrowClosed"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowClosed"]}}
          end,
        {:ok, arrow_color} <-
          case(data["arrowColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowColor"]}}
          end,
        {:ok, arrow_location} <-
          case(data["arrowLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowLocation"]}}
          end,
        {:ok, arrow_open} <-
          case(data["arrowOpen"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowOpen"]}}
          end,
        {:ok, arrow_size} <-
          case(data["arrowSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowSize"]}}
          end,
        {:ok, arrow_style} <-
          case(data["arrowStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowStyle"]}}
          end,
        {:ok, container_style} <-
          case(data["containerStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["containerStyle"]}}
          end,
        {:ok, label_style} <-
          case(data["labelStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["labelStyle"]}}
          end,
        {:ok, only_arrow_is_clickable} <-
          case(data["onlyArrowIsClickable"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["onlyArrowIsClickable"]}}
          end,
        {:ok, outer_label_and_arrow_style} <-
          case(data["outerLabelAndArrowStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["outerLabelAndArrowStyle"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           arrow_closed: arrow_closed,
           arrow_color: arrow_color,
           arrow_location: arrow_location,
           arrow_open: arrow_open,
           arrow_size: arrow_size,
           arrow_style: arrow_style,
           container_style: container_style,
           label_style: label_style,
           only_arrow_is_clickable: only_arrow_is_clickable,
           outer_label_and_arrow_style: outer_label_and_arrow_style
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["smartSectionCollapsibleDisplaySettings" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "arrowClosed" => data.arrow_closed,
        "arrowColor" => data.arrow_color,
        "arrowLocation" => data.arrow_location,
        "arrowOpen" => data.arrow_open,
        "arrowSize" => data.arrow_size,
        "arrowStyle" => data.arrow_style,
        "containerStyle" => data.container_style,
        "labelStyle" => data.label_style,
        "onlyArrowIsClickable" => data.only_arrow_is_clickable,
        "outerLabelAndArrowStyle" => data.outer_label_and_arrow_style
      }
    end
  end

  defmodule(CommissionCounty) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["commissionCounty" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(PowerForm) do
    @moduledoc "#{nil}
    "
    defstruct(
      created_by: nil,
      created_date_time: nil,
      email_body: nil,
      email_subject: nil,
      envelopes: nil,
      error_details: nil,
      instructions: nil,
      is_active: nil,
      last_used: nil,
      limit_use_interval: nil,
      limit_use_interval_enabled: nil,
      limit_use_interval_units: nil,
      max_use_enabled: nil,
      name: nil,
      power_form_id: nil,
      power_form_url: nil,
      recipients: nil,
      sender_name: nil,
      sender_user_id: nil,
      signing_mode: nil,
      template_id: nil,
      template_name: nil,
      times_used: nil,
      uri: nil,
      uses_remaining: nil
    )

    @type t :: %__MODULE__{
            created_by: binary | nil,
            created_date_time: binary | nil,
            email_body: binary | nil,
            email_subject: binary | nil,
            envelopes: [Docusign.Envelope.t()] | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            instructions: binary | nil,
            is_active: binary | nil,
            last_used: binary | nil,
            limit_use_interval: binary | nil,
            limit_use_interval_enabled: binary | nil,
            limit_use_interval_units: binary | nil,
            max_use_enabled: binary | nil,
            name: binary | nil,
            power_form_id: binary | nil,
            power_form_url: binary | nil,
            recipients: [Docusign.PowerFormRecipient.t()] | nil,
            sender_name: binary | nil,
            sender_user_id: binary | nil,
            signing_mode: binary | nil,
            template_id: binary | nil,
            template_name: binary | nil,
            times_used: binary | nil,
            uri: binary | nil,
            uses_remaining: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, created_by} <-
          case(data["createdBy"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["createdBy"]}}
          end,
        {:ok, created_date_time} <-
          case(data["createdDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["createdDateTime"]}}
          end,
        {:ok, email_body} <-
          case(data["emailBody"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailBody"]}}
          end,
        {:ok, email_subject} <-
          case(data["emailSubject"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailSubject"]}}
          end,
        {:ok, envelopes} <-
          case(data["envelopes"]) do
            nil ->
              nil

            _ ->
              data["envelopes"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Envelope.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, instructions} <-
          case(data["instructions"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["instructions"]}}
          end,
        {:ok, is_active} <-
          case(data["isActive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isActive"]}}
          end,
        {:ok, last_used} <-
          case(data["lastUsed"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastUsed"]}}
          end,
        {:ok, limit_use_interval} <-
          case(data["limitUseInterval"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["limitUseInterval"]}}
          end,
        {:ok, limit_use_interval_enabled} <-
          case(data["limitUseIntervalEnabled"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["limitUseIntervalEnabled"]}}
          end,
        {:ok, limit_use_interval_units} <-
          case(data["limitUseIntervalUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["limitUseIntervalUnits"]}}
          end,
        {:ok, max_use_enabled} <-
          case(data["maxUseEnabled"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxUseEnabled"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, power_form_id} <-
          case(data["powerFormId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["powerFormId"]}}
          end,
        {:ok, power_form_url} <-
          case(data["powerFormUrl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["powerFormUrl"]}}
          end,
        {:ok, recipients} <-
          case(data["recipients"]) do
            nil ->
              nil

            _ ->
              data["recipients"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.PowerFormRecipient.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, sender_name} <-
          case(data["senderName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderName"]}}
          end,
        {:ok, sender_user_id} <-
          case(data["senderUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderUserId"]}}
          end,
        {:ok, signing_mode} <-
          case(data["signingMode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingMode"]}}
          end,
        {:ok, template_id} <-
          case(data["templateId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateId"]}}
          end,
        {:ok, template_name} <-
          case(data["templateName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateName"]}}
          end,
        {:ok, times_used} <-
          case(data["timesUsed"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["timesUsed"]}}
          end,
        {:ok, uri} <-
          case(data["uri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["uri"]}}
          end,
        {:ok, uses_remaining} <-
          case(data["usesRemaining"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["usesRemaining"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           created_by: created_by,
           created_date_time: created_date_time,
           email_body: email_body,
           email_subject: email_subject,
           envelopes: envelopes,
           error_details: error_details,
           instructions: instructions,
           is_active: is_active,
           last_used: last_used,
           limit_use_interval: limit_use_interval,
           limit_use_interval_enabled: limit_use_interval_enabled,
           limit_use_interval_units: limit_use_interval_units,
           max_use_enabled: max_use_enabled,
           name: name,
           power_form_id: power_form_id,
           power_form_url: power_form_url,
           recipients: recipients,
           sender_name: sender_name,
           sender_user_id: sender_user_id,
           signing_mode: signing_mode,
           template_id: template_id,
           template_name: template_name,
           times_used: times_used,
           uri: uri,
           uses_remaining: uses_remaining
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["powerForm" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "createdBy" => data.created_by,
        "createdDateTime" => data.created_date_time,
        "emailBody" => data.email_body,
        "emailSubject" => data.email_subject,
        "envelopes" =>
          case(data.envelopes) do
            nil ->
              nil

            _ ->
              Enum.map(data.envelopes, fn item -> Docusign.Envelope.encode(item) end)
          end,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "instructions" => data.instructions,
        "isActive" => data.is_active,
        "lastUsed" => data.last_used,
        "limitUseInterval" => data.limit_use_interval,
        "limitUseIntervalEnabled" => data.limit_use_interval_enabled,
        "limitUseIntervalUnits" => data.limit_use_interval_units,
        "maxUseEnabled" => data.max_use_enabled,
        "name" => data.name,
        "powerFormId" => data.power_form_id,
        "powerFormUrl" => data.power_form_url,
        "recipients" =>
          case(data.recipients) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipients, fn item -> Docusign.PowerFormRecipient.encode(item) end)
          end,
        "senderName" => data.sender_name,
        "senderUserId" => data.sender_user_id,
        "signingMode" => data.signing_mode,
        "templateId" => data.template_id,
        "templateName" => data.template_name,
        "timesUsed" => data.times_used,
        "uri" => data.uri,
        "usesRemaining" => data.uses_remaining
      }
    end
  end

  defmodule(CommissionState) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["commissionState" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(EmailAddress) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["emailAddress" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(NotarySeal) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      scale_value_metadata: nil,
      tab_id_metadata: nil,
      scale_value: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, scale_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["scaleValueMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, scale_value} <-
          case(data["scaleValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["scaleValue"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           scale_value_metadata: scale_value_metadata,
           tab_id_metadata: tab_id_metadata,
           scale_value: scale_value,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["notarySeal" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "scaleValueMetadata" => Docusign.PropertyMetadata.encode(data.scale_value_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "scaleValue" => data.scale_value,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(RecipientRules) do
    @moduledoc "#{nil}
    "
    defstruct(conditional_recipients: nil)
    @type t :: %__MODULE__{conditional_recipients: [Docusign.ConditionalRecipientRule.t()] | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, conditional_recipients} <-
          case(data["conditionalRecipients"]) do
            nil ->
              nil

            _ ->
              data["conditionalRecipients"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.ConditionalRecipientRule.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok, %__MODULE__{conditional_recipients: conditional_recipients}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientRules" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "conditionalRecipients" =>
          case(data.conditional_recipients) do
            nil ->
              nil

            _ ->
              Enum.map(data.conditional_recipients, fn item ->
                Docusign.ConditionalRecipientRule.encode(item)
              end)
          end
      }
    end
  end

  defmodule(Intermediary) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      allow_system_override_for_locked_recipient: nil,
      delivery_method_metadata: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      excluded_documents: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            excluded_documents: [binary] | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           delivery_method_metadata: delivery_method_metadata,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           excluded_documents: excluded_documents,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["intermediary" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end
      }
    end
  end

  defmodule(DocumentHtmlDefinition) do
    @moduledoc "#{nil}
    "
    defstruct(
      display_anchor_prefix: nil,
      display_anchors: nil,
      display_order: nil,
      display_page_number: nil,
      document_guid: nil,
      document_id: nil,
      header_label: nil,
      max_screen_width: nil,
      remove_empty_tags: nil,
      show_mobile_optimized_toggle: nil,
      source: nil
    )

    @type t :: %__MODULE__{
            display_anchor_prefix: binary | nil,
            display_anchors: [Docusign.DocumentHtmlDisplayAnchor.t()] | nil,
            display_order: binary | nil,
            display_page_number: binary | nil,
            document_guid: binary | nil,
            document_id: binary | nil,
            header_label: binary | nil,
            max_screen_width: binary | nil,
            remove_empty_tags: binary | nil,
            show_mobile_optimized_toggle: binary | nil,
            source: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, display_anchor_prefix} <-
          case(data["displayAnchorPrefix"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayAnchorPrefix"]}}
          end,
        {:ok, display_anchors} <-
          case(data["displayAnchors"]) do
            nil ->
              nil

            _ ->
              data["displayAnchors"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentHtmlDisplayAnchor.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, display_order} <-
          case(data["displayOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayOrder"]}}
          end,
        {:ok, display_page_number} <-
          case(data["displayPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayPageNumber"]}}
          end,
        {:ok, document_guid} <-
          case(data["documentGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentGuid"]}}
          end,
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, header_label} <-
          case(data["headerLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["headerLabel"]}}
          end,
        {:ok, max_screen_width} <-
          case(data["maxScreenWidth"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxScreenWidth"]}}
          end,
        {:ok, remove_empty_tags} <-
          case(data["removeEmptyTags"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["removeEmptyTags"]}}
          end,
        {:ok, show_mobile_optimized_toggle} <-
          case(data["showMobileOptimizedToggle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["showMobileOptimizedToggle"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           display_anchor_prefix: display_anchor_prefix,
           display_anchors: display_anchors,
           display_order: display_order,
           display_page_number: display_page_number,
           document_guid: document_guid,
           document_id: document_id,
           header_label: header_label,
           max_screen_width: max_screen_width,
           remove_empty_tags: remove_empty_tags,
           show_mobile_optimized_toggle: show_mobile_optimized_toggle,
           source: source
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["documentHtmlDefinition" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "displayAnchorPrefix" => data.display_anchor_prefix,
        "displayAnchors" =>
          case(data.display_anchors) do
            nil ->
              nil

            _ ->
              Enum.map(data.display_anchors, fn item ->
                Docusign.DocumentHtmlDisplayAnchor.encode(item)
              end)
          end,
        "displayOrder" => data.display_order,
        "displayPageNumber" => data.display_page_number,
        "documentGuid" => data.document_guid,
        "documentId" => data.document_id,
        "headerLabel" => data.header_label,
        "maxScreenWidth" => data.max_screen_width,
        "removeEmptyTags" => data.remove_empty_tags,
        "showMobileOptimizedToggle" => data.show_mobile_optimized_toggle,
        "source" => data.source
      }
    end
  end

  defmodule(RecipientProofFile) do
    @moduledoc "#{nil}
    "
    defstruct(has_identity_attempts: nil, is_in_proof_file: nil)
    @type t :: %__MODULE__{has_identity_attempts: binary | nil, is_in_proof_file: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, has_identity_attempts} <-
          case(data["hasIdentityAttempts"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasIdentityAttempts"]}}
          end,
        {:ok, is_in_proof_file} <-
          case(data["isInProofFile"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isInProofFile"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           has_identity_attempts: has_identity_attempts,
           is_in_proof_file: is_in_proof_file
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientProofFile" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "hasIdentityAttempts" => data.has_identity_attempts,
        "isInProofFile" => data.is_in_proof_file
      }
    end
  end

  defmodule(EnvelopeSummary) do
    @moduledoc "#{nil}
    "
    defstruct(
      bulk_envelope_status: nil,
      envelope_id: nil,
      error_details: nil,
      recipient_signing_uri: nil,
      recipient_signing_uri_error: nil,
      status: nil,
      status_date_time: nil,
      uri: nil
    )

    @type t :: %__MODULE__{
            bulk_envelope_status: Docusign.BulkEnvelopeStatus.t() | nil,
            envelope_id: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_signing_uri: binary | nil,
            recipient_signing_uri_error: binary | nil,
            status: binary | nil,
            status_date_time: binary | nil,
            uri: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, bulk_envelope_status} <-
          Docusign.BulkEnvelopeStatus.decode(data["bulkEnvelopeStatus"]),
        {:ok, envelope_id} <-
          case(data["envelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeId"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_signing_uri} <-
          case(data["recipientSigningUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientSigningUri"]}}
          end,
        {:ok, recipient_signing_uri_error} <-
          case(data["recipientSigningUriError"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientSigningUriError"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, status_date_time} <-
          case(data["statusDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusDateTime"]}}
          end,
        {:ok, uri} <-
          case(data["uri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["uri"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           bulk_envelope_status: bulk_envelope_status,
           envelope_id: envelope_id,
           error_details: error_details,
           recipient_signing_uri: recipient_signing_uri,
           recipient_signing_uri_error: recipient_signing_uri_error,
           status: status,
           status_date_time: status_date_time,
           uri: uri
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["envelopeSummary" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "bulkEnvelopeStatus" => Docusign.BulkEnvelopeStatus.encode(data.bulk_envelope_status),
        "envelopeId" => data.envelope_id,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientSigningUri" => data.recipient_signing_uri,
        "recipientSigningUriError" => data.recipient_signing_uri_error,
        "status" => data.status,
        "statusDateTime" => data.status_date_time,
        "uri" => data.uri
      }
    end
  end

  defmodule(RecipientOption) do
    @moduledoc "#{nil}
    "
    defstruct(email: nil, name: nil, recipient_label: nil, role_name: nil, signing_group_id: nil)

    @type t :: %__MODULE__{
            email: binary | nil,
            name: binary | nil,
            recipient_label: binary | nil,
            role_name: binary | nil,
            signing_group_id: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, recipient_label} <-
          case(data["recipientLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientLabel"]}}
          end,
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           email: email,
           name: name,
           recipient_label: recipient_label,
           role_name: role_name,
           signing_group_id: signing_group_id
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientOption" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "email" => data.email,
        "name" => data.name,
        "recipientLabel" => data.recipient_label,
        "roleName" => data.role_name,
        "signingGroupId" => data.signing_group_id
      }
    end
  end

  defmodule(EnvelopeId) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      font_size: nil,
      height: nil,
      font: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           font_size: font_size,
           height: height,
           font: font,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["envelopeId" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(NotaryRecipient) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      creation_reason: nil,
      allow_system_override_for_locked_recipient: nil,
      agent_can_edit_email: nil,
      is_bulk_recipient_metadata: nil,
      bulk_recipients_uri: nil,
      proof_file: nil,
      sign_in_each_location_metadata: nil,
      delivery_method_metadata: nil,
      require_upload_signature: nil,
      sign_in_each_location: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      require_signer_certificate: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      auto_navigation: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      offline_attributes: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      require_sign_on_paper: nil,
      notary_signers: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      signature_info: nil,
      notary_type: nil,
      recipient_signature_providers: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      is_bulk_recipient: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      tabs: nil,
      can_sign_offline: nil,
      live_oak_start_url: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      excluded_documents: nil,
      agent_can_edit_name: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      default_recipient: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      notary_id: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil,
      recipient_supplies_tabs: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            creation_reason: binary | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            agent_can_edit_email: binary | nil,
            is_bulk_recipient_metadata: Docusign.PropertyMetadata.t() | nil,
            bulk_recipients_uri: binary | nil,
            proof_file: Docusign.RecipientProofFile.t() | nil,
            sign_in_each_location_metadata: Docusign.PropertyMetadata.t() | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            require_upload_signature: binary | nil,
            sign_in_each_location: binary | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            require_signer_certificate: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            auto_navigation: binary | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            offline_attributes: Docusign.OfflineAttributes.t() | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            require_sign_on_paper: binary | nil,
            notary_signers: [binary] | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            signature_info: Docusign.RecipientSignatureInformation.t() | nil,
            notary_type: binary | nil,
            recipient_signature_providers: [Docusign.RecipientSignatureProvider.t()] | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            is_bulk_recipient: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            can_sign_offline: binary | nil,
            live_oak_start_url: binary | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            excluded_documents: [binary] | nil,
            agent_can_edit_name: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            default_recipient: binary | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            notary_id: binary | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil,
            recipient_supplies_tabs: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, creation_reason} <-
          case(data["creationReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["creationReason"]}}
          end,
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, agent_can_edit_email} <-
          case(data["agentCanEditEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditEmail"]}}
          end,
        {:ok, is_bulk_recipient_metadata} <-
          Docusign.PropertyMetadata.decode(data["isBulkRecipientMetadata"]),
        {:ok, bulk_recipients_uri} <-
          case(data["bulkRecipientsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bulkRecipientsUri"]}}
          end,
        {:ok, proof_file} <- Docusign.RecipientProofFile.decode(data["proofFile"]),
        {:ok, sign_in_each_location_metadata} <-
          Docusign.PropertyMetadata.decode(data["signInEachLocationMetadata"]),
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, require_upload_signature} <-
          case(data["requireUploadSignature"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireUploadSignature"]}}
          end,
        {:ok, sign_in_each_location} <-
          case(data["signInEachLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signInEachLocation"]}}
          end,
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, require_signer_certificate} <-
          case(data["requireSignerCertificate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignerCertificate"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, auto_navigation} <-
          case(data["autoNavigation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoNavigation"]}}
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, offline_attributes} <- Docusign.OfflineAttributes.decode(data["offlineAttributes"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, require_sign_on_paper} <-
          case(data["requireSignOnPaper"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireSignOnPaper"]}}
          end,
        {:ok, notary_signers} <-
          case(data["notarySigners"]) do
            nil ->
              nil

            _ ->
              data["notarySigners"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, signature_info} <-
          Docusign.RecipientSignatureInformation.decode(data["signatureInfo"]),
        {:ok, notary_type} <-
          case(data["notaryType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["notaryType"]}}
          end,
        {:ok, recipient_signature_providers} <-
          case(data["recipientSignatureProviders"]) do
            nil ->
              nil

            _ ->
              data["recipientSignatureProviders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientSignatureProvider.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, is_bulk_recipient} <-
          case(data["isBulkRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isBulkRecipient"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, can_sign_offline} <-
          case(data["canSignOffline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["canSignOffline"]}}
          end,
        {:ok, live_oak_start_url} <-
          case(data["liveOakStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["liveOakStartURL"]}}
          end,
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, agent_can_edit_name} <-
          case(data["agentCanEditName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditName"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, default_recipient} <-
          case(data["defaultRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["defaultRecipient"]}}
          end,
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, notary_id} <-
          case(data["notaryId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["notaryId"]}}
          end,
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, recipient_supplies_tabs} <-
          case(data["recipientSuppliesTabs"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientSuppliesTabs"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           creation_reason: creation_reason,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           agent_can_edit_email: agent_can_edit_email,
           is_bulk_recipient_metadata: is_bulk_recipient_metadata,
           bulk_recipients_uri: bulk_recipients_uri,
           proof_file: proof_file,
           sign_in_each_location_metadata: sign_in_each_location_metadata,
           delivery_method_metadata: delivery_method_metadata,
           require_upload_signature: require_upload_signature,
           sign_in_each_location: sign_in_each_location,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           require_signer_certificate: require_signer_certificate,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           auto_navigation: auto_navigation,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           offline_attributes: offline_attributes,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           require_sign_on_paper: require_sign_on_paper,
           notary_signers: notary_signers,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           signature_info: signature_info,
           notary_type: notary_type,
           recipient_signature_providers: recipient_signature_providers,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           is_bulk_recipient: is_bulk_recipient,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           tabs: tabs,
           can_sign_offline: can_sign_offline,
           live_oak_start_url: live_oak_start_url,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           excluded_documents: excluded_documents,
           agent_can_edit_name: agent_can_edit_name,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           default_recipient: default_recipient,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           notary_id: notary_id,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments,
           recipient_supplies_tabs: recipient_supplies_tabs
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["notaryRecipient" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "creationReason" => data.creation_reason,
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "agentCanEditEmail" => data.agent_can_edit_email,
        "isBulkRecipientMetadata" =>
          Docusign.PropertyMetadata.encode(data.is_bulk_recipient_metadata),
        "bulkRecipientsUri" => data.bulk_recipients_uri,
        "proofFile" => Docusign.RecipientProofFile.encode(data.proof_file),
        "signInEachLocationMetadata" =>
          Docusign.PropertyMetadata.encode(data.sign_in_each_location_metadata),
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "requireUploadSignature" => data.require_upload_signature,
        "signInEachLocation" => data.sign_in_each_location,
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "requireSignerCertificate" => data.require_signer_certificate,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "autoNavigation" => data.auto_navigation,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "offlineAttributes" => Docusign.OfflineAttributes.encode(data.offline_attributes),
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "requireSignOnPaper" => data.require_sign_on_paper,
        "notarySigners" =>
          case(data.notary_signers) do
            nil ->
              nil

            _ ->
              Enum.map(data.notary_signers, fn item -> item end)
          end,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "signatureInfo" => Docusign.RecipientSignatureInformation.encode(data.signature_info),
        "notaryType" => data.notary_type,
        "recipientSignatureProviders" =>
          case(data.recipient_signature_providers) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_signature_providers, fn item ->
                Docusign.RecipientSignatureProvider.encode(item)
              end)
          end,
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "isBulkRecipient" => data.is_bulk_recipient,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "canSignOffline" => data.can_sign_offline,
        "liveOakStartURL" => data.live_oak_start_url,
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "agentCanEditName" => data.agent_can_edit_name,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "defaultRecipient" => data.default_recipient,
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "notaryId" => data.notary_id,
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end,
        "recipientSuppliesTabs" => data.recipient_supplies_tabs
      }
    end
  end

  defmodule(BccEmailAddress) do
    @moduledoc "#{nil}
    "
    defstruct(bcc_email_address_id: nil, email: nil)
    @type t :: %__MODULE__{bcc_email_address_id: binary | nil, email: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, bcc_email_address_id} <-
          case(data["bccEmailAddressId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bccEmailAddressId"]}}
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end
      ) do
        {:ok, %__MODULE__{bcc_email_address_id: bcc_email_address_id, email: email}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["bccEmailAddress" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"bccEmailAddressId" => data.bcc_email_address_id, "email" => data.email}
    end
  end

  defmodule(Ssn4InformationInput) do
    @moduledoc "#{nil}
    "
    defstruct(display_level_code: nil, receive_in_response: nil, ssn4: nil)

    @type t :: %__MODULE__{
            display_level_code: binary | nil,
            receive_in_response: binary | nil,
            ssn4: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, display_level_code} <-
          case(data["displayLevelCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayLevelCode"]}}
          end,
        {:ok, receive_in_response} <-
          case(data["receiveInResponse"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["receiveInResponse"]}}
          end,
        {:ok, ssn4} <-
          case(data["ssn4"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["ssn4"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           display_level_code: display_level_code,
           receive_in_response: receive_in_response,
           ssn4: ssn4
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["ssn4InformationInput" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "displayLevelCode" => data.display_level_code,
        "receiveInResponse" => data.receive_in_response,
        "ssn4" => data.ssn4
      }
    end
  end

  defmodule(RecipientSignatureProvider) do
    @moduledoc "#{nil}
    "
    defstruct(
      seal_documents_with_tabs_only: nil,
      seal_name: nil,
      signature_provider_name: nil,
      signature_provider_name_metadata: nil,
      signature_provider_options: nil
    )

    @type t :: %__MODULE__{
            seal_documents_with_tabs_only: binary | nil,
            seal_name: binary | nil,
            signature_provider_name: binary | nil,
            signature_provider_name_metadata: Docusign.PropertyMetadata.t() | nil,
            signature_provider_options: Docusign.RecipientSignatureProviderOptions.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, seal_documents_with_tabs_only} <-
          case(data["sealDocumentsWithTabsOnly"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sealDocumentsWithTabsOnly"]}}
          end,
        {:ok, seal_name} <-
          case(data["sealName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sealName"]}}
          end,
        {:ok, signature_provider_name} <-
          case(data["signatureProviderName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signatureProviderName"]}}
          end,
        {:ok, signature_provider_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["signatureProviderNameMetadata"]),
        {:ok, signature_provider_options} <-
          Docusign.RecipientSignatureProviderOptions.decode(data["signatureProviderOptions"])
      ) do
        {:ok,
         %__MODULE__{
           seal_documents_with_tabs_only: seal_documents_with_tabs_only,
           seal_name: seal_name,
           signature_provider_name: signature_provider_name,
           signature_provider_name_metadata: signature_provider_name_metadata,
           signature_provider_options: signature_provider_options
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientSignatureProvider" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "sealDocumentsWithTabsOnly" => data.seal_documents_with_tabs_only,
        "sealName" => data.seal_name,
        "signatureProviderName" => data.signature_provider_name,
        "signatureProviderNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.signature_provider_name_metadata),
        "signatureProviderOptions" =>
          Docusign.RecipientSignatureProviderOptions.encode(data.signature_provider_options)
      }
    end
  end

  defmodule(AuthenticationStatus) do
    @moduledoc "#{nil}
    "
    defstruct(
      access_code_result: nil,
      age_verify_result: nil,
      any_social_id_result: nil,
      facebook_result: nil,
      google_result: nil,
      id_lookup_result: nil,
      id_questions_result: nil,
      identity_verification_result: nil,
      linkedin_result: nil,
      live_id_result: nil,
      ofac_result: nil,
      open_id_result: nil,
      phone_auth_result: nil,
      s_tan_pin_result: nil,
      salesforce_result: nil,
      signature_provider_result: nil,
      sms_auth_result: nil,
      twitter_result: nil,
      yahoo_result: nil
    )

    @type t :: %__MODULE__{
            access_code_result: Docusign.EventResult.t() | nil,
            age_verify_result: Docusign.EventResult.t() | nil,
            any_social_id_result: Docusign.EventResult.t() | nil,
            facebook_result: Docusign.EventResult.t() | nil,
            google_result: Docusign.EventResult.t() | nil,
            id_lookup_result: Docusign.EventResult.t() | nil,
            id_questions_result: Docusign.EventResult.t() | nil,
            identity_verification_result: Docusign.EventResult.t() | nil,
            linkedin_result: Docusign.EventResult.t() | nil,
            live_id_result: Docusign.EventResult.t() | nil,
            ofac_result: Docusign.EventResult.t() | nil,
            open_id_result: Docusign.EventResult.t() | nil,
            phone_auth_result: Docusign.EventResult.t() | nil,
            s_tan_pin_result: Docusign.EventResult.t() | nil,
            salesforce_result: Docusign.EventResult.t() | nil,
            signature_provider_result: Docusign.EventResult.t() | nil,
            sms_auth_result: Docusign.EventResult.t() | nil,
            twitter_result: Docusign.EventResult.t() | nil,
            yahoo_result: Docusign.EventResult.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, access_code_result} <- Docusign.EventResult.decode(data["accessCodeResult"]),
        {:ok, age_verify_result} <- Docusign.EventResult.decode(data["ageVerifyResult"]),
        {:ok, any_social_id_result} <- Docusign.EventResult.decode(data["anySocialIDResult"]),
        {:ok, facebook_result} <- Docusign.EventResult.decode(data["facebookResult"]),
        {:ok, google_result} <- Docusign.EventResult.decode(data["googleResult"]),
        {:ok, id_lookup_result} <- Docusign.EventResult.decode(data["idLookupResult"]),
        {:ok, id_questions_result} <- Docusign.EventResult.decode(data["idQuestionsResult"]),
        {:ok, identity_verification_result} <-
          Docusign.EventResult.decode(data["identityVerificationResult"]),
        {:ok, linkedin_result} <- Docusign.EventResult.decode(data["linkedinResult"]),
        {:ok, live_id_result} <- Docusign.EventResult.decode(data["liveIDResult"]),
        {:ok, ofac_result} <- Docusign.EventResult.decode(data["ofacResult"]),
        {:ok, open_id_result} <- Docusign.EventResult.decode(data["openIDResult"]),
        {:ok, phone_auth_result} <- Docusign.EventResult.decode(data["phoneAuthResult"]),
        {:ok, s_tan_pin_result} <- Docusign.EventResult.decode(data["sTANPinResult"]),
        {:ok, salesforce_result} <- Docusign.EventResult.decode(data["salesforceResult"]),
        {:ok, signature_provider_result} <-
          Docusign.EventResult.decode(data["signatureProviderResult"]),
        {:ok, sms_auth_result} <- Docusign.EventResult.decode(data["smsAuthResult"]),
        {:ok, twitter_result} <- Docusign.EventResult.decode(data["twitterResult"]),
        {:ok, yahoo_result} <- Docusign.EventResult.decode(data["yahooResult"])
      ) do
        {:ok,
         %__MODULE__{
           access_code_result: access_code_result,
           age_verify_result: age_verify_result,
           any_social_id_result: any_social_id_result,
           facebook_result: facebook_result,
           google_result: google_result,
           id_lookup_result: id_lookup_result,
           id_questions_result: id_questions_result,
           identity_verification_result: identity_verification_result,
           linkedin_result: linkedin_result,
           live_id_result: live_id_result,
           ofac_result: ofac_result,
           open_id_result: open_id_result,
           phone_auth_result: phone_auth_result,
           s_tan_pin_result: s_tan_pin_result,
           salesforce_result: salesforce_result,
           signature_provider_result: signature_provider_result,
           sms_auth_result: sms_auth_result,
           twitter_result: twitter_result,
           yahoo_result: yahoo_result
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["authenticationStatus" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "accessCodeResult" => Docusign.EventResult.encode(data.access_code_result),
        "ageVerifyResult" => Docusign.EventResult.encode(data.age_verify_result),
        "anySocialIDResult" => Docusign.EventResult.encode(data.any_social_id_result),
        "facebookResult" => Docusign.EventResult.encode(data.facebook_result),
        "googleResult" => Docusign.EventResult.encode(data.google_result),
        "idLookupResult" => Docusign.EventResult.encode(data.id_lookup_result),
        "idQuestionsResult" => Docusign.EventResult.encode(data.id_questions_result),
        "identityVerificationResult" =>
          Docusign.EventResult.encode(data.identity_verification_result),
        "linkedinResult" => Docusign.EventResult.encode(data.linkedin_result),
        "liveIDResult" => Docusign.EventResult.encode(data.live_id_result),
        "ofacResult" => Docusign.EventResult.encode(data.ofac_result),
        "openIDResult" => Docusign.EventResult.encode(data.open_id_result),
        "phoneAuthResult" => Docusign.EventResult.encode(data.phone_auth_result),
        "sTANPinResult" => Docusign.EventResult.encode(data.s_tan_pin_result),
        "salesforceResult" => Docusign.EventResult.encode(data.salesforce_result),
        "signatureProviderResult" => Docusign.EventResult.encode(data.signature_provider_result),
        "smsAuthResult" => Docusign.EventResult.encode(data.sms_auth_result),
        "twitterResult" => Docusign.EventResult.encode(data.twitter_result),
        "yahooResult" => Docusign.EventResult.encode(data.yahoo_result)
      }
    end
  end

  defmodule(Draw) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      use_background_as_canvas: nil,
      height_metadata: nil,
      allow_signer_upload: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            use_background_as_canvas: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            allow_signer_upload: binary | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, use_background_as_canvas} <-
          case(data["useBackgroundAsCanvas"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["useBackgroundAsCanvas"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, allow_signer_upload} <-
          case(data["allowSignerUpload"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSignerUpload"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           use_background_as_canvas: use_background_as_canvas,
           height_metadata: height_metadata,
           allow_signer_upload: allow_signer_upload,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["draw" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "useBackgroundAsCanvas" => data.use_background_as_canvas,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "allowSignerUpload" => data.allow_signer_upload,
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(ConditionalRecipientRuleCondition) do
    @moduledoc "#{nil}
    "
    defstruct(filters: nil, order: nil, recipient_label: nil)

    @type t :: %__MODULE__{
            filters: [Docusign.ConditionalRecipientRuleFilter.t()] | nil,
            order: binary | nil,
            recipient_label: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, filters} <-
          case(data["filters"]) do
            nil ->
              nil

            _ ->
              data["filters"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.ConditionalRecipientRuleFilter.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, order} <-
          case(data["order"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["order"]}}
          end,
        {:ok, recipient_label} <-
          case(data["recipientLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientLabel"]}}
          end
      ) do
        {:ok, %__MODULE__{filters: filters, order: order, recipient_label: recipient_label}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["conditionalRecipientRuleCondition" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "filters" =>
          case(data.filters) do
            nil ->
              nil

            _ ->
              Enum.map(data.filters, fn item ->
                Docusign.ConditionalRecipientRuleFilter.encode(item)
              end)
          end,
        "order" => data.order,
        "recipientLabel" => data.recipient_label
      }
    end
  end

  defmodule(RecipientSMSAuthentication) do
    @moduledoc "#{nil}
    "
    defstruct(sender_provided_numbers: nil, sender_provided_numbers_metadata: nil)

    @type t :: %__MODULE__{
            sender_provided_numbers: [binary] | nil,
            sender_provided_numbers_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, sender_provided_numbers} <-
          case(data["senderProvidedNumbers"]) do
            nil ->
              nil

            _ ->
              data["senderProvidedNumbers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, sender_provided_numbers_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderProvidedNumbersMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           sender_provided_numbers: sender_provided_numbers,
           sender_provided_numbers_metadata: sender_provided_numbers_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientSMSAuthentication" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "senderProvidedNumbers" =>
          case(data.sender_provided_numbers) do
            nil ->
              nil

            _ ->
              Enum.map(data.sender_provided_numbers, fn item -> item end)
          end,
        "senderProvidedNumbersMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_provided_numbers_metadata)
      }
    end
  end

  defmodule(MergeField) do
    @moduledoc "#{nil}
    "
    defstruct(
      allow_sender_to_edit: nil,
      allow_sender_to_edit_metadata: nil,
      configuration_type: nil,
      configuration_type_metadata: nil,
      path: nil,
      path_extended: nil,
      path_extended_metadata: nil,
      path_metadata: nil,
      row: nil,
      row_metadata: nil,
      write_back: nil,
      write_back_metadata: nil
    )

    @type t :: %__MODULE__{
            allow_sender_to_edit: binary | nil,
            allow_sender_to_edit_metadata: Docusign.PropertyMetadata.t() | nil,
            configuration_type: binary | nil,
            configuration_type_metadata: Docusign.PropertyMetadata.t() | nil,
            path: binary | nil,
            path_extended: [Docusign.PathExtendedElement.t()] | nil,
            path_extended_metadata: Docusign.PropertyMetadata.t() | nil,
            path_metadata: Docusign.PropertyMetadata.t() | nil,
            row: binary | nil,
            row_metadata: Docusign.PropertyMetadata.t() | nil,
            write_back: binary | nil,
            write_back_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, allow_sender_to_edit} <-
          case(data["allowSenderToEdit"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSenderToEdit"]}}
          end,
        {:ok, allow_sender_to_edit_metadata} <-
          Docusign.PropertyMetadata.decode(data["allowSenderToEditMetadata"]),
        {:ok, configuration_type} <-
          case(data["configurationType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["configurationType"]}}
          end,
        {:ok, configuration_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["configurationTypeMetadata"]),
        {:ok, path} <-
          case(data["path"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["path"]}}
          end,
        {:ok, path_extended} <-
          case(data["pathExtended"]) do
            nil ->
              nil

            _ ->
              data["pathExtended"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.PathExtendedElement.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, path_extended_metadata} <-
          Docusign.PropertyMetadata.decode(data["pathExtendedMetadata"]),
        {:ok, path_metadata} <- Docusign.PropertyMetadata.decode(data["pathMetadata"]),
        {:ok, row} <-
          case(data["row"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["row"]}}
          end,
        {:ok, row_metadata} <- Docusign.PropertyMetadata.decode(data["rowMetadata"]),
        {:ok, write_back} <-
          case(data["writeBack"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["writeBack"]}}
          end,
        {:ok, write_back_metadata} <- Docusign.PropertyMetadata.decode(data["writeBackMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           allow_sender_to_edit: allow_sender_to_edit,
           allow_sender_to_edit_metadata: allow_sender_to_edit_metadata,
           configuration_type: configuration_type,
           configuration_type_metadata: configuration_type_metadata,
           path: path,
           path_extended: path_extended,
           path_extended_metadata: path_extended_metadata,
           path_metadata: path_metadata,
           row: row,
           row_metadata: row_metadata,
           write_back: write_back,
           write_back_metadata: write_back_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["mergeField" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "allowSenderToEdit" => data.allow_sender_to_edit,
        "allowSenderToEditMetadata" =>
          Docusign.PropertyMetadata.encode(data.allow_sender_to_edit_metadata),
        "configurationType" => data.configuration_type,
        "configurationTypeMetadata" =>
          Docusign.PropertyMetadata.encode(data.configuration_type_metadata),
        "path" => data.path,
        "pathExtended" =>
          case(data.path_extended) do
            nil ->
              nil

            _ ->
              Enum.map(data.path_extended, fn item ->
                Docusign.PathExtendedElement.encode(item)
              end)
          end,
        "pathExtendedMetadata" => Docusign.PropertyMetadata.encode(data.path_extended_metadata),
        "pathMetadata" => Docusign.PropertyMetadata.encode(data.path_metadata),
        "row" => data.row,
        "rowMetadata" => Docusign.PropertyMetadata.encode(data.row_metadata),
        "writeBack" => data.write_back,
        "writeBackMetadata" => Docusign.PropertyMetadata.encode(data.write_back_metadata)
      }
    end
  end

  defmodule(SignHere) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      optional_metadata: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      scale_value_metadata: nil,
      tab_id_metadata: nil,
      scale_value: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      stamp_type: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      optional: nil,
      y_position: nil,
      hand_draw_required: nil,
      stamp_type_metadata: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      stamp: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      is_seal_sign_tab: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            optional_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            stamp_type: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            optional: binary | nil,
            y_position: binary | nil,
            hand_draw_required: binary | nil,
            stamp_type_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            stamp: Docusign.Stamp.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            is_seal_sign_tab: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, optional_metadata} <- Docusign.PropertyMetadata.decode(data["optionalMetadata"]),
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, scale_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["scaleValueMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, scale_value} <-
          case(data["scaleValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["scaleValue"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, stamp_type} <-
          case(data["stampType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["stampType"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, optional} <-
          case(data["optional"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["optional"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, hand_draw_required} <-
          case(data["handDrawRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["handDrawRequired"]}}
          end,
        {:ok, stamp_type_metadata} <- Docusign.PropertyMetadata.decode(data["stampTypeMetadata"]),
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, stamp} <- Docusign.Stamp.decode(data["stamp"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, is_seal_sign_tab} <-
          case(data["isSealSignTab"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isSealSignTab"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           optional_metadata: optional_metadata,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           scale_value_metadata: scale_value_metadata,
           tab_id_metadata: tab_id_metadata,
           scale_value: scale_value,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           stamp_type: stamp_type,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           optional: optional,
           y_position: y_position,
           hand_draw_required: hand_draw_required,
           stamp_type_metadata: stamp_type_metadata,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           stamp: stamp,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           is_seal_sign_tab: is_seal_sign_tab
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["signHere" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "optionalMetadata" => Docusign.PropertyMetadata.encode(data.optional_metadata),
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "scaleValueMetadata" => Docusign.PropertyMetadata.encode(data.scale_value_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "scaleValue" => data.scale_value,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "stampType" => data.stamp_type,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "optional" => data.optional,
        "yPosition" => data.y_position,
        "handDrawRequired" => data.hand_draw_required,
        "stampTypeMetadata" => Docusign.PropertyMetadata.encode(data.stamp_type_metadata),
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "stamp" => Docusign.Stamp.encode(data.stamp),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "isSealSignTab" => data.is_seal_sign_tab
      }
    end
  end

  defmodule(Envelope) do
    @moduledoc "#{nil}
    "
    defstruct(
      last_modified_date_time: nil,
      brand_id: nil,
      created_date_time: nil,
      voided_date_time: nil,
      expire_enabled: nil,
      declined_date_time: nil,
      envelope_uri: nil,
      any_signer: nil,
      voided_reason: nil,
      purge_request_date: nil,
      documents_uri: nil,
      documents_combined_uri: nil,
      lock_information: nil,
      has_form_data_changed: nil,
      purge_completed_date: nil,
      has_wav_file: nil,
      transaction_id: nil,
      custom_fields_uri: nil,
      attachments_uri: nil,
      authoritative_copy: nil,
      is_dynamic_envelope: nil,
      power_form: nil,
      signer_can_sign_on_mobile: nil,
      email_subject: nil,
      document_base64: nil,
      allow_reassign: nil,
      sender: nil,
      allow_view_history: nil,
      envelope_id: nil,
      status_date_time: nil,
      is_signature_provider_envelope: nil,
      enable_wet_sign: nil,
      allow_comments: nil,
      envelope_id_stamping: nil,
      allow_markup: nil,
      sent_date_time: nil,
      custom_fields: nil,
      certificate_uri: nil,
      auto_navigation: nil,
      has_comments: nil,
      expire_date_time: nil,
      recipients_lock: nil,
      envelope_documents: nil,
      purge_state: nil,
      templates_uri: nil,
      external_envelope_id: nil,
      workflow: nil,
      folders: nil,
      message_lock: nil,
      disable_responsive_document: nil,
      use_disclosure: nil,
      location: nil,
      enforce_signer_visibility: nil,
      envelope_metadata: nil,
      recipients: nil,
      holder: nil,
      completed_date_time: nil,
      email_blurb: nil,
      recipients_uri: nil,
      delivered_date_time: nil,
      status_changed_date_time: nil,
      is21_cfr_part11: nil,
      brand_lock: nil,
      initial_sent_date_time: nil,
      envelope_attachments: nil,
      expire_after: nil,
      notification: nil,
      notification_uri: nil,
      status: nil,
      asynchronous: nil,
      authoritative_copy_default: nil,
      copy_recipient_data: nil,
      email_settings: nil,
      access_control_list_base64: nil,
      envelope_location: nil,
      deleted_date_time: nil,
      signing_location: nil
    )

    @type t :: %__MODULE__{
            last_modified_date_time: binary | nil,
            brand_id: binary | nil,
            created_date_time: binary | nil,
            voided_date_time: binary | nil,
            expire_enabled: binary | nil,
            declined_date_time: binary | nil,
            envelope_uri: binary | nil,
            any_signer: binary | nil,
            voided_reason: binary | nil,
            purge_request_date: binary | nil,
            documents_uri: binary | nil,
            documents_combined_uri: binary | nil,
            lock_information: Docusign.EnvelopeLocks.t() | nil,
            has_form_data_changed: binary | nil,
            purge_completed_date: binary | nil,
            has_wav_file: binary | nil,
            transaction_id: binary | nil,
            custom_fields_uri: binary | nil,
            attachments_uri: binary | nil,
            authoritative_copy: binary | nil,
            is_dynamic_envelope: binary | nil,
            power_form: Docusign.PowerForm.t() | nil,
            signer_can_sign_on_mobile: binary | nil,
            email_subject: binary | nil,
            document_base64: binary | nil,
            allow_reassign: binary | nil,
            sender: Docusign.UserInfo.t() | nil,
            allow_view_history: binary | nil,
            envelope_id: binary | nil,
            status_date_time: binary | nil,
            is_signature_provider_envelope: binary | nil,
            enable_wet_sign: binary | nil,
            allow_comments: binary | nil,
            envelope_id_stamping: binary | nil,
            allow_markup: binary | nil,
            sent_date_time: binary | nil,
            custom_fields: Docusign.AccountCustomFields.t() | nil,
            certificate_uri: binary | nil,
            auto_navigation: binary | nil,
            has_comments: binary | nil,
            expire_date_time: binary | nil,
            recipients_lock: binary | nil,
            envelope_documents: [Docusign.EnvelopeDocument.t()] | nil,
            purge_state: binary | nil,
            templates_uri: binary | nil,
            external_envelope_id: binary | nil,
            workflow: Docusign.Workflow.t() | nil,
            folders: [Docusign.Folder.t()] | nil,
            message_lock: binary | nil,
            disable_responsive_document: binary | nil,
            use_disclosure: binary | nil,
            location: binary | nil,
            enforce_signer_visibility: binary | nil,
            envelope_metadata: Docusign.EnvelopeMetadata.t() | nil,
            recipients: Docusign.EnvelopeRecipients.t() | nil,
            holder: binary | nil,
            completed_date_time: binary | nil,
            email_blurb: binary | nil,
            recipients_uri: binary | nil,
            delivered_date_time: binary | nil,
            status_changed_date_time: binary | nil,
            is21_cfr_part11: binary | nil,
            brand_lock: binary | nil,
            initial_sent_date_time: binary | nil,
            envelope_attachments: [Docusign.Attachment.t()] | nil,
            expire_after: binary | nil,
            notification: Docusign.Notification.t() | nil,
            notification_uri: binary | nil,
            status: binary | nil,
            asynchronous: binary | nil,
            authoritative_copy_default: binary | nil,
            copy_recipient_data: binary | nil,
            email_settings: Docusign.EmailSettings.t() | nil,
            access_control_list_base64: binary | nil,
            envelope_location: binary | nil,
            deleted_date_time: binary | nil,
            signing_location: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, last_modified_date_time} <-
          case(data["lastModifiedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastModifiedDateTime"]}}
          end,
        {:ok, brand_id} <-
          case(data["brandId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["brandId"]}}
          end,
        {:ok, created_date_time} <-
          case(data["createdDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["createdDateTime"]}}
          end,
        {:ok, voided_date_time} <-
          case(data["voidedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["voidedDateTime"]}}
          end,
        {:ok, expire_enabled} <-
          case(data["expireEnabled"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireEnabled"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, envelope_uri} <-
          case(data["envelopeUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeUri"]}}
          end,
        {:ok, any_signer} <-
          case(data["anySigner"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anySigner"]}}
          end,
        {:ok, voided_reason} <-
          case(data["voidedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["voidedReason"]}}
          end,
        {:ok, purge_request_date} <-
          case(data["purgeRequestDate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["purgeRequestDate"]}}
          end,
        {:ok, documents_uri} <-
          case(data["documentsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentsUri"]}}
          end,
        {:ok, documents_combined_uri} <-
          case(data["documentsCombinedUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentsCombinedUri"]}}
          end,
        {:ok, lock_information} <- Docusign.EnvelopeLocks.decode(data["lockInformation"]),
        {:ok, has_form_data_changed} <-
          case(data["hasFormDataChanged"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasFormDataChanged"]}}
          end,
        {:ok, purge_completed_date} <-
          case(data["purgeCompletedDate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["purgeCompletedDate"]}}
          end,
        {:ok, has_wav_file} <-
          case(data["hasWavFile"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasWavFile"]}}
          end,
        {:ok, transaction_id} <-
          case(data["transactionId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["transactionId"]}}
          end,
        {:ok, custom_fields_uri} <-
          case(data["customFieldsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customFieldsUri"]}}
          end,
        {:ok, attachments_uri} <-
          case(data["attachmentsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["attachmentsUri"]}}
          end,
        {:ok, authoritative_copy} <-
          case(data["authoritativeCopy"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authoritativeCopy"]}}
          end,
        {:ok, is_dynamic_envelope} <-
          case(data["isDynamicEnvelope"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isDynamicEnvelope"]}}
          end,
        {:ok, power_form} <- Docusign.PowerForm.decode(data["powerForm"]),
        {:ok, signer_can_sign_on_mobile} <-
          case(data["signerCanSignOnMobile"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerCanSignOnMobile"]}}
          end,
        {:ok, email_subject} <-
          case(data["emailSubject"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailSubject"]}}
          end,
        {:ok, document_base64} <-
          case(data["documentBase64"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentBase64"]}}
          end,
        {:ok, allow_reassign} <-
          case(data["allowReassign"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowReassign"]}}
          end,
        {:ok, sender} <- Docusign.UserInfo.decode(data["sender"]),
        {:ok, allow_view_history} <-
          case(data["allowViewHistory"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowViewHistory"]}}
          end,
        {:ok, envelope_id} <-
          case(data["envelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeId"]}}
          end,
        {:ok, status_date_time} <-
          case(data["statusDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusDateTime"]}}
          end,
        {:ok, is_signature_provider_envelope} <-
          case(data["isSignatureProviderEnvelope"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isSignatureProviderEnvelope"]}}
          end,
        {:ok, enable_wet_sign} <-
          case(data["enableWetSign"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["enableWetSign"]}}
          end,
        {:ok, allow_comments} <-
          case(data["allowComments"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowComments"]}}
          end,
        {:ok, envelope_id_stamping} <-
          case(data["envelopeIdStamping"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeIdStamping"]}}
          end,
        {:ok, allow_markup} <-
          case(data["allowMarkup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowMarkup"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, custom_fields} <- Docusign.AccountCustomFields.decode(data["customFields"]),
        {:ok, certificate_uri} <-
          case(data["certificateUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["certificateUri"]}}
          end,
        {:ok, auto_navigation} <-
          case(data["autoNavigation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoNavigation"]}}
          end,
        {:ok, has_comments} <-
          case(data["hasComments"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasComments"]}}
          end,
        {:ok, expire_date_time} <-
          case(data["expireDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireDateTime"]}}
          end,
        {:ok, recipients_lock} <-
          case(data["recipientsLock"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientsLock"]}}
          end,
        {:ok, envelope_documents} <-
          case(data["envelopeDocuments"]) do
            nil ->
              nil

            _ ->
              data["envelopeDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.EnvelopeDocument.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, purge_state} <-
          case(data["purgeState"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["purgeState"]}}
          end,
        {:ok, templates_uri} <-
          case(data["templatesUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templatesUri"]}}
          end,
        {:ok, external_envelope_id} <-
          case(data["externalEnvelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["externalEnvelopeId"]}}
          end,
        {:ok, workflow} <- Docusign.Workflow.decode(data["workflow"]),
        {:ok, folders} <-
          case(data["folders"]) do
            nil ->
              nil

            _ ->
              data["folders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Folder.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, message_lock} <-
          case(data["messageLock"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["messageLock"]}}
          end,
        {:ok, disable_responsive_document} <-
          case(data["disableResponsiveDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableResponsiveDocument"]}}
          end,
        {:ok, use_disclosure} <-
          case(data["useDisclosure"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["useDisclosure"]}}
          end,
        {:ok, location} <-
          case(data["location"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["location"]}}
          end,
        {:ok, enforce_signer_visibility} <-
          case(data["enforceSignerVisibility"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["enforceSignerVisibility"]}}
          end,
        {:ok, envelope_metadata} <- Docusign.EnvelopeMetadata.decode(data["envelopeMetadata"]),
        {:ok, recipients} <- Docusign.EnvelopeRecipients.decode(data["recipients"]),
        {:ok, holder} <-
          case(data["holder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["holder"]}}
          end,
        {:ok, completed_date_time} <-
          case(data["completedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedDateTime"]}}
          end,
        {:ok, email_blurb} <-
          case(data["emailBlurb"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailBlurb"]}}
          end,
        {:ok, recipients_uri} <-
          case(data["recipientsUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientsUri"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, status_changed_date_time} <-
          case(data["statusChangedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusChangedDateTime"]}}
          end,
        {:ok, is21_cfr_part11} <-
          case(data["is21CFRPart11"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["is21CFRPart11"]}}
          end,
        {:ok, brand_lock} <-
          case(data["brandLock"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["brandLock"]}}
          end,
        {:ok, initial_sent_date_time} <-
          case(data["initialSentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["initialSentDateTime"]}}
          end,
        {:ok, envelope_attachments} <-
          case(data["envelopeAttachments"]) do
            nil ->
              nil

            _ ->
              data["envelopeAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Attachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, expire_after} <-
          case(data["expireAfter"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireAfter"]}}
          end,
        {:ok, notification} <- Docusign.Notification.decode(data["notification"]),
        {:ok, notification_uri} <-
          case(data["notificationUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["notificationUri"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, asynchronous} <-
          case(data["asynchronous"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["asynchronous"]}}
          end,
        {:ok, authoritative_copy_default} <-
          case(data["authoritativeCopyDefault"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authoritativeCopyDefault"]}}
          end,
        {:ok, copy_recipient_data} <-
          case(data["copyRecipientData"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["copyRecipientData"]}}
          end,
        {:ok, email_settings} <- Docusign.EmailSettings.decode(data["emailSettings"]),
        {:ok, access_control_list_base64} <-
          case(data["accessControlListBase64"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessControlListBase64"]}}
          end,
        {:ok, envelope_location} <-
          case(data["envelopeLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeLocation"]}}
          end,
        {:ok, deleted_date_time} <-
          case(data["deletedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deletedDateTime"]}}
          end,
        {:ok, signing_location} <-
          case(data["signingLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingLocation"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           last_modified_date_time: last_modified_date_time,
           brand_id: brand_id,
           created_date_time: created_date_time,
           voided_date_time: voided_date_time,
           expire_enabled: expire_enabled,
           declined_date_time: declined_date_time,
           envelope_uri: envelope_uri,
           any_signer: any_signer,
           voided_reason: voided_reason,
           purge_request_date: purge_request_date,
           documents_uri: documents_uri,
           documents_combined_uri: documents_combined_uri,
           lock_information: lock_information,
           has_form_data_changed: has_form_data_changed,
           purge_completed_date: purge_completed_date,
           has_wav_file: has_wav_file,
           transaction_id: transaction_id,
           custom_fields_uri: custom_fields_uri,
           attachments_uri: attachments_uri,
           authoritative_copy: authoritative_copy,
           is_dynamic_envelope: is_dynamic_envelope,
           power_form: power_form,
           signer_can_sign_on_mobile: signer_can_sign_on_mobile,
           email_subject: email_subject,
           document_base64: document_base64,
           allow_reassign: allow_reassign,
           sender: sender,
           allow_view_history: allow_view_history,
           envelope_id: envelope_id,
           status_date_time: status_date_time,
           is_signature_provider_envelope: is_signature_provider_envelope,
           enable_wet_sign: enable_wet_sign,
           allow_comments: allow_comments,
           envelope_id_stamping: envelope_id_stamping,
           allow_markup: allow_markup,
           sent_date_time: sent_date_time,
           custom_fields: custom_fields,
           certificate_uri: certificate_uri,
           auto_navigation: auto_navigation,
           has_comments: has_comments,
           expire_date_time: expire_date_time,
           recipients_lock: recipients_lock,
           envelope_documents: envelope_documents,
           purge_state: purge_state,
           templates_uri: templates_uri,
           external_envelope_id: external_envelope_id,
           workflow: workflow,
           folders: folders,
           message_lock: message_lock,
           disable_responsive_document: disable_responsive_document,
           use_disclosure: use_disclosure,
           location: location,
           enforce_signer_visibility: enforce_signer_visibility,
           envelope_metadata: envelope_metadata,
           recipients: recipients,
           holder: holder,
           completed_date_time: completed_date_time,
           email_blurb: email_blurb,
           recipients_uri: recipients_uri,
           delivered_date_time: delivered_date_time,
           status_changed_date_time: status_changed_date_time,
           is21_cfr_part11: is21_cfr_part11,
           brand_lock: brand_lock,
           initial_sent_date_time: initial_sent_date_time,
           envelope_attachments: envelope_attachments,
           expire_after: expire_after,
           notification: notification,
           notification_uri: notification_uri,
           status: status,
           asynchronous: asynchronous,
           authoritative_copy_default: authoritative_copy_default,
           copy_recipient_data: copy_recipient_data,
           email_settings: email_settings,
           access_control_list_base64: access_control_list_base64,
           envelope_location: envelope_location,
           deleted_date_time: deleted_date_time,
           signing_location: signing_location
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["envelope" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "lastModifiedDateTime" => data.last_modified_date_time,
        "brandId" => data.brand_id,
        "createdDateTime" => data.created_date_time,
        "voidedDateTime" => data.voided_date_time,
        "expireEnabled" => data.expire_enabled,
        "declinedDateTime" => data.declined_date_time,
        "envelopeUri" => data.envelope_uri,
        "anySigner" => data.any_signer,
        "voidedReason" => data.voided_reason,
        "purgeRequestDate" => data.purge_request_date,
        "documentsUri" => data.documents_uri,
        "documentsCombinedUri" => data.documents_combined_uri,
        "lockInformation" => Docusign.EnvelopeLocks.encode(data.lock_information),
        "hasFormDataChanged" => data.has_form_data_changed,
        "purgeCompletedDate" => data.purge_completed_date,
        "hasWavFile" => data.has_wav_file,
        "transactionId" => data.transaction_id,
        "customFieldsUri" => data.custom_fields_uri,
        "attachmentsUri" => data.attachments_uri,
        "authoritativeCopy" => data.authoritative_copy,
        "isDynamicEnvelope" => data.is_dynamic_envelope,
        "powerForm" => Docusign.PowerForm.encode(data.power_form),
        "signerCanSignOnMobile" => data.signer_can_sign_on_mobile,
        "emailSubject" => data.email_subject,
        "documentBase64" => data.document_base64,
        "allowReassign" => data.allow_reassign,
        "sender" => Docusign.UserInfo.encode(data.sender),
        "allowViewHistory" => data.allow_view_history,
        "envelopeId" => data.envelope_id,
        "statusDateTime" => data.status_date_time,
        "isSignatureProviderEnvelope" => data.is_signature_provider_envelope,
        "enableWetSign" => data.enable_wet_sign,
        "allowComments" => data.allow_comments,
        "envelopeIdStamping" => data.envelope_id_stamping,
        "allowMarkup" => data.allow_markup,
        "sentDateTime" => data.sent_date_time,
        "customFields" => Docusign.AccountCustomFields.encode(data.custom_fields),
        "certificateUri" => data.certificate_uri,
        "autoNavigation" => data.auto_navigation,
        "hasComments" => data.has_comments,
        "expireDateTime" => data.expire_date_time,
        "recipientsLock" => data.recipients_lock,
        "envelopeDocuments" =>
          case(data.envelope_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.envelope_documents, fn item ->
                Docusign.EnvelopeDocument.encode(item)
              end)
          end,
        "purgeState" => data.purge_state,
        "templatesUri" => data.templates_uri,
        "externalEnvelopeId" => data.external_envelope_id,
        "workflow" => Docusign.Workflow.encode(data.workflow),
        "folders" =>
          case(data.folders) do
            nil ->
              nil

            _ ->
              Enum.map(data.folders, fn item -> Docusign.Folder.encode(item) end)
          end,
        "messageLock" => data.message_lock,
        "disableResponsiveDocument" => data.disable_responsive_document,
        "useDisclosure" => data.use_disclosure,
        "location" => data.location,
        "enforceSignerVisibility" => data.enforce_signer_visibility,
        "envelopeMetadata" => Docusign.EnvelopeMetadata.encode(data.envelope_metadata),
        "recipients" => Docusign.EnvelopeRecipients.encode(data.recipients),
        "holder" => data.holder,
        "completedDateTime" => data.completed_date_time,
        "emailBlurb" => data.email_blurb,
        "recipientsUri" => data.recipients_uri,
        "deliveredDateTime" => data.delivered_date_time,
        "statusChangedDateTime" => data.status_changed_date_time,
        "is21CFRPart11" => data.is21_cfr_part11,
        "brandLock" => data.brand_lock,
        "initialSentDateTime" => data.initial_sent_date_time,
        "envelopeAttachments" =>
          case(data.envelope_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.envelope_attachments, fn item -> Docusign.Attachment.encode(item) end)
          end,
        "expireAfter" => data.expire_after,
        "notification" => Docusign.Notification.encode(data.notification),
        "notificationUri" => data.notification_uri,
        "status" => data.status,
        "asynchronous" => data.asynchronous,
        "authoritativeCopyDefault" => data.authoritative_copy_default,
        "copyRecipientData" => data.copy_recipient_data,
        "emailSettings" => Docusign.EmailSettings.encode(data.email_settings),
        "accessControlListBase64" => data.access_control_list_base64,
        "envelopeLocation" => data.envelope_location,
        "deletedDateTime" => data.deleted_date_time,
        "signingLocation" => data.signing_location
      }
    end
  end

  defmodule(Comment) do
    @moduledoc "#{nil}
    "
    defstruct(
      envelope_id: nil,
      hmac: nil,
      id: nil,
      mentions: nil,
      read: nil,
      sent_by_email: nil,
      sent_by_full_name: nil,
      sent_by_image_id: nil,
      sent_by_initials: nil,
      sent_by_recipient_id: nil,
      sent_by_user_id: nil,
      signing_group_id: nil,
      signing_group_name: nil,
      subject: nil,
      tab_id: nil,
      text: nil,
      thread_id: nil,
      thread_originator_id: nil,
      time_stamp_formatted: nil,
      timestamp: nil,
      visible_to: nil
    )

    @type t :: %__MODULE__{
            envelope_id: binary | nil,
            hmac: binary | nil,
            id: binary | nil,
            mentions: [binary] | nil,
            read: boolean | nil,
            sent_by_email: binary | nil,
            sent_by_full_name: binary | nil,
            sent_by_image_id: binary | nil,
            sent_by_initials: binary | nil,
            sent_by_recipient_id: binary | nil,
            sent_by_user_id: binary | nil,
            signing_group_id: binary | nil,
            signing_group_name: binary | nil,
            subject: binary | nil,
            tab_id: binary | nil,
            text: binary | nil,
            thread_id: binary | nil,
            thread_originator_id: binary | nil,
            time_stamp_formatted: binary | nil,
            timestamp: binary | nil,
            visible_to: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, envelope_id} <-
          case(data["envelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeId"]}}
          end,
        {:ok, hmac} <-
          case(data["hmac"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hmac"]}}
          end,
        {:ok, id} <-
          case(data["id"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["id"]}}
          end,
        {:ok, mentions} <-
          case(data["mentions"]) do
            nil ->
              nil

            _ ->
              data["mentions"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, read} <-
          case(data["read"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["read"]}}
          end,
        {:ok, sent_by_email} <-
          case(data["sentByEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentByEmail"]}}
          end,
        {:ok, sent_by_full_name} <-
          case(data["sentByFullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentByFullName"]}}
          end,
        {:ok, sent_by_image_id} <-
          case(data["sentByImageId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentByImageId"]}}
          end,
        {:ok, sent_by_initials} <-
          case(data["sentByInitials"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentByInitials"]}}
          end,
        {:ok, sent_by_recipient_id} <-
          case(data["sentByRecipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentByRecipientId"]}}
          end,
        {:ok, sent_by_user_id} <-
          case(data["sentByUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentByUserId"]}}
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, subject} <-
          case(data["subject"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["subject"]}}
          end,
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, text} <-
          case(data["text"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["text"]}}
          end,
        {:ok, thread_id} <-
          case(data["threadId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["threadId"]}}
          end,
        {:ok, thread_originator_id} <-
          case(data["threadOriginatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["threadOriginatorId"]}}
          end,
        {:ok, time_stamp_formatted} <-
          case(data["timeStampFormatted"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["timeStampFormatted"]}}
          end,
        {:ok, timestamp} <-
          case(data["timestamp"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["timestamp"]}}
          end,
        {:ok, visible_to} <-
          case(data["visibleTo"]) do
            nil ->
              nil

            _ ->
              data["visibleTo"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           envelope_id: envelope_id,
           hmac: hmac,
           id: id,
           mentions: mentions,
           read: read,
           sent_by_email: sent_by_email,
           sent_by_full_name: sent_by_full_name,
           sent_by_image_id: sent_by_image_id,
           sent_by_initials: sent_by_initials,
           sent_by_recipient_id: sent_by_recipient_id,
           sent_by_user_id: sent_by_user_id,
           signing_group_id: signing_group_id,
           signing_group_name: signing_group_name,
           subject: subject,
           tab_id: tab_id,
           text: text,
           thread_id: thread_id,
           thread_originator_id: thread_originator_id,
           time_stamp_formatted: time_stamp_formatted,
           timestamp: timestamp,
           visible_to: visible_to
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["comment" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "envelopeId" => data.envelope_id,
        "hmac" => data.hmac,
        "id" => data.id,
        "mentions" =>
          case(data.mentions) do
            nil ->
              nil

            _ ->
              Enum.map(data.mentions, fn item -> item end)
          end,
        "read" => data.read,
        "sentByEmail" => data.sent_by_email,
        "sentByFullName" => data.sent_by_full_name,
        "sentByImageId" => data.sent_by_image_id,
        "sentByInitials" => data.sent_by_initials,
        "sentByRecipientId" => data.sent_by_recipient_id,
        "sentByUserId" => data.sent_by_user_id,
        "signingGroupId" => data.signing_group_id,
        "signingGroupName" => data.signing_group_name,
        "subject" => data.subject,
        "tabId" => data.tab_id,
        "text" => data.text,
        "threadId" => data.thread_id,
        "threadOriginatorId" => data.thread_originator_id,
        "timeStampFormatted" => data.time_stamp_formatted,
        "timestamp" => data.timestamp,
        "visibleTo" =>
          case(data.visible_to) do
            nil ->
              nil

            _ ->
              Enum.map(data.visible_to, fn item -> item end)
          end
      }
    end
  end

  defmodule(Expirations) do
    @moduledoc "#{nil}
    "
    defstruct(expire_after: nil, expire_enabled: nil, expire_warn: nil)

    @type t :: %__MODULE__{
            expire_after: binary | nil,
            expire_enabled: binary | nil,
            expire_warn: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, expire_after} <-
          case(data["expireAfter"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireAfter"]}}
          end,
        {:ok, expire_enabled} <-
          case(data["expireEnabled"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireEnabled"]}}
          end,
        {:ok, expire_warn} <-
          case(data["expireWarn"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expireWarn"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           expire_after: expire_after,
           expire_enabled: expire_enabled,
           expire_warn: expire_warn
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["expirations" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "expireAfter" => data.expire_after,
        "expireEnabled" => data.expire_enabled,
        "expireWarn" => data.expire_warn
      }
    end
  end

  defmodule(SmartSectionAnchorPosition) do
    @moduledoc "#{nil}
    "
    defstruct(page_number: nil, x_position: nil, y_position: nil)

    @type t :: %__MODULE__{
            page_number: integer | nil,
            x_position: number | nil,
            y_position: number | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_integer(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_integer, x}, ["pageNumber"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_number(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_number, x}, ["xPosition"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_number(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_number, x}, ["yPosition"]}}
          end
      ) do
        {:ok,
         %__MODULE__{page_number: page_number, x_position: x_position, y_position: y_position}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["smartSectionAnchorPosition" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "pageNumber" => data.page_number,
        "xPosition" => data.x_position,
        "yPosition" => data.y_position
      }
    end
  end

  defmodule(FirstName) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["firstName" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(LastName) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["lastName" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(PolyLineOverlay) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      graphics_context: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      overlay_type_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      overlay_type: nil,
      poly_lines: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            graphics_context: Docusign.GraphicsContext.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            overlay_type_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            overlay_type: binary | nil,
            poly_lines: [Docusign.PolyLine.t()] | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, graphics_context} <- Docusign.GraphicsContext.decode(data["graphicsContext"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, overlay_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["overlayTypeMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, overlay_type} <-
          case(data["overlayType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["overlayType"]}}
          end,
        {:ok, poly_lines} <-
          case(data["polyLines"]) do
            nil ->
              nil

            _ ->
              data["polyLines"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.PolyLine.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           graphics_context: graphics_context,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           overlay_type_metadata: overlay_type_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           overlay_type: overlay_type,
           poly_lines: poly_lines,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["polyLineOverlay" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "graphicsContext" => Docusign.GraphicsContext.encode(data.graphics_context),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "overlayTypeMetadata" => Docusign.PropertyMetadata.encode(data.overlay_type_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "overlayType" => data.overlay_type,
        "polyLines" =>
          case(data.poly_lines) do
            nil ->
              nil

            _ ->
              Enum.map(data.poly_lines, fn item -> Docusign.PolyLine.encode(item) end)
          end,
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(PolyLine) do
    @moduledoc "#{nil}
    "
    defstruct(x1: nil, x2: nil, y1: nil, y2: nil)
    @type t :: %__MODULE__{x1: binary | nil, x2: binary | nil, y1: binary | nil, y2: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, x1} <-
          case(data["x1"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["x1"]}}
          end,
        {:ok, x2} <-
          case(data["x2"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["x2"]}}
          end,
        {:ok, y1} <-
          case(data["y1"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["y1"]}}
          end,
        {:ok, y2} <-
          case(data["y2"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["y2"]}}
          end
      ) do
        {:ok, %__MODULE__{x1: x1, x2: x2, y1: y1, y2: y2}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["polyLine" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"x1" => data.x1, "x2" => data.x2, "y1" => data.y1, "y2" => data.y2}
    end
  end

  defmodule(SignerAttachment) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      optional_metadata: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      scale_value_metadata: nil,
      tab_id_metadata: nil,
      scale_value: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      optional: nil,
      y_position: nil,
      hand_draw_required: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            optional_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            optional: binary | nil,
            y_position: binary | nil,
            hand_draw_required: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, optional_metadata} <- Docusign.PropertyMetadata.decode(data["optionalMetadata"]),
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, scale_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["scaleValueMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, scale_value} <-
          case(data["scaleValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["scaleValue"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, optional} <-
          case(data["optional"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["optional"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, hand_draw_required} <-
          case(data["handDrawRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["handDrawRequired"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           optional_metadata: optional_metadata,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           scale_value_metadata: scale_value_metadata,
           tab_id_metadata: tab_id_metadata,
           scale_value: scale_value,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           optional: optional,
           y_position: y_position,
           hand_draw_required: hand_draw_required,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["signerAttachment" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "optionalMetadata" => Docusign.PropertyMetadata.encode(data.optional_metadata),
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "scaleValueMetadata" => Docusign.PropertyMetadata.encode(data.scale_value_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "scaleValue" => data.scale_value,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "optional" => data.optional,
        "yPosition" => data.y_position,
        "handDrawRequired" => data.hand_draw_required,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(FormulaTab) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      validation_pattern: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      round_decimal_places: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      validation_pattern_metadata: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      hidden: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      is_payment_amount_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      formula: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      formula_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      round_decimal_places_metadata: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      hidden_metadata: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      payment_details: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_pattern: binary | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            round_decimal_places: binary | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            validation_pattern_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            hidden: binary | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            is_payment_amount_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            formula: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            formula_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            round_decimal_places_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            hidden_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            payment_details: Docusign.PaymentDetails.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, validation_pattern} <-
          case(data["validationPattern"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationPattern"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, round_decimal_places} <-
          case(data["roundDecimalPlaces"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roundDecimalPlaces"]}}
          end,
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, validation_pattern_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationPatternMetadata"]),
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, hidden} <-
          case(data["hidden"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hidden"]}}
          end,
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, is_payment_amount_metadata} <-
          Docusign.PropertyMetadata.decode(data["isPaymentAmountMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, formula} <-
          case(data["formula"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formula"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, formula_metadata} <- Docusign.PropertyMetadata.decode(data["formulaMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, round_decimal_places_metadata} <-
          Docusign.PropertyMetadata.decode(data["roundDecimalPlacesMetadata"]),
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, hidden_metadata} <- Docusign.PropertyMetadata.decode(data["hiddenMetadata"]),
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, payment_details} <- Docusign.PaymentDetails.decode(data["paymentDetails"])
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           validation_pattern: validation_pattern,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           round_decimal_places: round_decimal_places,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           validation_pattern_metadata: validation_pattern_metadata,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           hidden: hidden,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           is_payment_amount_metadata: is_payment_amount_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           formula: formula,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           formula_metadata: formula_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           round_decimal_places_metadata: round_decimal_places_metadata,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           hidden_metadata: hidden_metadata,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           payment_details: payment_details
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["formulaTab" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "validationPattern" => data.validation_pattern,
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "roundDecimalPlaces" => data.round_decimal_places,
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "validationPatternMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_pattern_metadata),
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "hidden" => data.hidden,
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "isPaymentAmountMetadata" =>
          Docusign.PropertyMetadata.encode(data.is_payment_amount_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "formula" => data.formula,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "formulaMetadata" => Docusign.PropertyMetadata.encode(data.formula_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "roundDecimalPlacesMetadata" =>
          Docusign.PropertyMetadata.encode(data.round_decimal_places_metadata),
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "hiddenMetadata" => Docusign.PropertyMetadata.encode(data.hidden_metadata),
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "paymentDetails" => Docusign.PaymentDetails.encode(data.payment_details)
      }
    end
  end

  defmodule(Zip) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      validation_pattern: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      use_dash4_metadata: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      validation_pattern_metadata: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      use_dash4: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_pattern: binary | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            use_dash4_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            validation_pattern_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            use_dash4: binary | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, validation_pattern} <-
          case(data["validationPattern"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationPattern"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, use_dash4_metadata} <- Docusign.PropertyMetadata.decode(data["useDash4Metadata"]),
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, validation_pattern_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationPatternMetadata"]),
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, use_dash4} <-
          case(data["useDash4"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["useDash4"]}}
          end,
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           validation_pattern: validation_pattern,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           use_dash4_metadata: use_dash4_metadata,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           validation_pattern_metadata: validation_pattern_metadata,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           use_dash4: use_dash4,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["zip" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "validationPattern" => data.validation_pattern,
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "useDash4Metadata" => Docusign.PropertyMetadata.encode(data.use_dash4_metadata),
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "validationPatternMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_pattern_metadata),
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "useDash4" => data.use_dash4,
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(SenderName) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["senderName" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(PowerFormRecipient) do
    @moduledoc "#{nil}
    "
    defstruct(
      access_code: nil,
      access_code_locked: nil,
      access_code_required: nil,
      email: nil,
      email_locked: nil,
      id_check_configuration_name: nil,
      id_check_required: nil,
      name: nil,
      recipient_type: nil,
      role_name: nil,
      routing_order: nil,
      template_requires_id_lookup: nil,
      user_name_locked: nil
    )

    @type t :: %__MODULE__{
            access_code: binary | nil,
            access_code_locked: binary | nil,
            access_code_required: binary | nil,
            email: binary | nil,
            email_locked: binary | nil,
            id_check_configuration_name: binary | nil,
            id_check_required: binary | nil,
            name: binary | nil,
            recipient_type: binary | nil,
            role_name: binary | nil,
            routing_order: binary | nil,
            template_requires_id_lookup: binary | nil,
            user_name_locked: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, access_code_locked} <-
          case(data["accessCodeLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCodeLocked"]}}
          end,
        {:ok, access_code_required} <-
          case(data["accessCodeRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCodeRequired"]}}
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, email_locked} <-
          case(data["emailLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailLocked"]}}
          end,
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, id_check_required} <-
          case(data["idCheckRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckRequired"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, template_requires_id_lookup} <-
          case(data["templateRequiresIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequiresIdLookup"]}}
          end,
        {:ok, user_name_locked} <-
          case(data["userNameLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userNameLocked"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           access_code: access_code,
           access_code_locked: access_code_locked,
           access_code_required: access_code_required,
           email: email,
           email_locked: email_locked,
           id_check_configuration_name: id_check_configuration_name,
           id_check_required: id_check_required,
           name: name,
           recipient_type: recipient_type,
           role_name: role_name,
           routing_order: routing_order,
           template_requires_id_lookup: template_requires_id_lookup,
           user_name_locked: user_name_locked
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["powerFormRecipient" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "accessCode" => data.access_code,
        "accessCodeLocked" => data.access_code_locked,
        "accessCodeRequired" => data.access_code_required,
        "email" => data.email,
        "emailLocked" => data.email_locked,
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "idCheckRequired" => data.id_check_required,
        "name" => data.name,
        "recipientType" => data.recipient_type,
        "roleName" => data.role_name,
        "routingOrder" => data.routing_order,
        "templateRequiresIdLookup" => data.template_requires_id_lookup,
        "userNameLocked" => data.user_name_locked
      }
    end
  end

  defmodule(Workflow) do
    @moduledoc "#{nil}
    "
    defstruct(current_workflow_step_id: nil, workflow_status: nil, workflow_steps: nil)

    @type t :: %__MODULE__{
            current_workflow_step_id: binary | nil,
            workflow_status: binary | nil,
            workflow_steps: [Docusign.WorkflowStep.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, current_workflow_step_id} <-
          case(data["currentWorkflowStepId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["currentWorkflowStepId"]}}
          end,
        {:ok, workflow_status} <-
          case(data["workflowStatus"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["workflowStatus"]}}
          end,
        {:ok, workflow_steps} <-
          case(data["workflowSteps"]) do
            nil ->
              nil

            _ ->
              data["workflowSteps"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.WorkflowStep.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           current_workflow_step_id: current_workflow_step_id,
           workflow_status: workflow_status,
           workflow_steps: workflow_steps
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["workflow" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "currentWorkflowStepId" => data.current_workflow_step_id,
        "workflowStatus" => data.workflow_status,
        "workflowSteps" =>
          case(data.workflow_steps) do
            nil ->
              nil

            _ ->
              Enum.map(data.workflow_steps, fn item -> Docusign.WorkflowStep.encode(item) end)
          end
      }
    end
  end

  defmodule(Agent) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      allow_system_override_for_locked_recipient: nil,
      delivery_method_metadata: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      excluded_documents: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            excluded_documents: [binary] | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           delivery_method_metadata: delivery_method_metadata,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           excluded_documents: excluded_documents,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["agent" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end
      }
    end
  end

  defmodule(RecipientEvent) do
    @moduledoc "#{nil}
    "
    defstruct(include_documents: nil, recipient_event_status_code: nil)

    @type t :: %__MODULE__{
            include_documents: binary | nil,
            recipient_event_status_code: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, include_documents} <-
          case(data["includeDocuments"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeDocuments"]}}
          end,
        {:ok, recipient_event_status_code} <-
          case(data["recipientEventStatusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientEventStatusCode"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           include_documents: include_documents,
           recipient_event_status_code: recipient_event_status_code
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientEvent" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "includeDocuments" => data.include_documents,
        "recipientEventStatusCode" => data.recipient_event_status_code
      }
    end
  end

  defmodule(RecipientTokenClientURLs) do
    @moduledoc "#{nil}
    "
    defstruct([])
    @type t :: %__MODULE__{}
    @doc false
    def(decode(_)) do
      {:ok, %__MODULE__{}}
    end

    @doc false
    def(encode(_)) do
      %{}
    end
  end

  defmodule(Editor) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      allow_system_override_for_locked_recipient: nil,
      delivery_method_metadata: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           delivery_method_metadata: delivery_method_metadata,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["editor" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end
      }
    end
  end

  defmodule(RecipientIdentityPhoneNumber) do
    @moduledoc "#{nil}
    "
    defstruct(extension: nil, number: nil)
    @type t :: %__MODULE__{extension: binary | nil, number: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, extension} <-
          case(data["extension"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["extension"]}}
          end,
        {:ok, number} <-
          case(data["number"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["number"]}}
          end
      ) do
        {:ok, %__MODULE__{extension: extension, number: number}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientIdentityPhoneNumber" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"extension" => data.extension, "number" => data.number}
    end
  end

  defmodule(ServerTemplate) do
    @moduledoc "#{nil}
    "
    defstruct(sequence: nil, template_id: nil)
    @type t :: %__MODULE__{sequence: binary | nil, template_id: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, sequence} <-
          case(data["sequence"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sequence"]}}
          end,
        {:ok, template_id} <-
          case(data["templateId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateId"]}}
          end
      ) do
        {:ok, %__MODULE__{sequence: sequence, template_id: template_id}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["serverTemplate" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"sequence" => data.sequence, "templateId" => data.template_id}
    end
  end

  defmodule(DocumentHtmlDisplayAnchor) do
    @moduledoc "#{nil}
    "
    defstruct(
      case_sensitive: nil,
      display_settings: nil,
      end_anchor: nil,
      remove_end_anchor: nil,
      remove_start_anchor: nil,
      start_anchor: nil
    )

    @type t :: %__MODULE__{
            case_sensitive: boolean | nil,
            display_settings: Docusign.DocumentHtmlDisplaySettings.t() | nil,
            end_anchor: binary | nil,
            remove_end_anchor: boolean | nil,
            remove_start_anchor: boolean | nil,
            start_anchor: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, case_sensitive} <-
          case(data["caseSensitive"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["caseSensitive"]}}
          end,
        {:ok, display_settings} <-
          Docusign.DocumentHtmlDisplaySettings.decode(data["displaySettings"]),
        {:ok, end_anchor} <-
          case(data["endAnchor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["endAnchor"]}}
          end,
        {:ok, remove_end_anchor} <-
          case(data["removeEndAnchor"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["removeEndAnchor"]}}
          end,
        {:ok, remove_start_anchor} <-
          case(data["removeStartAnchor"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["removeStartAnchor"]}}
          end,
        {:ok, start_anchor} <-
          case(data["startAnchor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["startAnchor"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           case_sensitive: case_sensitive,
           display_settings: display_settings,
           end_anchor: end_anchor,
           remove_end_anchor: remove_end_anchor,
           remove_start_anchor: remove_start_anchor,
           start_anchor: start_anchor
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["documentHtmlDisplayAnchor" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "caseSensitive" => data.case_sensitive,
        "displaySettings" => Docusign.DocumentHtmlDisplaySettings.encode(data.display_settings),
        "endAnchor" => data.end_anchor,
        "removeEndAnchor" => data.remove_end_anchor,
        "removeStartAnchor" => data.remove_start_anchor,
        "startAnchor" => data.start_anchor
      }
    end
  end

  defmodule(OfflineAttributes) do
    @moduledoc "#{nil}
    "
    defstruct([])
    @type t :: %__MODULE__{}
    @doc false
    def(decode(_)) do
      {:ok, %__MODULE__{}}
    end

    @doc false
    def(encode(_)) do
      %{}
    end
  end

  defmodule(Notarize) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["notarize" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(ConditionalRecipientRule) do
    @moduledoc "#{nil}
    "
    defstruct(conditions: nil, order: nil, recipient_group: nil, recipient_id: nil)

    @type t :: %__MODULE__{
            conditions: [Docusign.ConditionalRecipientRuleCondition.t()] | nil,
            order: binary | nil,
            recipient_group: Docusign.RecipientGroup.t() | nil,
            recipient_id: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, conditions} <-
          case(data["conditions"]) do
            nil ->
              nil

            _ ->
              data["conditions"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.ConditionalRecipientRuleCondition.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, order} <-
          case(data["order"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["order"]}}
          end,
        {:ok, recipient_group} <- Docusign.RecipientGroup.decode(data["recipientGroup"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           conditions: conditions,
           order: order,
           recipient_group: recipient_group,
           recipient_id: recipient_id
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["conditionalRecipientRule" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "conditions" =>
          case(data.conditions) do
            nil ->
              nil

            _ ->
              Enum.map(data.conditions, fn item ->
                Docusign.ConditionalRecipientRuleCondition.encode(item)
              end)
          end,
        "order" => data.order,
        "recipientGroup" => Docusign.RecipientGroup.encode(data.recipient_group),
        "recipientId" => data.recipient_id
      }
    end
  end

  defmodule(CommissionNumber) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["commissionNumber" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(EventResult) do
    @moduledoc "#{nil}
    "
    defstruct(
      event_timestamp: nil,
      failure_description: nil,
      status: nil,
      vendor_failure_status_code: nil
    )

    @type t :: %__MODULE__{
            event_timestamp: binary | nil,
            failure_description: binary | nil,
            status: binary | nil,
            vendor_failure_status_code: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, event_timestamp} <-
          case(data["eventTimestamp"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["eventTimestamp"]}}
          end,
        {:ok, failure_description} <-
          case(data["failureDescription"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["failureDescription"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, vendor_failure_status_code} <-
          case(data["vendorFailureStatusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["vendorFailureStatusCode"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           event_timestamp: event_timestamp,
           failure_description: failure_description,
           status: status,
           vendor_failure_status_code: vendor_failure_status_code
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["eventResult" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "eventTimestamp" => data.event_timestamp,
        "failureDescription" => data.failure_description,
        "status" => data.status,
        "vendorFailureStatusCode" => data.vendor_failure_status_code
      }
    end
  end

  defmodule(ListItem) do
    @moduledoc "#{nil}
    "
    defstruct(
      selected: nil,
      selected_metadata: nil,
      text: nil,
      text_metadata: nil,
      value: nil,
      value_metadata: nil
    )

    @type t :: %__MODULE__{
            selected: binary | nil,
            selected_metadata: Docusign.PropertyMetadata.t() | nil,
            text: binary | nil,
            text_metadata: Docusign.PropertyMetadata.t() | nil,
            value: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, selected} <-
          case(data["selected"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["selected"]}}
          end,
        {:ok, selected_metadata} <- Docusign.PropertyMetadata.decode(data["selectedMetadata"]),
        {:ok, text} <-
          case(data["text"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["text"]}}
          end,
        {:ok, text_metadata} <- Docusign.PropertyMetadata.decode(data["textMetadata"]),
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           selected: selected,
           selected_metadata: selected_metadata,
           text: text,
           text_metadata: text_metadata,
           value: value,
           value_metadata: value_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["listItem" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "selected" => data.selected,
        "selectedMetadata" => Docusign.PropertyMetadata.encode(data.selected_metadata),
        "text" => data.text,
        "textMetadata" => Docusign.PropertyMetadata.encode(data.text_metadata),
        "value" => data.value,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata)
      }
    end
  end

  defmodule(EnvelopeLocks) do
    @moduledoc "#{nil}
    "
    defstruct(
      error_details: nil,
      lock_duration_in_seconds: nil,
      lock_token: nil,
      lock_type: nil,
      locked_by_app: nil,
      locked_by_user: nil,
      locked_until_date_time: nil,
      use_scratch_pad: nil
    )

    @type t :: %__MODULE__{
            error_details: Docusign.ErrorDetails.t() | nil,
            lock_duration_in_seconds: binary | nil,
            lock_token: binary | nil,
            lock_type: binary | nil,
            locked_by_app: binary | nil,
            locked_by_user: Docusign.UserInfo.t() | nil,
            locked_until_date_time: binary | nil,
            use_scratch_pad: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, lock_duration_in_seconds} <-
          case(data["lockDurationInSeconds"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockDurationInSeconds"]}}
          end,
        {:ok, lock_token} <-
          case(data["lockToken"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockToken"]}}
          end,
        {:ok, lock_type} <-
          case(data["lockType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockType"]}}
          end,
        {:ok, locked_by_app} <-
          case(data["lockedByApp"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedByApp"]}}
          end,
        {:ok, locked_by_user} <- Docusign.UserInfo.decode(data["lockedByUser"]),
        {:ok, locked_until_date_time} <-
          case(data["lockedUntilDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedUntilDateTime"]}}
          end,
        {:ok, use_scratch_pad} <-
          case(data["useScratchPad"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["useScratchPad"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           error_details: error_details,
           lock_duration_in_seconds: lock_duration_in_seconds,
           lock_token: lock_token,
           lock_type: lock_type,
           locked_by_app: locked_by_app,
           locked_by_user: locked_by_user,
           locked_until_date_time: locked_until_date_time,
           use_scratch_pad: use_scratch_pad
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["EnvelopeLocks" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "lockDurationInSeconds" => data.lock_duration_in_seconds,
        "lockToken" => data.lock_token,
        "lockType" => data.lock_type,
        "lockedByApp" => data.locked_by_app,
        "lockedByUser" => Docusign.UserInfo.encode(data.locked_by_user),
        "lockedUntilDateTime" => data.locked_until_date_time,
        "useScratchPad" => data.use_scratch_pad
      }
    end
  end

  defmodule(RecipientRouting) do
    @moduledoc "#{nil}
    "
    defstruct(rules: nil)
    @type t :: %__MODULE__{rules: Docusign.RecipientRules.t() | nil}
    @doc false
    def(decode(data)) do
      with({:ok, rules} <- Docusign.RecipientRules.decode(data["rules"])) do
        {:ok, %__MODULE__{rules: rules}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientRouting" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"rules" => Docusign.RecipientRules.encode(data.rules)}
    end
  end

  defmodule(PaymentLineItem) do
    @moduledoc "#{nil}
    "
    defstruct(amount_reference: nil, description: nil, item_code: nil, name: nil)

    @type t :: %__MODULE__{
            amount_reference: binary | nil,
            description: binary | nil,
            item_code: binary | nil,
            name: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, amount_reference} <-
          case(data["amountReference"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["amountReference"]}}
          end,
        {:ok, description} <-
          case(data["description"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["description"]}}
          end,
        {:ok, item_code} <-
          case(data["itemCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["itemCode"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           amount_reference: amount_reference,
           description: description,
           item_code: item_code,
           name: name
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["paymentLineItem" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "amountReference" => data.amount_reference,
        "description" => data.description,
        "itemCode" => data.item_code,
        "name" => data.name
      }
    end
  end

  defmodule(PropertyMetadata) do
    @moduledoc "#{nil}
    "
    defstruct(options: nil, rights: nil)
    @type t :: %__MODULE__{options: [binary] | nil, rights: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, options} <-
          case(data["options"]) do
            nil ->
              nil

            _ ->
              data["options"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, rights} <-
          case(data["rights"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["rights"]}}
          end
      ) do
        {:ok, %__MODULE__{options: options, rights: rights}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["propertyMetadata" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "options" =>
          case(data.options) do
            nil ->
              nil

            _ ->
              Enum.map(data.options, fn item -> item end)
          end,
        "rights" => data.rights
      }
    end
  end

  defmodule(Approve) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      font_size: nil,
      height: nil,
      font: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      button_text_metadata: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      button_text: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            button_text_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            button_text: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, button_text_metadata} <-
          Docusign.PropertyMetadata.decode(data["buttonTextMetadata"]),
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, button_text} <-
          case(data["buttonText"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["buttonText"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           font_size: font_size,
           height: height,
           font: font,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           button_text_metadata: button_text_metadata,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           button_text: button_text
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["approve" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "buttonTextMetadata" => Docusign.PropertyMetadata.encode(data.button_text_metadata),
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "buttonText" => data.button_text
      }
    end
  end

  defmodule(TextCustomField) do
    @moduledoc "#{nil}
    "
    defstruct(
      configuration_type: nil,
      error_details: nil,
      field_id: nil,
      name: nil,
      required: nil,
      show: nil,
      value: nil
    )

    @type t :: %__MODULE__{
            configuration_type: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            field_id: binary | nil,
            name: binary | nil,
            required: binary | nil,
            show: binary | nil,
            value: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, configuration_type} <-
          case(data["configurationType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["configurationType"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, field_id} <-
          case(data["fieldId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fieldId"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, show} <-
          case(data["show"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["show"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           configuration_type: configuration_type,
           error_details: error_details,
           field_id: field_id,
           name: name,
           required: required,
           show: show,
           value: value
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["textCustomField" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "configurationType" => data.configuration_type,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "fieldId" => data.field_id,
        "name" => data.name,
        "required" => data.required,
        "show" => data.show,
        "value" => data.value
      }
    end
  end

  defmodule(Filter) do
    @moduledoc "#{nil}
    "
    defstruct(
      action_required: nil,
      expires: nil,
      folder_ids: nil,
      from_date_time: nil,
      is_template: nil,
      order: nil,
      order_by: nil,
      search_target: nil,
      search_text: nil,
      status: nil,
      to_date_time: nil
    )

    @type t :: %__MODULE__{
            action_required: binary | nil,
            expires: binary | nil,
            folder_ids: binary | nil,
            from_date_time: binary | nil,
            is_template: binary | nil,
            order: binary | nil,
            order_by: binary | nil,
            search_target: binary | nil,
            search_text: binary | nil,
            status: binary | nil,
            to_date_time: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, action_required} <-
          case(data["actionRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["actionRequired"]}}
          end,
        {:ok, expires} <-
          case(data["expires"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["expires"]}}
          end,
        {:ok, folder_ids} <-
          case(data["folderIds"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["folderIds"]}}
          end,
        {:ok, from_date_time} <-
          case(data["fromDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fromDateTime"]}}
          end,
        {:ok, is_template} <-
          case(data["isTemplate"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isTemplate"]}}
          end,
        {:ok, order} <-
          case(data["order"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["order"]}}
          end,
        {:ok, order_by} <-
          case(data["orderBy"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["orderBy"]}}
          end,
        {:ok, search_target} <-
          case(data["searchTarget"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["searchTarget"]}}
          end,
        {:ok, search_text} <-
          case(data["searchText"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["searchText"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, to_date_time} <-
          case(data["toDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["toDateTime"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           action_required: action_required,
           expires: expires,
           folder_ids: folder_ids,
           from_date_time: from_date_time,
           is_template: is_template,
           order: order,
           order_by: order_by,
           search_target: search_target,
           search_text: search_text,
           status: status,
           to_date_time: to_date_time
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["filter" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "actionRequired" => data.action_required,
        "expires" => data.expires,
        "folderIds" => data.folder_ids,
        "fromDateTime" => data.from_date_time,
        "isTemplate" => data.is_template,
        "order" => data.order,
        "orderBy" => data.order_by,
        "searchTarget" => data.search_target,
        "searchText" => data.search_text,
        "status" => data.status,
        "toDateTime" => data.to_date_time
      }
    end
  end

  defmodule(EnvelopeMetadata) do
    @moduledoc "#{nil}
    "
    defstruct(allow_advanced_correct: nil, allow_correct: nil, enable_sign_with_notary: nil)

    @type t :: %__MODULE__{
            allow_advanced_correct: binary | nil,
            allow_correct: binary | nil,
            enable_sign_with_notary: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, allow_advanced_correct} <-
          case(data["allowAdvancedCorrect"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowAdvancedCorrect"]}}
          end,
        {:ok, allow_correct} <-
          case(data["allowCorrect"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowCorrect"]}}
          end,
        {:ok, enable_sign_with_notary} <-
          case(data["enableSignWithNotary"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["enableSignWithNotary"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           allow_advanced_correct: allow_advanced_correct,
           allow_correct: allow_correct,
           enable_sign_with_notary: enable_sign_with_notary
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["envelopeMetadata" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "allowAdvancedCorrect" => data.allow_advanced_correct,
        "allowCorrect" => data.allow_correct,
        "enableSignWithNotary" => data.enable_sign_with_notary
      }
    end
  end

  defmodule(SocialAuthentication) do
    @moduledoc "#{nil}
    "
    defstruct(authentication: nil)
    @type t :: %__MODULE__{authentication: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, authentication} <-
          case(data["authentication"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["authentication"]}}
          end
      ) do
        {:ok, %__MODULE__{authentication: authentication}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["socialAuthentication" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"authentication" => data.authentication}
    end
  end

  defmodule(RecipientSignatureInformation) do
    @moduledoc "#{nil}
    "
    defstruct(font_style: nil, signature_initials: nil, signature_name: nil)

    @type t :: %__MODULE__{
            font_style: binary | nil,
            signature_initials: binary | nil,
            signature_name: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, font_style} <-
          case(data["fontStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontStyle"]}}
          end,
        {:ok, signature_initials} <-
          case(data["signatureInitials"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signatureInitials"]}}
          end,
        {:ok, signature_name} <-
          case(data["signatureName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signatureName"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           font_style: font_style,
           signature_initials: signature_initials,
           signature_name: signature_name
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientSignatureInformation" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "fontStyle" => data.font_style,
        "signatureInitials" => data.signature_initials,
        "signatureName" => data.signature_name
      }
    end
  end

  defmodule(DocumentHtmlCollapsibleDisplaySettings) do
    @moduledoc "#{nil}
    "
    defstruct(
      arrow_closed: nil,
      arrow_color: nil,
      arrow_location: nil,
      arrow_open: nil,
      arrow_size: nil,
      arrow_style: nil,
      container_style: nil,
      label_style: nil,
      only_arrow_is_clickable: nil,
      outer_label_and_arrow_style: nil
    )

    @type t :: %__MODULE__{
            arrow_closed: binary | nil,
            arrow_color: binary | nil,
            arrow_location: binary | nil,
            arrow_open: binary | nil,
            arrow_size: binary | nil,
            arrow_style: binary | nil,
            container_style: binary | nil,
            label_style: binary | nil,
            only_arrow_is_clickable: boolean | nil,
            outer_label_and_arrow_style: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, arrow_closed} <-
          case(data["arrowClosed"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowClosed"]}}
          end,
        {:ok, arrow_color} <-
          case(data["arrowColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowColor"]}}
          end,
        {:ok, arrow_location} <-
          case(data["arrowLocation"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowLocation"]}}
          end,
        {:ok, arrow_open} <-
          case(data["arrowOpen"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowOpen"]}}
          end,
        {:ok, arrow_size} <-
          case(data["arrowSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowSize"]}}
          end,
        {:ok, arrow_style} <-
          case(data["arrowStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["arrowStyle"]}}
          end,
        {:ok, container_style} <-
          case(data["containerStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["containerStyle"]}}
          end,
        {:ok, label_style} <-
          case(data["labelStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["labelStyle"]}}
          end,
        {:ok, only_arrow_is_clickable} <-
          case(data["onlyArrowIsClickable"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["onlyArrowIsClickable"]}}
          end,
        {:ok, outer_label_and_arrow_style} <-
          case(data["outerLabelAndArrowStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["outerLabelAndArrowStyle"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           arrow_closed: arrow_closed,
           arrow_color: arrow_color,
           arrow_location: arrow_location,
           arrow_open: arrow_open,
           arrow_size: arrow_size,
           arrow_style: arrow_style,
           container_style: container_style,
           label_style: label_style,
           only_arrow_is_clickable: only_arrow_is_clickable,
           outer_label_and_arrow_style: outer_label_and_arrow_style
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["documentHtmlCollapsibleDisplaySettings" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "arrowClosed" => data.arrow_closed,
        "arrowColor" => data.arrow_color,
        "arrowLocation" => data.arrow_location,
        "arrowOpen" => data.arrow_open,
        "arrowSize" => data.arrow_size,
        "arrowStyle" => data.arrow_style,
        "containerStyle" => data.container_style,
        "labelStyle" => data.label_style,
        "onlyArrowIsClickable" => data.only_arrow_is_clickable,
        "outerLabelAndArrowStyle" => data.outer_label_and_arrow_style
      }
    end
  end

  defmodule(SealSign) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      require_id_lookup_metadata: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      social_authentications: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      allow_system_override_for_locked_recipient: nil,
      delivery_method_metadata: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      custom_fields: nil,
      embedded_recipient_start_url: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      recipient_signature_providers: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      identity_verification: nil,
      tabs: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      require_id_lookup: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      fax_number_metadata: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            custom_fields: [binary] | nil,
            embedded_recipient_start_url: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_signature_providers: [Docusign.RecipientSignatureProvider.t()] | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            require_id_lookup: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, recipient_signature_providers} <-
          case(data["recipientSignatureProviders"]) do
            nil ->
              nil

            _ ->
              data["recipientSignatureProviders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientSignatureProvider.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           require_id_lookup_metadata: require_id_lookup_metadata,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           social_authentications: social_authentications,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           delivery_method_metadata: delivery_method_metadata,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           custom_fields: custom_fields,
           embedded_recipient_start_url: embedded_recipient_start_url,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           recipient_signature_providers: recipient_signature_providers,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           identity_verification: identity_verification,
           tabs: tabs,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           require_id_lookup: require_id_lookup,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           fax_number_metadata: fax_number_metadata,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["sealSign" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "recipientSignatureProviders" =>
          case(data.recipient_signature_providers) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_signature_providers, fn item ->
                Docusign.RecipientSignatureProvider.encode(item)
              end)
          end,
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "requireIdLookup" => data.require_id_lookup,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end
      }
    end
  end

  defmodule(Text) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      validation_pattern: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      validation_pattern_metadata: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      formula: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      formula_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_pattern: binary | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            validation_pattern_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            formula: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            formula_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, validation_pattern} <-
          case(data["validationPattern"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationPattern"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, validation_pattern_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationPatternMetadata"]),
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, formula} <-
          case(data["formula"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formula"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, formula_metadata} <- Docusign.PropertyMetadata.decode(data["formulaMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           validation_pattern: validation_pattern,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           validation_pattern_metadata: validation_pattern_metadata,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           formula: formula,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           formula_metadata: formula_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["text" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "validationPattern" => data.validation_pattern,
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "validationPatternMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_pattern_metadata),
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "formula" => data.formula,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "formulaMetadata" => Docusign.PropertyMetadata.encode(data.formula_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(BulkEnvelope) do
    @moduledoc "#{nil}
    "
    defstruct(
      bulk_recipient_row: nil,
      bulk_status: nil,
      email: nil,
      envelope_id: nil,
      envelope_uri: nil,
      error_details: nil,
      name: nil,
      submitted_date_time: nil,
      transaction_id: nil
    )

    @type t :: %__MODULE__{
            bulk_recipient_row: binary | nil,
            bulk_status: binary | nil,
            email: binary | nil,
            envelope_id: binary | nil,
            envelope_uri: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            name: binary | nil,
            submitted_date_time: binary | nil,
            transaction_id: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, bulk_recipient_row} <-
          case(data["bulkRecipientRow"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bulkRecipientRow"]}}
          end,
        {:ok, bulk_status} <-
          case(data["bulkStatus"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bulkStatus"]}}
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, envelope_id} <-
          case(data["envelopeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeId"]}}
          end,
        {:ok, envelope_uri} <-
          case(data["envelopeUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["envelopeUri"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, submitted_date_time} <-
          case(data["submittedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["submittedDateTime"]}}
          end,
        {:ok, transaction_id} <-
          case(data["transactionId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["transactionId"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           bulk_recipient_row: bulk_recipient_row,
           bulk_status: bulk_status,
           email: email,
           envelope_id: envelope_id,
           envelope_uri: envelope_uri,
           error_details: error_details,
           name: name,
           submitted_date_time: submitted_date_time,
           transaction_id: transaction_id
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["bulkEnvelope" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "bulkRecipientRow" => data.bulk_recipient_row,
        "bulkStatus" => data.bulk_status,
        "email" => data.email,
        "envelopeId" => data.envelope_id,
        "envelopeUri" => data.envelope_uri,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "name" => data.name,
        "submittedDateTime" => data.submitted_date_time,
        "transactionId" => data.transaction_id
      }
    end
  end

  defmodule(AddressInformation) do
    @moduledoc "#{nil}
    "
    defstruct(
      address1: nil,
      address2: nil,
      city: nil,
      country: nil,
      fax: nil,
      phone: nil,
      postal_code: nil,
      state_or_province: nil,
      zip_plus4: nil
    )

    @type t :: %__MODULE__{
            address1: binary | nil,
            address2: binary | nil,
            city: binary | nil,
            country: binary | nil,
            fax: binary | nil,
            phone: binary | nil,
            postal_code: binary | nil,
            state_or_province: binary | nil,
            zip_plus4: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, address1} <-
          case(data["address1"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["address1"]}}
          end,
        {:ok, address2} <-
          case(data["address2"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["address2"]}}
          end,
        {:ok, city} <-
          case(data["city"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["city"]}}
          end,
        {:ok, country} <-
          case(data["country"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["country"]}}
          end,
        {:ok, fax} <-
          case(data["fax"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fax"]}}
          end,
        {:ok, phone} <-
          case(data["phone"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["phone"]}}
          end,
        {:ok, postal_code} <-
          case(data["postalCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["postalCode"]}}
          end,
        {:ok, state_or_province} <-
          case(data["stateOrProvince"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["stateOrProvince"]}}
          end,
        {:ok, zip_plus4} <-
          case(data["zipPlus4"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["zipPlus4"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           address1: address1,
           address2: address2,
           city: city,
           country: country,
           fax: fax,
           phone: phone,
           postal_code: postal_code,
           state_or_province: state_or_province,
           zip_plus4: zip_plus4
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["addressInformation" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "address1" => data.address1,
        "address2" => data.address2,
        "city" => data.city,
        "country" => data.country,
        "fax" => data.fax,
        "phone" => data.phone,
        "postalCode" => data.postal_code,
        "stateOrProvince" => data.state_or_province,
        "zipPlus4" => data.zip_plus4
      }
    end
  end

  defmodule(SenderCompany) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["senderCompany" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(InlineTemplate) do
    @moduledoc "#{nil}
    "
    defstruct(custom_fields: nil, documents: nil, envelope: nil, recipients: nil, sequence: nil)

    @type t :: %__MODULE__{
            custom_fields: Docusign.AccountCustomFields.t() | nil,
            documents: [Docusign.Document.t()] | nil,
            envelope: Docusign.Envelope.t() | nil,
            recipients: Docusign.EnvelopeRecipients.t() | nil,
            sequence: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, custom_fields} <- Docusign.AccountCustomFields.decode(data["customFields"]),
        {:ok, documents} <-
          case(data["documents"]) do
            nil ->
              nil

            _ ->
              data["documents"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Document.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, envelope} <- Docusign.Envelope.decode(data["envelope"]),
        {:ok, recipients} <- Docusign.EnvelopeRecipients.decode(data["recipients"]),
        {:ok, sequence} <-
          case(data["sequence"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sequence"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           custom_fields: custom_fields,
           documents: documents,
           envelope: envelope,
           recipients: recipients,
           sequence: sequence
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["inlineTemplate" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "customFields" => Docusign.AccountCustomFields.encode(data.custom_fields),
        "documents" =>
          case(data.documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.documents, fn item -> Docusign.Document.encode(item) end)
          end,
        "envelope" => Docusign.Envelope.encode(data.envelope),
        "recipients" => Docusign.EnvelopeRecipients.encode(data.recipients),
        "sequence" => data.sequence
      }
    end
  end

  defmodule(DateSigned) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["dateSigned" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(Currency) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      numerical_value: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            numerical_value: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, numerical_value} <-
          case(data["numericalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["numericalValue"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           numerical_value: numerical_value
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["currency" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "numericalValue" => data.numerical_value
      }
    end
  end

  defmodule(RecipientGroup) do
    @moduledoc "#{nil}
    "
    defstruct(group_message: nil, group_name: nil, recipients: nil)

    @type t :: %__MODULE__{
            group_message: binary | nil,
            group_name: binary | nil,
            recipients: [Docusign.RecipientOption.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, group_message} <-
          case(data["groupMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["groupMessage"]}}
          end,
        {:ok, group_name} <-
          case(data["groupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["groupName"]}}
          end,
        {:ok, recipients} <-
          case(data["recipients"]) do
            nil ->
              nil

            _ ->
              data["recipients"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientOption.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{group_message: group_message, group_name: group_name, recipients: recipients}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientGroup" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "groupMessage" => data.group_message,
        "groupName" => data.group_name,
        "recipients" =>
          case(data.recipients) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipients, fn item -> Docusign.RecipientOption.encode(item) end)
          end
      }
    end
  end

  defmodule(FeatureAvailableMetadata) do
    @moduledoc "#{nil}
    "
    defstruct(availabilty: nil, feature_name: nil)
    @type t :: %__MODULE__{availabilty: binary | nil, feature_name: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, availabilty} <-
          case(data["availabilty"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["availabilty"]}}
          end,
        {:ok, feature_name} <-
          case(data["featureName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["featureName"]}}
          end
      ) do
        {:ok, %__MODULE__{availabilty: availabilty, feature_name: feature_name}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["featureAvailableMetadata" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"availabilty" => data.availabilty, "featureName" => data.feature_name}
    end
  end

  defmodule(InitialHere) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      optional_metadata: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      height: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      scale_value_metadata: nil,
      tab_id_metadata: nil,
      scale_value: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      anchor_ignore_if_not_present_metadata: nil,
      optional: nil,
      y_position: nil,
      hand_draw_required: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            optional_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            height: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            scale_value: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            optional: binary | nil,
            y_position: binary | nil,
            hand_draw_required: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, optional_metadata} <- Docusign.PropertyMetadata.decode(data["optionalMetadata"]),
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, scale_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["scaleValueMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, scale_value} <-
          case(data["scaleValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["scaleValue"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, optional} <-
          case(data["optional"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["optional"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, hand_draw_required} <-
          case(data["handDrawRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["handDrawRequired"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           optional_metadata: optional_metadata,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           height: height,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           scale_value_metadata: scale_value_metadata,
           tab_id_metadata: tab_id_metadata,
           scale_value: scale_value,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           optional: optional,
           y_position: y_position,
           hand_draw_required: hand_draw_required,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["initialHere" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "optionalMetadata" => Docusign.PropertyMetadata.encode(data.optional_metadata),
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "height" => data.height,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "scaleValueMetadata" => Docusign.PropertyMetadata.encode(data.scale_value_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "scaleValue" => data.scale_value,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "optional" => data.optional,
        "yPosition" => data.y_position,
        "handDrawRequired" => data.hand_draw_required,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(PhoneNumber) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["phoneNumber" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(MatchBox) do
    @moduledoc "#{nil}
    "
    defstruct(height: nil, page_number: nil, width: nil, x_position: nil, y_position: nil)

    @type t :: %__MODULE__{
            height: binary | nil,
            page_number: binary | nil,
            width: binary | nil,
            x_position: binary | nil,
            y_position: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           height: height,
           page_number: page_number,
           width: width,
           x_position: x_position,
           y_position: y_position
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["matchBox" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "height" => data.height,
        "pageNumber" => data.page_number,
        "width" => data.width,
        "xPosition" => data.x_position,
        "yPosition" => data.y_position
      }
    end
  end

  defmodule(EnvelopeRecipientTabs) do
    @moduledoc "#{nil}
    "
    defstruct(
      checkbox_tabs: nil,
      notary_seal_tabs: nil,
      company_tabs: nil,
      last_name_tabs: nil,
      commission_county_tabs: nil,
      formula_tabs: nil,
      approve_tabs: nil,
      tab_groups: nil,
      commission_expiration_tabs: nil,
      list_tabs: nil,
      initial_here_tabs: nil,
      number_tabs: nil,
      radio_group_tabs: nil,
      email_address_tabs: nil,
      sign_here_tabs: nil,
      zip_tabs: nil,
      date_tabs: nil,
      phone_number_tabs: nil,
      comment_thread_tabs: nil,
      smart_section_tabs: nil,
      decline_tabs: nil,
      notarize_tabs: nil,
      signer_attachment_tabs: nil,
      view_tabs: nil,
      envelope_id_tabs: nil,
      commission_state_tabs: nil,
      email_tabs: nil,
      commission_number_tabs: nil,
      text_tabs: nil,
      prefill_tabs: nil,
      date_signed_tabs: nil,
      note_tabs: nil,
      draw_tabs: nil,
      full_name_tabs: nil,
      title_tabs: nil,
      ssn_tabs: nil,
      poly_line_overlay_tabs: nil,
      currency_tabs: nil,
      first_name_tabs: nil
    )

    @type t :: %__MODULE__{
            checkbox_tabs: [Docusign.Checkbox.t()] | nil,
            notary_seal_tabs: [Docusign.NotarySeal.t()] | nil,
            company_tabs: [Docusign.Company.t()] | nil,
            last_name_tabs: [Docusign.LastName.t()] | nil,
            commission_county_tabs: [Docusign.CommissionCounty.t()] | nil,
            formula_tabs: [Docusign.FormulaTab.t()] | nil,
            approve_tabs: [Docusign.Approve.t()] | nil,
            tab_groups: [Docusign.TabGroup.t()] | nil,
            commission_expiration_tabs: [Docusign.CommissionExpiration.t()] | nil,
            list_tabs: [Docusign.List.t()] | nil,
            initial_here_tabs: [Docusign.InitialHere.t()] | nil,
            number_tabs: [Docusign.Number.t()] | nil,
            radio_group_tabs: [Docusign.RadioGroup.t()] | nil,
            email_address_tabs: [Docusign.EmailAddress.t()] | nil,
            sign_here_tabs: [Docusign.SignHere.t()] | nil,
            zip_tabs: [Docusign.Zip.t()] | nil,
            date_tabs: [Docusign.Date.t()] | nil,
            phone_number_tabs: [Docusign.PhoneNumber.t()] | nil,
            comment_thread_tabs: [Docusign.CommentThread.t()] | nil,
            smart_section_tabs: [Docusign.SmartSection.t()] | nil,
            decline_tabs: [Docusign.Decline.t()] | nil,
            notarize_tabs: [Docusign.Notarize.t()] | nil,
            signer_attachment_tabs: [Docusign.SignerAttachment.t()] | nil,
            view_tabs: [Docusign.View.t()] | nil,
            envelope_id_tabs: [Docusign.EnvelopeId.t()] | nil,
            commission_state_tabs: [Docusign.CommissionState.t()] | nil,
            email_tabs: [Docusign.Email.t()] | nil,
            commission_number_tabs: [Docusign.CommissionNumber.t()] | nil,
            text_tabs: [Docusign.Text.t()] | nil,
            prefill_tabs: Docusign.PrefillTabs.t() | nil,
            date_signed_tabs: [Docusign.DateSigned.t()] | nil,
            note_tabs: [Docusign.Note.t()] | nil,
            draw_tabs: [Docusign.Draw.t()] | nil,
            full_name_tabs: [Docusign.FullName.t()] | nil,
            title_tabs: [Docusign.Title.t()] | nil,
            ssn_tabs: [Docusign.Ssn.t()] | nil,
            poly_line_overlay_tabs: [Docusign.PolyLineOverlay.t()] | nil,
            currency_tabs: [Docusign.Currency.t()] | nil,
            first_name_tabs: [Docusign.FirstName.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, checkbox_tabs} <-
          case(data["checkboxTabs"]) do
            nil ->
              nil

            _ ->
              data["checkboxTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Checkbox.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, notary_seal_tabs} <-
          case(data["notarySealTabs"]) do
            nil ->
              nil

            _ ->
              data["notarySealTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.NotarySeal.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, company_tabs} <-
          case(data["companyTabs"]) do
            nil ->
              nil

            _ ->
              data["companyTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Company.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, last_name_tabs} <-
          case(data["lastNameTabs"]) do
            nil ->
              nil

            _ ->
              data["lastNameTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.LastName.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, commission_county_tabs} <-
          case(data["commissionCountyTabs"]) do
            nil ->
              nil

            _ ->
              data["commissionCountyTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CommissionCounty.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, formula_tabs} <-
          case(data["formulaTabs"]) do
            nil ->
              nil

            _ ->
              data["formulaTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FormulaTab.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, approve_tabs} <-
          case(data["approveTabs"]) do
            nil ->
              nil

            _ ->
              data["approveTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Approve.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, tab_groups} <-
          case(data["tabGroups"]) do
            nil ->
              nil

            _ ->
              data["tabGroups"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.TabGroup.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, commission_expiration_tabs} <-
          case(data["commissionExpirationTabs"]) do
            nil ->
              nil

            _ ->
              data["commissionExpirationTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CommissionExpiration.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, list_tabs} <-
          case(data["listTabs"]) do
            nil ->
              nil

            _ ->
              data["listTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.List.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, initial_here_tabs} <-
          case(data["initialHereTabs"]) do
            nil ->
              nil

            _ ->
              data["initialHereTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.InitialHere.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, number_tabs} <-
          case(data["numberTabs"]) do
            nil ->
              nil

            _ ->
              data["numberTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Number.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, radio_group_tabs} <-
          case(data["radioGroupTabs"]) do
            nil ->
              nil

            _ ->
              data["radioGroupTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RadioGroup.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email_address_tabs} <-
          case(data["emailAddressTabs"]) do
            nil ->
              nil

            _ ->
              data["emailAddressTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.EmailAddress.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, sign_here_tabs} <-
          case(data["signHereTabs"]) do
            nil ->
              nil

            _ ->
              data["signHereTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SignHere.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, zip_tabs} <-
          case(data["zipTabs"]) do
            nil ->
              nil

            _ ->
              data["zipTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Zip.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, date_tabs} <-
          case(data["dateTabs"]) do
            nil ->
              nil

            _ ->
              data["dateTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Date.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, phone_number_tabs} <-
          case(data["phoneNumberTabs"]) do
            nil ->
              nil

            _ ->
              data["phoneNumberTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.PhoneNumber.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, comment_thread_tabs} <-
          case(data["commentThreadTabs"]) do
            nil ->
              nil

            _ ->
              data["commentThreadTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CommentThread.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, smart_section_tabs} <-
          case(data["smartSectionTabs"]) do
            nil ->
              nil

            _ ->
              data["smartSectionTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SmartSection.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, decline_tabs} <-
          case(data["declineTabs"]) do
            nil ->
              nil

            _ ->
              data["declineTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Decline.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, notarize_tabs} <-
          case(data["notarizeTabs"]) do
            nil ->
              nil

            _ ->
              data["notarizeTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Notarize.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signer_attachment_tabs} <-
          case(data["signerAttachmentTabs"]) do
            nil ->
              nil

            _ ->
              data["signerAttachmentTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SignerAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, view_tabs} <-
          case(data["viewTabs"]) do
            nil ->
              nil

            _ ->
              data["viewTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.View.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, envelope_id_tabs} <-
          case(data["envelopeIdTabs"]) do
            nil ->
              nil

            _ ->
              data["envelopeIdTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.EnvelopeId.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, commission_state_tabs} <-
          case(data["commissionStateTabs"]) do
            nil ->
              nil

            _ ->
              data["commissionStateTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CommissionState.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email_tabs} <-
          case(data["emailTabs"]) do
            nil ->
              nil

            _ ->
              data["emailTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Email.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, commission_number_tabs} <-
          case(data["commissionNumberTabs"]) do
            nil ->
              nil

            _ ->
              data["commissionNumberTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.CommissionNumber.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, text_tabs} <-
          case(data["textTabs"]) do
            nil ->
              nil

            _ ->
              data["textTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Text.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, prefill_tabs} <- Docusign.PrefillTabs.decode(data["prefillTabs"]),
        {:ok, date_signed_tabs} <-
          case(data["dateSignedTabs"]) do
            nil ->
              nil

            _ ->
              data["dateSignedTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DateSigned.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, note_tabs} <-
          case(data["noteTabs"]) do
            nil ->
              nil

            _ ->
              data["noteTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Note.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, draw_tabs} <-
          case(data["drawTabs"]) do
            nil ->
              nil

            _ ->
              data["drawTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Draw.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, full_name_tabs} <-
          case(data["fullNameTabs"]) do
            nil ->
              nil

            _ ->
              data["fullNameTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FullName.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, title_tabs} <-
          case(data["titleTabs"]) do
            nil ->
              nil

            _ ->
              data["titleTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Title.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, ssn_tabs} <-
          case(data["ssnTabs"]) do
            nil ->
              nil

            _ ->
              data["ssnTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Ssn.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, poly_line_overlay_tabs} <-
          case(data["polyLineOverlayTabs"]) do
            nil ->
              nil

            _ ->
              data["polyLineOverlayTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.PolyLineOverlay.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, currency_tabs} <-
          case(data["currencyTabs"]) do
            nil ->
              nil

            _ ->
              data["currencyTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Currency.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, first_name_tabs} <-
          case(data["firstNameTabs"]) do
            nil ->
              nil

            _ ->
              data["firstNameTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FirstName.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           checkbox_tabs: checkbox_tabs,
           notary_seal_tabs: notary_seal_tabs,
           company_tabs: company_tabs,
           last_name_tabs: last_name_tabs,
           commission_county_tabs: commission_county_tabs,
           formula_tabs: formula_tabs,
           approve_tabs: approve_tabs,
           tab_groups: tab_groups,
           commission_expiration_tabs: commission_expiration_tabs,
           list_tabs: list_tabs,
           initial_here_tabs: initial_here_tabs,
           number_tabs: number_tabs,
           radio_group_tabs: radio_group_tabs,
           email_address_tabs: email_address_tabs,
           sign_here_tabs: sign_here_tabs,
           zip_tabs: zip_tabs,
           date_tabs: date_tabs,
           phone_number_tabs: phone_number_tabs,
           comment_thread_tabs: comment_thread_tabs,
           smart_section_tabs: smart_section_tabs,
           decline_tabs: decline_tabs,
           notarize_tabs: notarize_tabs,
           signer_attachment_tabs: signer_attachment_tabs,
           view_tabs: view_tabs,
           envelope_id_tabs: envelope_id_tabs,
           commission_state_tabs: commission_state_tabs,
           email_tabs: email_tabs,
           commission_number_tabs: commission_number_tabs,
           text_tabs: text_tabs,
           prefill_tabs: prefill_tabs,
           date_signed_tabs: date_signed_tabs,
           note_tabs: note_tabs,
           draw_tabs: draw_tabs,
           full_name_tabs: full_name_tabs,
           title_tabs: title_tabs,
           ssn_tabs: ssn_tabs,
           poly_line_overlay_tabs: poly_line_overlay_tabs,
           currency_tabs: currency_tabs,
           first_name_tabs: first_name_tabs
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["EnvelopeRecipientTabs" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "checkboxTabs" =>
          case(data.checkbox_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.checkbox_tabs, fn item -> Docusign.Checkbox.encode(item) end)
          end,
        "notarySealTabs" =>
          case(data.notary_seal_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.notary_seal_tabs, fn item -> Docusign.NotarySeal.encode(item) end)
          end,
        "companyTabs" =>
          case(data.company_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.company_tabs, fn item -> Docusign.Company.encode(item) end)
          end,
        "lastNameTabs" =>
          case(data.last_name_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.last_name_tabs, fn item -> Docusign.LastName.encode(item) end)
          end,
        "commissionCountyTabs" =>
          case(data.commission_county_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.commission_county_tabs, fn item ->
                Docusign.CommissionCounty.encode(item)
              end)
          end,
        "formulaTabs" =>
          case(data.formula_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.formula_tabs, fn item -> Docusign.FormulaTab.encode(item) end)
          end,
        "approveTabs" =>
          case(data.approve_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.approve_tabs, fn item -> Docusign.Approve.encode(item) end)
          end,
        "tabGroups" =>
          case(data.tab_groups) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_groups, fn item -> Docusign.TabGroup.encode(item) end)
          end,
        "commissionExpirationTabs" =>
          case(data.commission_expiration_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.commission_expiration_tabs, fn item ->
                Docusign.CommissionExpiration.encode(item)
              end)
          end,
        "listTabs" =>
          case(data.list_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.list_tabs, fn item -> Docusign.List.encode(item) end)
          end,
        "initialHereTabs" =>
          case(data.initial_here_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.initial_here_tabs, fn item -> Docusign.InitialHere.encode(item) end)
          end,
        "numberTabs" =>
          case(data.number_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.number_tabs, fn item -> Docusign.Number.encode(item) end)
          end,
        "radioGroupTabs" =>
          case(data.radio_group_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.radio_group_tabs, fn item -> Docusign.RadioGroup.encode(item) end)
          end,
        "emailAddressTabs" =>
          case(data.email_address_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.email_address_tabs, fn item -> Docusign.EmailAddress.encode(item) end)
          end,
        "signHereTabs" =>
          case(data.sign_here_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.sign_here_tabs, fn item -> Docusign.SignHere.encode(item) end)
          end,
        "zipTabs" =>
          case(data.zip_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.zip_tabs, fn item -> Docusign.Zip.encode(item) end)
          end,
        "dateTabs" =>
          case(data.date_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.date_tabs, fn item -> Docusign.Date.encode(item) end)
          end,
        "phoneNumberTabs" =>
          case(data.phone_number_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.phone_number_tabs, fn item -> Docusign.PhoneNumber.encode(item) end)
          end,
        "commentThreadTabs" =>
          case(data.comment_thread_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.comment_thread_tabs, fn item ->
                Docusign.CommentThread.encode(item)
              end)
          end,
        "smartSectionTabs" =>
          case(data.smart_section_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.smart_section_tabs, fn item -> Docusign.SmartSection.encode(item) end)
          end,
        "declineTabs" =>
          case(data.decline_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.decline_tabs, fn item -> Docusign.Decline.encode(item) end)
          end,
        "notarizeTabs" =>
          case(data.notarize_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.notarize_tabs, fn item -> Docusign.Notarize.encode(item) end)
          end,
        "signerAttachmentTabs" =>
          case(data.signer_attachment_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.signer_attachment_tabs, fn item ->
                Docusign.SignerAttachment.encode(item)
              end)
          end,
        "viewTabs" =>
          case(data.view_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.view_tabs, fn item -> Docusign.View.encode(item) end)
          end,
        "envelopeIdTabs" =>
          case(data.envelope_id_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.envelope_id_tabs, fn item -> Docusign.EnvelopeId.encode(item) end)
          end,
        "commissionStateTabs" =>
          case(data.commission_state_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.commission_state_tabs, fn item ->
                Docusign.CommissionState.encode(item)
              end)
          end,
        "emailTabs" =>
          case(data.email_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.email_tabs, fn item -> Docusign.Email.encode(item) end)
          end,
        "commissionNumberTabs" =>
          case(data.commission_number_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.commission_number_tabs, fn item ->
                Docusign.CommissionNumber.encode(item)
              end)
          end,
        "textTabs" =>
          case(data.text_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.text_tabs, fn item -> Docusign.Text.encode(item) end)
          end,
        "prefillTabs" => Docusign.PrefillTabs.encode(data.prefill_tabs),
        "dateSignedTabs" =>
          case(data.date_signed_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.date_signed_tabs, fn item -> Docusign.DateSigned.encode(item) end)
          end,
        "noteTabs" =>
          case(data.note_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.note_tabs, fn item -> Docusign.Note.encode(item) end)
          end,
        "drawTabs" =>
          case(data.draw_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.draw_tabs, fn item -> Docusign.Draw.encode(item) end)
          end,
        "fullNameTabs" =>
          case(data.full_name_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.full_name_tabs, fn item -> Docusign.FullName.encode(item) end)
          end,
        "titleTabs" =>
          case(data.title_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.title_tabs, fn item -> Docusign.Title.encode(item) end)
          end,
        "ssnTabs" =>
          case(data.ssn_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.ssn_tabs, fn item -> Docusign.Ssn.encode(item) end)
          end,
        "polyLineOverlayTabs" =>
          case(data.poly_line_overlay_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.poly_line_overlay_tabs, fn item ->
                Docusign.PolyLineOverlay.encode(item)
              end)
          end,
        "currencyTabs" =>
          case(data.currency_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.currency_tabs, fn item -> Docusign.Currency.encode(item) end)
          end,
        "firstNameTabs" =>
          case(data.first_name_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.first_name_tabs, fn item -> Docusign.FirstName.encode(item) end)
          end
      }
    end
  end

  defmodule(TemplateRole) do
    @moduledoc "#{nil}
    "
    defstruct(
      access_code: nil,
      additional_notifications: nil,
      client_user_id: nil,
      default_recipient: nil,
      email: nil,
      email_notification: nil,
      embedded_recipient_start_url: nil,
      in_person_signer_name: nil,
      name: nil,
      phone_number: nil,
      recipient_signature_providers: nil,
      role_name: nil,
      routing_order: nil,
      signing_group_id: nil,
      tabs: nil
    )

    @type t :: %__MODULE__{
            access_code: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            client_user_id: binary | nil,
            default_recipient: binary | nil,
            email: binary | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            embedded_recipient_start_url: binary | nil,
            in_person_signer_name: binary | nil,
            name: binary | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            recipient_signature_providers: [Docusign.RecipientSignatureProvider.t()] | nil,
            role_name: binary | nil,
            routing_order: binary | nil,
            signing_group_id: binary | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, default_recipient} <-
          case(data["defaultRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["defaultRecipient"]}}
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, in_person_signer_name} <-
          case(data["inPersonSignerName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inPersonSignerName"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, recipient_signature_providers} <-
          case(data["recipientSignatureProviders"]) do
            nil ->
              nil

            _ ->
              data["recipientSignatureProviders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientSignatureProvider.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"])
      ) do
        {:ok,
         %__MODULE__{
           access_code: access_code,
           additional_notifications: additional_notifications,
           client_user_id: client_user_id,
           default_recipient: default_recipient,
           email: email,
           email_notification: email_notification,
           embedded_recipient_start_url: embedded_recipient_start_url,
           in_person_signer_name: in_person_signer_name,
           name: name,
           phone_number: phone_number,
           recipient_signature_providers: recipient_signature_providers,
           role_name: role_name,
           routing_order: routing_order,
           signing_group_id: signing_group_id,
           tabs: tabs
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["templateRole" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "accessCode" => data.access_code,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "clientUserId" => data.client_user_id,
        "defaultRecipient" => data.default_recipient,
        "email" => data.email,
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "inPersonSignerName" => data.in_person_signer_name,
        "name" => data.name,
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "recipientSignatureProviders" =>
          case(data.recipient_signature_providers) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_signature_providers, fn item ->
                Docusign.RecipientSignatureProvider.encode(item)
              end)
          end,
        "roleName" => data.role_name,
        "routingOrder" => data.routing_order,
        "signingGroupId" => data.signing_group_id,
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs)
      }
    end
  end

  defmodule(PrefillTabs) do
    @moduledoc "#{nil}
    "
    defstruct(
      checkbox_tabs: nil,
      radio_group_tabs: nil,
      sender_company_tabs: nil,
      sender_name_tabs: nil,
      tab_groups: nil,
      text_tabs: nil
    )

    @type t :: %__MODULE__{
            checkbox_tabs: [Docusign.Checkbox.t()] | nil,
            radio_group_tabs: [Docusign.RadioGroup.t()] | nil,
            sender_company_tabs: [Docusign.SenderCompany.t()] | nil,
            sender_name_tabs: [Docusign.SenderName.t()] | nil,
            tab_groups: [Docusign.TabGroup.t()] | nil,
            text_tabs: [Docusign.Text.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, checkbox_tabs} <-
          case(data["checkboxTabs"]) do
            nil ->
              nil

            _ ->
              data["checkboxTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Checkbox.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, radio_group_tabs} <-
          case(data["radioGroupTabs"]) do
            nil ->
              nil

            _ ->
              data["radioGroupTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RadioGroup.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, sender_company_tabs} <-
          case(data["senderCompanyTabs"]) do
            nil ->
              nil

            _ ->
              data["senderCompanyTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SenderCompany.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, sender_name_tabs} <-
          case(data["senderNameTabs"]) do
            nil ->
              nil

            _ ->
              data["senderNameTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SenderName.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, tab_groups} <-
          case(data["tabGroups"]) do
            nil ->
              nil

            _ ->
              data["tabGroups"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.TabGroup.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, text_tabs} <-
          case(data["textTabs"]) do
            nil ->
              nil

            _ ->
              data["textTabs"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Text.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           checkbox_tabs: checkbox_tabs,
           radio_group_tabs: radio_group_tabs,
           sender_company_tabs: sender_company_tabs,
           sender_name_tabs: sender_name_tabs,
           tab_groups: tab_groups,
           text_tabs: text_tabs
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["prefillTabs" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "checkboxTabs" =>
          case(data.checkbox_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.checkbox_tabs, fn item -> Docusign.Checkbox.encode(item) end)
          end,
        "radioGroupTabs" =>
          case(data.radio_group_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.radio_group_tabs, fn item -> Docusign.RadioGroup.encode(item) end)
          end,
        "senderCompanyTabs" =>
          case(data.sender_company_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.sender_company_tabs, fn item ->
                Docusign.SenderCompany.encode(item)
              end)
          end,
        "senderNameTabs" =>
          case(data.sender_name_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.sender_name_tabs, fn item -> Docusign.SenderName.encode(item) end)
          end,
        "tabGroups" =>
          case(data.tab_groups) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_groups, fn item -> Docusign.TabGroup.encode(item) end)
          end,
        "textTabs" =>
          case(data.text_tabs) do
            nil ->
              nil

            _ ->
              Enum.map(data.text_tabs, fn item -> Docusign.Text.encode(item) end)
          end
      }
    end
  end

  defmodule(Ssn9InformationInput) do
    @moduledoc "#{nil}
    "
    defstruct(display_level_code: nil, ssn9: nil)
    @type t :: %__MODULE__{display_level_code: binary | nil, ssn9: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, display_level_code} <-
          case(data["displayLevelCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayLevelCode"]}}
          end,
        {:ok, ssn9} <-
          case(data["ssn9"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["ssn9"]}}
          end
      ) do
        {:ok, %__MODULE__{display_level_code: display_level_code, ssn9: ssn9}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["ssn9InformationInput" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"displayLevelCode" => data.display_level_code, "ssn9" => data.ssn9}
    end
  end

  defmodule(SignatureType) do
    @moduledoc "#{nil}
    "
    defstruct(is_default: nil, type: nil)
    @type t :: %__MODULE__{is_default: binary | nil, type: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, is_default} <-
          case(data["isDefault"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["isDefault"]}}
          end,
        {:ok, type} <-
          case(data["type"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["type"]}}
          end
      ) do
        {:ok, %__MODULE__{is_default: is_default, type: type}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["signatureType" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"isDefault" => data.is_default, "type" => data.type}
    end
  end

  defmodule(Folder) do
    @moduledoc "#{nil}
    "
    defstruct(
      error_details: nil,
      filter: nil,
      folder_id: nil,
      folder_items: nil,
      folders: nil,
      has_access: nil,
      has_sub_folders: nil,
      item_count: nil,
      name: nil,
      owner: nil,
      parent_folder_id: nil,
      parent_folder_uri: nil,
      sub_folder_count: nil,
      type: nil,
      uri: nil
    )

    @type t :: %__MODULE__{
            error_details: Docusign.ErrorDetails.t() | nil,
            filter: Docusign.Filter.t() | nil,
            folder_id: binary | nil,
            folder_items: [Docusign.FolderItemV2.t()] | nil,
            folders: [Docusign.Folder.t()] | nil,
            has_access: binary | nil,
            has_sub_folders: binary | nil,
            item_count: binary | nil,
            name: binary | nil,
            owner: Docusign.UserInfo.t() | nil,
            parent_folder_id: binary | nil,
            parent_folder_uri: binary | nil,
            sub_folder_count: binary | nil,
            type: binary | nil,
            uri: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, filter} <- Docusign.Filter.decode(data["filter"]),
        {:ok, folder_id} <-
          case(data["folderId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["folderId"]}}
          end,
        {:ok, folder_items} <-
          case(data["folderItems"]) do
            nil ->
              nil

            _ ->
              data["folderItems"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FolderItemV2.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, folders} <-
          case(data["folders"]) do
            nil ->
              nil

            _ ->
              data["folders"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.Folder.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, has_access} <-
          case(data["hasAccess"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasAccess"]}}
          end,
        {:ok, has_sub_folders} <-
          case(data["hasSubFolders"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hasSubFolders"]}}
          end,
        {:ok, item_count} <-
          case(data["itemCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["itemCount"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, owner} <- Docusign.UserInfo.decode(data["owner"]),
        {:ok, parent_folder_id} <-
          case(data["parentFolderId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["parentFolderId"]}}
          end,
        {:ok, parent_folder_uri} <-
          case(data["parentFolderUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["parentFolderUri"]}}
          end,
        {:ok, sub_folder_count} <-
          case(data["subFolderCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["subFolderCount"]}}
          end,
        {:ok, type} <-
          case(data["type"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["type"]}}
          end,
        {:ok, uri} <-
          case(data["uri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["uri"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           error_details: error_details,
           filter: filter,
           folder_id: folder_id,
           folder_items: folder_items,
           folders: folders,
           has_access: has_access,
           has_sub_folders: has_sub_folders,
           item_count: item_count,
           name: name,
           owner: owner,
           parent_folder_id: parent_folder_id,
           parent_folder_uri: parent_folder_uri,
           sub_folder_count: sub_folder_count,
           type: type,
           uri: uri
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["folder" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "filter" => Docusign.Filter.encode(data.filter),
        "folderId" => data.folder_id,
        "folderItems" =>
          case(data.folder_items) do
            nil ->
              nil

            _ ->
              Enum.map(data.folder_items, fn item -> Docusign.FolderItemV2.encode(item) end)
          end,
        "folders" =>
          case(data.folders) do
            nil ->
              nil

            _ ->
              Enum.map(data.folders, fn item -> Docusign.Folder.encode(item) end)
          end,
        "hasAccess" => data.has_access,
        "hasSubFolders" => data.has_sub_folders,
        "itemCount" => data.item_count,
        "name" => data.name,
        "owner" => Docusign.UserInfo.encode(data.owner),
        "parentFolderId" => data.parent_folder_id,
        "parentFolderUri" => data.parent_folder_uri,
        "subFolderCount" => data.sub_folder_count,
        "type" => data.type,
        "uri" => data.uri
      }
    end
  end

  defmodule(CertifiedDelivery) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      full_name: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      last_name_metadata: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      allow_system_override_for_locked_recipient: nil,
      agent_can_edit_email: nil,
      proof_file: nil,
      delivery_method_metadata: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      first_name: nil,
      last_name: nil,
      custom_fields: nil,
      embedded_recipient_start_url: nil,
      additional_notifications: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      first_name_metadata: nil,
      full_name_metadata: nil,
      phone_number: nil,
      signing_group_name: nil,
      identity_verification: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      excluded_documents: nil,
      agent_can_edit_name: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      fax_number_metadata: nil,
      email_metadata: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name: binary | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            last_name_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            agent_can_edit_email: binary | nil,
            proof_file: Docusign.RecipientProofFile.t() | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            first_name: binary | nil,
            last_name: binary | nil,
            custom_fields: [binary] | nil,
            embedded_recipient_start_url: binary | nil,
            additional_notifications: [Docusign.RecipientAdditionalNotification.t()] | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            first_name_metadata: Docusign.PropertyMetadata.t() | nil,
            full_name_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            excluded_documents: [binary] | nil,
            agent_can_edit_name: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, full_name} <-
          case(data["fullName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fullName"]}}
          end,
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, last_name_metadata} <- Docusign.PropertyMetadata.decode(data["lastNameMetadata"]),
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, agent_can_edit_email} <-
          case(data["agentCanEditEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditEmail"]}}
          end,
        {:ok, proof_file} <- Docusign.RecipientProofFile.decode(data["proofFile"]),
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, first_name} <-
          case(data["firstName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["firstName"]}}
          end,
        {:ok, last_name} <-
          case(data["lastName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastName"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, additional_notifications} <-
          case(data["additionalNotifications"]) do
            nil ->
              nil

            _ ->
              data["additionalNotifications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAdditionalNotification.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, first_name_metadata} <- Docusign.PropertyMetadata.decode(data["firstNameMetadata"]),
        {:ok, full_name_metadata} <- Docusign.PropertyMetadata.decode(data["fullNameMetadata"]),
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, excluded_documents} <-
          case(data["excludedDocuments"]) do
            nil ->
              nil

            _ ->
              data["excludedDocuments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, agent_can_edit_name} <-
          case(data["agentCanEditName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["agentCanEditName"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           full_name: full_name,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           last_name_metadata: last_name_metadata,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           agent_can_edit_email: agent_can_edit_email,
           proof_file: proof_file,
           delivery_method_metadata: delivery_method_metadata,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           first_name: first_name,
           last_name: last_name,
           custom_fields: custom_fields,
           embedded_recipient_start_url: embedded_recipient_start_url,
           additional_notifications: additional_notifications,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           first_name_metadata: first_name_metadata,
           full_name_metadata: full_name_metadata,
           phone_number: phone_number,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           excluded_documents: excluded_documents,
           agent_can_edit_name: agent_can_edit_name,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           fax_number_metadata: fax_number_metadata,
           email_metadata: email_metadata,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["certifiedDelivery" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "fullName" => data.full_name,
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "lastNameMetadata" => Docusign.PropertyMetadata.encode(data.last_name_metadata),
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "agentCanEditEmail" => data.agent_can_edit_email,
        "proofFile" => Docusign.RecipientProofFile.encode(data.proof_file),
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "firstName" => data.first_name,
        "lastName" => data.last_name,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "additionalNotifications" =>
          case(data.additional_notifications) do
            nil ->
              nil

            _ ->
              Enum.map(data.additional_notifications, fn item ->
                Docusign.RecipientAdditionalNotification.encode(item)
              end)
          end,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "firstNameMetadata" => Docusign.PropertyMetadata.encode(data.first_name_metadata),
        "fullNameMetadata" => Docusign.PropertyMetadata.encode(data.full_name_metadata),
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "excludedDocuments" =>
          case(data.excluded_documents) do
            nil ->
              nil

            _ ->
              Enum.map(data.excluded_documents, fn item -> item end)
          end,
        "agentCanEditName" => data.agent_can_edit_name,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end
      }
    end
  end

  defmodule(NotaryHost) do
    @moduledoc "#{nil}
    "
    defstruct(
      id_check_information_input: nil,
      email_notification: nil,
      name: nil,
      document_visibility: nil,
      locked_recipient_phone_auth_editable: nil,
      signing_group_users: nil,
      require_id_lookup_metadata: nil,
      access_code: nil,
      declined_date_time: nil,
      error_details: nil,
      recipient_id: nil,
      status_code: nil,
      recipient_id_guid: nil,
      locked_recipient_sms_editable: nil,
      recipient_feature_metadata: nil,
      delivery_method: nil,
      signing_group_id_metadata: nil,
      social_authentications: nil,
      email: nil,
      declined_reason: nil,
      note_metadata: nil,
      phone_authentication: nil,
      allow_system_override_for_locked_recipient: nil,
      delivery_method_metadata: nil,
      role_name: nil,
      sent_date_time: nil,
      add_access_code_to_email: nil,
      auto_responded_reason: nil,
      id_check_configuration_name_metadata: nil,
      user_id: nil,
      recipient_authentication_status: nil,
      designator_id: nil,
      inherit_email_notification_configuration: nil,
      custom_fields: nil,
      embedded_recipient_start_url: nil,
      signing_group_id: nil,
      template_locked: nil,
      total_tab_count: nil,
      recipient_type: nil,
      signed_date_time: nil,
      routing_order: nil,
      routing_order_metadata: nil,
      template_required: nil,
      delivered_date_time: nil,
      designator_id_guid: nil,
      suppress_emails: nil,
      signing_group_name: nil,
      identity_verification: nil,
      tabs: nil,
      access_code_metadata: nil,
      id_check_configuration_name: nil,
      fax_number: nil,
      name_metadata: nil,
      require_id_lookup: nil,
      status: nil,
      client_user_id: nil,
      sms_authentication: nil,
      fax_number_metadata: nil,
      host_recipient_id: nil,
      email_metadata: nil,
      recipient_type_metadata: nil,
      note: nil,
      completed_count: nil,
      recipient_attachments: nil
    )

    @type t :: %__MODULE__{
            id_check_information_input: Docusign.IdCheckInformationInput.t() | nil,
            email_notification: Docusign.RecipientEmailNotification.t() | nil,
            name: binary | nil,
            document_visibility: [Docusign.DocumentVisibility.t()] | nil,
            locked_recipient_phone_auth_editable: binary | nil,
            signing_group_users: [Docusign.UserInfo.t()] | nil,
            require_id_lookup_metadata: Docusign.PropertyMetadata.t() | nil,
            access_code: binary | nil,
            declined_date_time: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            status_code: binary | nil,
            recipient_id_guid: binary | nil,
            locked_recipient_sms_editable: binary | nil,
            recipient_feature_metadata: [Docusign.FeatureAvailableMetadata.t()] | nil,
            delivery_method: binary | nil,
            signing_group_id_metadata: Docusign.PropertyMetadata.t() | nil,
            social_authentications: [Docusign.SocialAuthentication.t()] | nil,
            email: binary | nil,
            declined_reason: binary | nil,
            note_metadata: Docusign.PropertyMetadata.t() | nil,
            phone_authentication: Docusign.RecipientPhoneAuthentication.t() | nil,
            allow_system_override_for_locked_recipient: binary | nil,
            delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            role_name: binary | nil,
            sent_date_time: binary | nil,
            add_access_code_to_email: binary | nil,
            auto_responded_reason: binary | nil,
            id_check_configuration_name_metadata: Docusign.PropertyMetadata.t() | nil,
            user_id: binary | nil,
            recipient_authentication_status: Docusign.AuthenticationStatus.t() | nil,
            designator_id: binary | nil,
            inherit_email_notification_configuration: binary | nil,
            custom_fields: [binary] | nil,
            embedded_recipient_start_url: binary | nil,
            signing_group_id: binary | nil,
            template_locked: binary | nil,
            total_tab_count: binary | nil,
            recipient_type: binary | nil,
            signed_date_time: binary | nil,
            routing_order: binary | nil,
            routing_order_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required: binary | nil,
            delivered_date_time: binary | nil,
            designator_id_guid: binary | nil,
            suppress_emails: binary | nil,
            signing_group_name: binary | nil,
            identity_verification: Docusign.RecipientIdentityVerification.t() | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            access_code_metadata: Docusign.PropertyMetadata.t() | nil,
            id_check_configuration_name: binary | nil,
            fax_number: binary | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            require_id_lookup: binary | nil,
            status: binary | nil,
            client_user_id: binary | nil,
            sms_authentication: Docusign.RecipientSMSAuthentication.t() | nil,
            fax_number_metadata: Docusign.PropertyMetadata.t() | nil,
            host_recipient_id: binary | nil,
            email_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_type_metadata: Docusign.PropertyMetadata.t() | nil,
            note: binary | nil,
            completed_count: binary | nil,
            recipient_attachments: [Docusign.RecipientAttachment.t()] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, id_check_information_input} <-
          Docusign.IdCheckInformationInput.decode(data["idCheckInformationInput"]),
        {:ok, email_notification} <-
          Docusign.RecipientEmailNotification.decode(data["emailNotification"]),
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, document_visibility} <-
          case(data["documentVisibility"]) do
            nil ->
              nil

            _ ->
              data["documentVisibility"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.DocumentVisibility.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, locked_recipient_phone_auth_editable} <-
          case(data["lockedRecipientPhoneAuthEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientPhoneAuthEditable"]}}
          end,
        {:ok, signing_group_users} <-
          case(data["signingGroupUsers"]) do
            nil ->
              nil

            _ ->
              data["signingGroupUsers"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.UserInfo.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_id_lookup_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireIdLookupMetadata"]),
        {:ok, access_code} <-
          case(data["accessCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["accessCode"]}}
          end,
        {:ok, declined_date_time} <-
          case(data["declinedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedDateTime"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, status_code} <-
          case(data["statusCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["statusCode"]}}
          end,
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, locked_recipient_sms_editable} <-
          case(data["lockedRecipientSmsEditable"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lockedRecipientSmsEditable"]}}
          end,
        {:ok, recipient_feature_metadata} <-
          case(data["recipientFeatureMetadata"]) do
            nil ->
              nil

            _ ->
              data["recipientFeatureMetadata"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.FeatureAvailableMetadata.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, delivery_method} <-
          case(data["deliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveryMethod"]}}
          end,
        {:ok, signing_group_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["signingGroupIdMetadata"]),
        {:ok, social_authentications} <-
          case(data["socialAuthentications"]) do
            nil ->
              nil

            _ ->
              data["socialAuthentications"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.SocialAuthentication.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, email} <-
          case(data["email"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["email"]}}
          end,
        {:ok, declined_reason} <-
          case(data["declinedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declinedReason"]}}
          end,
        {:ok, note_metadata} <- Docusign.PropertyMetadata.decode(data["noteMetadata"]),
        {:ok, phone_authentication} <-
          Docusign.RecipientPhoneAuthentication.decode(data["phoneAuthentication"]),
        {:ok, allow_system_override_for_locked_recipient} <-
          case(data["allowSystemOverrideForLockedRecipient"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["allowSystemOverrideForLockedRecipient"]}}
          end,
        {:ok, delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["deliveryMethodMetadata"]),
        {:ok, role_name} <-
          case(data["roleName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["roleName"]}}
          end,
        {:ok, sent_date_time} <-
          case(data["sentDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sentDateTime"]}}
          end,
        {:ok, add_access_code_to_email} <-
          case(data["addAccessCodeToEmail"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addAccessCodeToEmail"]}}
          end,
        {:ok, auto_responded_reason} <-
          case(data["autoRespondedReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["autoRespondedReason"]}}
          end,
        {:ok, id_check_configuration_name_metadata} <-
          Docusign.PropertyMetadata.decode(data["idCheckConfigurationNameMetadata"]),
        {:ok, user_id} <-
          case(data["userId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["userId"]}}
          end,
        {:ok, recipient_authentication_status} <-
          Docusign.AuthenticationStatus.decode(data["recipientAuthenticationStatus"]),
        {:ok, designator_id} <-
          case(data["designatorId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorId"]}}
          end,
        {:ok, inherit_email_notification_configuration} <-
          case(data["inheritEmailNotificationConfiguration"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inheritEmailNotificationConfiguration"]}}
          end,
        {:ok, custom_fields} <-
          case(data["customFields"]) do
            nil ->
              nil

            _ ->
              data["customFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, embedded_recipient_start_url} <-
          case(data["embeddedRecipientStartURL"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["embeddedRecipientStartURL"]}}
          end,
        {:ok, signing_group_id} <-
          case(data["signingGroupId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupId"]}}
          end,
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, total_tab_count} <-
          case(data["totalTabCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["totalTabCount"]}}
          end,
        {:ok, recipient_type} <-
          case(data["recipientType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientType"]}}
          end,
        {:ok, signed_date_time} <-
          case(data["signedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signedDateTime"]}}
          end,
        {:ok, routing_order} <-
          case(data["routingOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["routingOrder"]}}
          end,
        {:ok, routing_order_metadata} <-
          Docusign.PropertyMetadata.decode(data["routingOrderMetadata"]),
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, delivered_date_time} <-
          case(data["deliveredDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["deliveredDateTime"]}}
          end,
        {:ok, designator_id_guid} <-
          case(data["designatorIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["designatorIdGuid"]}}
          end,
        {:ok, suppress_emails} <-
          case(data["suppressEmails"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["suppressEmails"]}}
          end,
        {:ok, signing_group_name} <-
          case(data["signingGroupName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signingGroupName"]}}
          end,
        {:ok, identity_verification} <-
          Docusign.RecipientIdentityVerification.decode(data["identityVerification"]),
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, access_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["accessCodeMetadata"]),
        {:ok, id_check_configuration_name} <-
          case(data["idCheckConfigurationName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["idCheckConfigurationName"]}}
          end,
        {:ok, fax_number} <-
          case(data["faxNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["faxNumber"]}}
          end,
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, require_id_lookup} <-
          case(data["requireIdLookup"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireIdLookup"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, client_user_id} <-
          case(data["clientUserId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["clientUserId"]}}
          end,
        {:ok, sms_authentication} <-
          Docusign.RecipientSMSAuthentication.decode(data["smsAuthentication"]),
        {:ok, fax_number_metadata} <- Docusign.PropertyMetadata.decode(data["faxNumberMetadata"]),
        {:ok, host_recipient_id} <-
          case(data["hostRecipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["hostRecipientId"]}}
          end,
        {:ok, email_metadata} <- Docusign.PropertyMetadata.decode(data["emailMetadata"]),
        {:ok, recipient_type_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientTypeMetadata"]),
        {:ok, note} <-
          case(data["note"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["note"]}}
          end,
        {:ok, completed_count} <-
          case(data["completedCount"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["completedCount"]}}
          end,
        {:ok, recipient_attachments} <-
          case(data["recipientAttachments"]) do
            nil ->
              nil

            _ ->
              data["recipientAttachments"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientAttachment.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           id_check_information_input: id_check_information_input,
           email_notification: email_notification,
           name: name,
           document_visibility: document_visibility,
           locked_recipient_phone_auth_editable: locked_recipient_phone_auth_editable,
           signing_group_users: signing_group_users,
           require_id_lookup_metadata: require_id_lookup_metadata,
           access_code: access_code,
           declined_date_time: declined_date_time,
           error_details: error_details,
           recipient_id: recipient_id,
           status_code: status_code,
           recipient_id_guid: recipient_id_guid,
           locked_recipient_sms_editable: locked_recipient_sms_editable,
           recipient_feature_metadata: recipient_feature_metadata,
           delivery_method: delivery_method,
           signing_group_id_metadata: signing_group_id_metadata,
           social_authentications: social_authentications,
           email: email,
           declined_reason: declined_reason,
           note_metadata: note_metadata,
           phone_authentication: phone_authentication,
           allow_system_override_for_locked_recipient: allow_system_override_for_locked_recipient,
           delivery_method_metadata: delivery_method_metadata,
           role_name: role_name,
           sent_date_time: sent_date_time,
           add_access_code_to_email: add_access_code_to_email,
           auto_responded_reason: auto_responded_reason,
           id_check_configuration_name_metadata: id_check_configuration_name_metadata,
           user_id: user_id,
           recipient_authentication_status: recipient_authentication_status,
           designator_id: designator_id,
           inherit_email_notification_configuration: inherit_email_notification_configuration,
           custom_fields: custom_fields,
           embedded_recipient_start_url: embedded_recipient_start_url,
           signing_group_id: signing_group_id,
           template_locked: template_locked,
           total_tab_count: total_tab_count,
           recipient_type: recipient_type,
           signed_date_time: signed_date_time,
           routing_order: routing_order,
           routing_order_metadata: routing_order_metadata,
           template_required: template_required,
           delivered_date_time: delivered_date_time,
           designator_id_guid: designator_id_guid,
           suppress_emails: suppress_emails,
           signing_group_name: signing_group_name,
           identity_verification: identity_verification,
           tabs: tabs,
           access_code_metadata: access_code_metadata,
           id_check_configuration_name: id_check_configuration_name,
           fax_number: fax_number,
           name_metadata: name_metadata,
           require_id_lookup: require_id_lookup,
           status: status,
           client_user_id: client_user_id,
           sms_authentication: sms_authentication,
           fax_number_metadata: fax_number_metadata,
           host_recipient_id: host_recipient_id,
           email_metadata: email_metadata,
           recipient_type_metadata: recipient_type_metadata,
           note: note,
           completed_count: completed_count,
           recipient_attachments: recipient_attachments
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["notaryHost" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "idCheckInformationInput" =>
          Docusign.IdCheckInformationInput.encode(data.id_check_information_input),
        "emailNotification" =>
          Docusign.RecipientEmailNotification.encode(data.email_notification),
        "name" => data.name,
        "documentVisibility" =>
          case(data.document_visibility) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_visibility, fn item ->
                Docusign.DocumentVisibility.encode(item)
              end)
          end,
        "lockedRecipientPhoneAuthEditable" => data.locked_recipient_phone_auth_editable,
        "signingGroupUsers" =>
          case(data.signing_group_users) do
            nil ->
              nil

            _ ->
              Enum.map(data.signing_group_users, fn item -> Docusign.UserInfo.encode(item) end)
          end,
        "requireIdLookupMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_id_lookup_metadata),
        "accessCode" => data.access_code,
        "declinedDateTime" => data.declined_date_time,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "statusCode" => data.status_code,
        "recipientIdGuid" => data.recipient_id_guid,
        "lockedRecipientSmsEditable" => data.locked_recipient_sms_editable,
        "recipientFeatureMetadata" =>
          case(data.recipient_feature_metadata) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_feature_metadata, fn item ->
                Docusign.FeatureAvailableMetadata.encode(item)
              end)
          end,
        "deliveryMethod" => data.delivery_method,
        "signingGroupIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.signing_group_id_metadata),
        "socialAuthentications" =>
          case(data.social_authentications) do
            nil ->
              nil

            _ ->
              Enum.map(data.social_authentications, fn item ->
                Docusign.SocialAuthentication.encode(item)
              end)
          end,
        "email" => data.email,
        "declinedReason" => data.declined_reason,
        "noteMetadata" => Docusign.PropertyMetadata.encode(data.note_metadata),
        "phoneAuthentication" =>
          Docusign.RecipientPhoneAuthentication.encode(data.phone_authentication),
        "allowSystemOverrideForLockedRecipient" =>
          data.allow_system_override_for_locked_recipient,
        "deliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.delivery_method_metadata),
        "roleName" => data.role_name,
        "sentDateTime" => data.sent_date_time,
        "addAccessCodeToEmail" => data.add_access_code_to_email,
        "autoRespondedReason" => data.auto_responded_reason,
        "idCheckConfigurationNameMetadata" =>
          Docusign.PropertyMetadata.encode(data.id_check_configuration_name_metadata),
        "userId" => data.user_id,
        "recipientAuthenticationStatus" =>
          Docusign.AuthenticationStatus.encode(data.recipient_authentication_status),
        "designatorId" => data.designator_id,
        "inheritEmailNotificationConfiguration" => data.inherit_email_notification_configuration,
        "customFields" =>
          case(data.custom_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.custom_fields, fn item -> item end)
          end,
        "embeddedRecipientStartURL" => data.embedded_recipient_start_url,
        "signingGroupId" => data.signing_group_id,
        "templateLocked" => data.template_locked,
        "totalTabCount" => data.total_tab_count,
        "recipientType" => data.recipient_type,
        "signedDateTime" => data.signed_date_time,
        "routingOrder" => data.routing_order,
        "routingOrderMetadata" => Docusign.PropertyMetadata.encode(data.routing_order_metadata),
        "templateRequired" => data.template_required,
        "deliveredDateTime" => data.delivered_date_time,
        "designatorIdGuid" => data.designator_id_guid,
        "suppressEmails" => data.suppress_emails,
        "signingGroupName" => data.signing_group_name,
        "identityVerification" =>
          Docusign.RecipientIdentityVerification.encode(data.identity_verification),
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "accessCodeMetadata" => Docusign.PropertyMetadata.encode(data.access_code_metadata),
        "idCheckConfigurationName" => data.id_check_configuration_name,
        "faxNumber" => data.fax_number,
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "requireIdLookup" => data.require_id_lookup,
        "status" => data.status,
        "clientUserId" => data.client_user_id,
        "smsAuthentication" =>
          Docusign.RecipientSMSAuthentication.encode(data.sms_authentication),
        "faxNumberMetadata" => Docusign.PropertyMetadata.encode(data.fax_number_metadata),
        "hostRecipientId" => data.host_recipient_id,
        "emailMetadata" => Docusign.PropertyMetadata.encode(data.email_metadata),
        "recipientTypeMetadata" => Docusign.PropertyMetadata.encode(data.recipient_type_metadata),
        "note" => data.note,
        "completedCount" => data.completed_count,
        "recipientAttachments" =>
          case(data.recipient_attachments) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_attachments, fn item ->
                Docusign.RecipientAttachment.encode(item)
              end)
          end
      }
    end
  end

  defmodule(AddressInformationInput) do
    @moduledoc "#{nil}
    "
    defstruct(address_information: nil, display_level_code: nil, receive_in_response: nil)

    @type t :: %__MODULE__{
            address_information: Docusign.AddressInformation.t() | nil,
            display_level_code: binary | nil,
            receive_in_response: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, address_information} <-
          Docusign.AddressInformation.decode(data["addressInformation"]),
        {:ok, display_level_code} <-
          case(data["displayLevelCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayLevelCode"]}}
          end,
        {:ok, receive_in_response} <-
          case(data["receiveInResponse"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["receiveInResponse"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           address_information: address_information,
           display_level_code: display_level_code,
           receive_in_response: receive_in_response
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["addressInformationInput" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "addressInformation" => Docusign.AddressInformation.encode(data.address_information),
        "displayLevelCode" => data.display_level_code,
        "receiveInResponse" => data.receive_in_response
      }
    end
  end

  defmodule(RecipientAdditionalNotification) do
    @moduledoc "#{nil}
    "
    defstruct(
      phone_number: nil,
      secondary_delivery_method: nil,
      secondary_delivery_method_metadata: nil,
      secondary_delivery_status: nil
    )

    @type t :: %__MODULE__{
            phone_number: Docusign.RecipientPhoneNumber.t() | nil,
            secondary_delivery_method: binary | nil,
            secondary_delivery_method_metadata: Docusign.PropertyMetadata.t() | nil,
            secondary_delivery_status: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, phone_number} <- Docusign.RecipientPhoneNumber.decode(data["phoneNumber"]),
        {:ok, secondary_delivery_method} <-
          case(data["secondaryDeliveryMethod"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["secondaryDeliveryMethod"]}}
          end,
        {:ok, secondary_delivery_method_metadata} <-
          Docusign.PropertyMetadata.decode(data["secondaryDeliveryMethodMetadata"]),
        {:ok, secondary_delivery_status} <-
          case(data["secondaryDeliveryStatus"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["secondaryDeliveryStatus"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           phone_number: phone_number,
           secondary_delivery_method: secondary_delivery_method,
           secondary_delivery_method_metadata: secondary_delivery_method_metadata,
           secondary_delivery_status: secondary_delivery_status
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientAdditionalNotification" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "phoneNumber" => Docusign.RecipientPhoneNumber.encode(data.phone_number),
        "secondaryDeliveryMethod" => data.secondary_delivery_method,
        "secondaryDeliveryMethodMetadata" =>
          Docusign.PropertyMetadata.encode(data.secondary_delivery_method_metadata),
        "secondaryDeliveryStatus" => data.secondary_delivery_status
      }
    end
  end

  defmodule(Stamp) do
    @moduledoc "#{nil}
    "
    defstruct(
      adopted_date_time: nil,
      created_date_time: nil,
      custom_field: nil,
      date_stamp_properties: nil,
      disallow_user_resize_stamp: nil,
      error_details: nil,
      external_id: nil,
      image_base64: nil,
      image_type: nil,
      last_modified_date_time: nil,
      phonetic_name: nil,
      signature_name: nil,
      stamp_format: nil,
      stamp_image_uri: nil,
      stamp_size_mm: nil,
      status: nil
    )

    @type t :: %__MODULE__{
            adopted_date_time: binary | nil,
            created_date_time: binary | nil,
            custom_field: binary | nil,
            date_stamp_properties: Docusign.DateStampProperties.t() | nil,
            disallow_user_resize_stamp: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            external_id: binary | nil,
            image_base64: binary | nil,
            image_type: binary | nil,
            last_modified_date_time: binary | nil,
            phonetic_name: binary | nil,
            signature_name: binary | nil,
            stamp_format: binary | nil,
            stamp_image_uri: binary | nil,
            stamp_size_mm: binary | nil,
            status: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, adopted_date_time} <-
          case(data["adoptedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["adoptedDateTime"]}}
          end,
        {:ok, created_date_time} <-
          case(data["createdDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["createdDateTime"]}}
          end,
        {:ok, custom_field} <-
          case(data["customField"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customField"]}}
          end,
        {:ok, date_stamp_properties} <-
          Docusign.DateStampProperties.decode(data["dateStampProperties"]),
        {:ok, disallow_user_resize_stamp} <-
          case(data["disallowUserResizeStamp"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disallowUserResizeStamp"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, external_id} <-
          case(data["externalID"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["externalID"]}}
          end,
        {:ok, image_base64} <-
          case(data["imageBase64"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["imageBase64"]}}
          end,
        {:ok, image_type} <-
          case(data["imageType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["imageType"]}}
          end,
        {:ok, last_modified_date_time} <-
          case(data["lastModifiedDateTime"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["lastModifiedDateTime"]}}
          end,
        {:ok, phonetic_name} <-
          case(data["phoneticName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["phoneticName"]}}
          end,
        {:ok, signature_name} <-
          case(data["signatureName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signatureName"]}}
          end,
        {:ok, stamp_format} <-
          case(data["stampFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["stampFormat"]}}
          end,
        {:ok, stamp_image_uri} <-
          case(data["stampImageUri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["stampImageUri"]}}
          end,
        {:ok, stamp_size_mm} <-
          case(data["stampSizeMM"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["stampSizeMM"]}}
          end,
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           adopted_date_time: adopted_date_time,
           created_date_time: created_date_time,
           custom_field: custom_field,
           date_stamp_properties: date_stamp_properties,
           disallow_user_resize_stamp: disallow_user_resize_stamp,
           error_details: error_details,
           external_id: external_id,
           image_base64: image_base64,
           image_type: image_type,
           last_modified_date_time: last_modified_date_time,
           phonetic_name: phonetic_name,
           signature_name: signature_name,
           stamp_format: stamp_format,
           stamp_image_uri: stamp_image_uri,
           stamp_size_mm: stamp_size_mm,
           status: status
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["stamp" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "adoptedDateTime" => data.adopted_date_time,
        "createdDateTime" => data.created_date_time,
        "customField" => data.custom_field,
        "dateStampProperties" => Docusign.DateStampProperties.encode(data.date_stamp_properties),
        "disallowUserResizeStamp" => data.disallow_user_resize_stamp,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "externalID" => data.external_id,
        "imageBase64" => data.image_base64,
        "imageType" => data.image_type,
        "lastModifiedDateTime" => data.last_modified_date_time,
        "phoneticName" => data.phonetic_name,
        "signatureName" => data.signature_name,
        "stampFormat" => data.stamp_format,
        "stampImageUri" => data.stamp_image_uri,
        "stampSizeMM" => data.stamp_size_mm,
        "status" => data.status
      }
    end
  end

  defmodule(Notification) do
    @moduledoc "#{nil}
    "
    defstruct(expirations: nil, reminders: nil, use_account_defaults: nil)

    @type t :: %__MODULE__{
            expirations: Docusign.Expirations.t() | nil,
            reminders: Docusign.Reminders.t() | nil,
            use_account_defaults: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, expirations} <- Docusign.Expirations.decode(data["expirations"]),
        {:ok, reminders} <- Docusign.Reminders.decode(data["reminders"]),
        {:ok, use_account_defaults} <-
          case(data["useAccountDefaults"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["useAccountDefaults"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           expirations: expirations,
           reminders: reminders,
           use_account_defaults: use_account_defaults
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["notification" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "expirations" => Docusign.Expirations.encode(data.expirations),
        "reminders" => Docusign.Reminders.encode(data.reminders),
        "useAccountDefaults" => data.use_account_defaults
      }
    end
  end

  defmodule(CommissionExpiration) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["commissionExpiration" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(EventNotification) do
    @moduledoc "#{nil}
    "
    defstruct(
      envelope_events: nil,
      event_data: nil,
      include_certificate_of_completion: nil,
      include_certificate_with_soap: nil,
      include_document_fields: nil,
      include_documents: nil,
      include_envelope_void_reason: nil,
      include_hmac: nil,
      include_sender_account_as_custom_field: nil,
      include_time_zone: nil,
      logging_enabled: nil,
      recipient_events: nil,
      require_acknowledgment: nil,
      sign_message_with_x509_cert: nil,
      soap_name_space: nil,
      url: nil,
      use_soap_interface: nil
    )

    @type t :: %__MODULE__{
            envelope_events: [Docusign.EnvelopeEvent.t()] | nil,
            event_data: Docusign.ConnectEventData.t() | nil,
            include_certificate_of_completion: binary | nil,
            include_certificate_with_soap: binary | nil,
            include_document_fields: binary | nil,
            include_documents: binary | nil,
            include_envelope_void_reason: binary | nil,
            include_hmac: binary | nil,
            include_sender_account_as_custom_field: binary | nil,
            include_time_zone: binary | nil,
            logging_enabled: binary | nil,
            recipient_events: [Docusign.RecipientEvent.t()] | nil,
            require_acknowledgment: binary | nil,
            sign_message_with_x509_cert: binary | nil,
            soap_name_space: binary | nil,
            url: binary | nil,
            use_soap_interface: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, envelope_events} <-
          case(data["envelopeEvents"]) do
            nil ->
              nil

            _ ->
              data["envelopeEvents"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.EnvelopeEvent.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, event_data} <- Docusign.ConnectEventData.decode(data["eventData"]),
        {:ok, include_certificate_of_completion} <-
          case(data["includeCertificateOfCompletion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeCertificateOfCompletion"]}}
          end,
        {:ok, include_certificate_with_soap} <-
          case(data["includeCertificateWithSoap"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeCertificateWithSoap"]}}
          end,
        {:ok, include_document_fields} <-
          case(data["includeDocumentFields"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeDocumentFields"]}}
          end,
        {:ok, include_documents} <-
          case(data["includeDocuments"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeDocuments"]}}
          end,
        {:ok, include_envelope_void_reason} <-
          case(data["includeEnvelopeVoidReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeEnvelopeVoidReason"]}}
          end,
        {:ok, include_hmac} <-
          case(data["includeHMAC"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeHMAC"]}}
          end,
        {:ok, include_sender_account_as_custom_field} <-
          case(data["includeSenderAccountAsCustomField"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeSenderAccountAsCustomField"]}}
          end,
        {:ok, include_time_zone} <-
          case(data["includeTimeZone"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeTimeZone"]}}
          end,
        {:ok, logging_enabled} <-
          case(data["loggingEnabled"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["loggingEnabled"]}}
          end,
        {:ok, recipient_events} <-
          case(data["recipientEvents"]) do
            nil ->
              nil

            _ ->
              data["recipientEvents"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientEvent.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, require_acknowledgment} <-
          case(data["requireAcknowledgment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAcknowledgment"]}}
          end,
        {:ok, sign_message_with_x509_cert} <-
          case(data["signMessageWithX509Cert"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signMessageWithX509Cert"]}}
          end,
        {:ok, soap_name_space} <-
          case(data["soapNameSpace"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["soapNameSpace"]}}
          end,
        {:ok, url} <-
          case(data["url"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["url"]}}
          end,
        {:ok, use_soap_interface} <-
          case(data["useSoapInterface"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["useSoapInterface"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           envelope_events: envelope_events,
           event_data: event_data,
           include_certificate_of_completion: include_certificate_of_completion,
           include_certificate_with_soap: include_certificate_with_soap,
           include_document_fields: include_document_fields,
           include_documents: include_documents,
           include_envelope_void_reason: include_envelope_void_reason,
           include_hmac: include_hmac,
           include_sender_account_as_custom_field: include_sender_account_as_custom_field,
           include_time_zone: include_time_zone,
           logging_enabled: logging_enabled,
           recipient_events: recipient_events,
           require_acknowledgment: require_acknowledgment,
           sign_message_with_x509_cert: sign_message_with_x509_cert,
           soap_name_space: soap_name_space,
           url: url,
           use_soap_interface: use_soap_interface
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["eventNotification" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "envelopeEvents" =>
          case(data.envelope_events) do
            nil ->
              nil

            _ ->
              Enum.map(data.envelope_events, fn item -> Docusign.EnvelopeEvent.encode(item) end)
          end,
        "eventData" => Docusign.ConnectEventData.encode(data.event_data),
        "includeCertificateOfCompletion" => data.include_certificate_of_completion,
        "includeCertificateWithSoap" => data.include_certificate_with_soap,
        "includeDocumentFields" => data.include_document_fields,
        "includeDocuments" => data.include_documents,
        "includeEnvelopeVoidReason" => data.include_envelope_void_reason,
        "includeHMAC" => data.include_hmac,
        "includeSenderAccountAsCustomField" => data.include_sender_account_as_custom_field,
        "includeTimeZone" => data.include_time_zone,
        "loggingEnabled" => data.logging_enabled,
        "recipientEvents" =>
          case(data.recipient_events) do
            nil ->
              nil

            _ ->
              Enum.map(data.recipient_events, fn item -> Docusign.RecipientEvent.encode(item) end)
          end,
        "requireAcknowledgment" => data.require_acknowledgment,
        "signMessageWithX509Cert" => data.sign_message_with_x509_cert,
        "soapNameSpace" => data.soap_name_space,
        "url" => data.url,
        "useSoapInterface" => data.use_soap_interface
      }
    end
  end

  defmodule(Ssn) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      validation_pattern: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      validation_pattern_metadata: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_pattern: binary | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            validation_pattern_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, validation_pattern} <-
          case(data["validationPattern"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationPattern"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, validation_pattern_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationPatternMetadata"]),
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           validation_pattern: validation_pattern,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           validation_pattern_metadata: validation_pattern_metadata,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["ssn" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "validationPattern" => data.validation_pattern,
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "validationPatternMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_pattern_metadata),
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(RecipientSignatureProviderOptions) do
    @moduledoc "#{nil}
    "
    defstruct(
      cpf_number: nil,
      cpf_number_metadata: nil,
      one_time_password: nil,
      one_time_password_metadata: nil,
      signer_role: nil,
      signer_role_metadata: nil,
      sms: nil,
      sms_metadata: nil
    )

    @type t :: %__MODULE__{
            cpf_number: binary | nil,
            cpf_number_metadata: Docusign.PropertyMetadata.t() | nil,
            one_time_password: binary | nil,
            one_time_password_metadata: Docusign.PropertyMetadata.t() | nil,
            signer_role: binary | nil,
            signer_role_metadata: Docusign.PropertyMetadata.t() | nil,
            sms: binary | nil,
            sms_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, cpf_number} <-
          case(data["cpfNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["cpfNumber"]}}
          end,
        {:ok, cpf_number_metadata} <- Docusign.PropertyMetadata.decode(data["cpfNumberMetadata"]),
        {:ok, one_time_password} <-
          case(data["oneTimePassword"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["oneTimePassword"]}}
          end,
        {:ok, one_time_password_metadata} <-
          Docusign.PropertyMetadata.decode(data["oneTimePasswordMetadata"]),
        {:ok, signer_role} <-
          case(data["signerRole"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerRole"]}}
          end,
        {:ok, signer_role_metadata} <-
          Docusign.PropertyMetadata.decode(data["signerRoleMetadata"]),
        {:ok, sms} <-
          case(data["sms"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sms"]}}
          end,
        {:ok, sms_metadata} <- Docusign.PropertyMetadata.decode(data["smsMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           cpf_number: cpf_number,
           cpf_number_metadata: cpf_number_metadata,
           one_time_password: one_time_password,
           one_time_password_metadata: one_time_password_metadata,
           signer_role: signer_role,
           signer_role_metadata: signer_role_metadata,
           sms: sms,
           sms_metadata: sms_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientSignatureProviderOptions" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "cpfNumber" => data.cpf_number,
        "cpfNumberMetadata" => Docusign.PropertyMetadata.encode(data.cpf_number_metadata),
        "oneTimePassword" => data.one_time_password,
        "oneTimePasswordMetadata" =>
          Docusign.PropertyMetadata.encode(data.one_time_password_metadata),
        "signerRole" => data.signer_role,
        "signerRoleMetadata" => Docusign.PropertyMetadata.encode(data.signer_role_metadata),
        "sms" => data.sms,
        "smsMetadata" => Docusign.PropertyMetadata.encode(data.sms_metadata)
      }
    end
  end

  defmodule(PathExtendedElement) do
    @moduledoc "#{nil}
    "
    defstruct(name: nil, type: nil, type_name: nil)
    @type t :: %__MODULE__{name: binary | nil, type: binary | nil, type_name: binary | nil}
    @doc false
    def(decode(data)) do
      with(
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, type} <-
          case(data["type"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["type"]}}
          end,
        {:ok, type_name} <-
          case(data["typeName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["typeName"]}}
          end
      ) do
        {:ok, %__MODULE__{name: name, type: type, type_name: type_name}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["pathExtendedElement" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{"name" => data.name, "type" => data.type, "typeName" => data.type_name}
    end
  end

  defmodule(List) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      list_items: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      list_selected_value: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      list_selected_value_metadata: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            list_items: [Docusign.ListItem.t()] | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            list_selected_value: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            list_selected_value_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, list_items} <-
          case(data["listItems"]) do
            nil ->
              nil

            _ ->
              data["listItems"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.ListItem.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, list_selected_value} <-
          case(data["listSelectedValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["listSelectedValue"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, list_selected_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["listSelectedValueMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           list_items: list_items,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           list_selected_value: list_selected_value,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           list_selected_value_metadata: list_selected_value_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["list" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "listItems" =>
          case(data.list_items) do
            nil ->
              nil

            _ ->
              Enum.map(data.list_items, fn item -> Docusign.ListItem.encode(item) end)
          end,
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "listSelectedValue" => data.list_selected_value,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "listSelectedValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.list_selected_value_metadata)
      }
    end
  end

  defmodule(Number) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      validation_pattern: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      require_all: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      validation_message_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      validation_pattern_metadata: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      require_all_metadata: nil,
      width_metadata: nil,
      validation_message: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      sender_required: nil,
      sender_required_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      formula: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      formula_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_pattern: binary | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            require_all: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            validation_pattern_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            require_all_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            validation_message: binary | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            sender_required: binary | nil,
            sender_required_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            formula: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            formula_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, validation_pattern} <-
          case(data["validationPattern"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationPattern"]}}
          end,
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, require_all} <-
          case(data["requireAll"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireAll"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, validation_message_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationMessageMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, validation_pattern_metadata} <-
          Docusign.PropertyMetadata.decode(data["validationPatternMetadata"]),
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, require_all_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireAllMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, validation_message} <-
          case(data["validationMessage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["validationMessage"]}}
          end,
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, sender_required} <-
          case(data["senderRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["senderRequired"]}}
          end,
        {:ok, sender_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["senderRequiredMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, formula} <-
          case(data["formula"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formula"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, formula_metadata} <- Docusign.PropertyMetadata.decode(data["formulaMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           validation_pattern: validation_pattern,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           require_all: require_all,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           validation_message_metadata: validation_message_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           validation_pattern_metadata: validation_pattern_metadata,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           require_all_metadata: require_all_metadata,
           width_metadata: width_metadata,
           validation_message: validation_message,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           sender_required: sender_required,
           sender_required_metadata: sender_required_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           formula: formula,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           formula_metadata: formula_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["number" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "validationPattern" => data.validation_pattern,
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "requireAll" => data.require_all,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "validationMessageMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_message_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "validationPatternMetadata" =>
          Docusign.PropertyMetadata.encode(data.validation_pattern_metadata),
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "requireAllMetadata" => Docusign.PropertyMetadata.encode(data.require_all_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "validationMessage" => data.validation_message,
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "senderRequired" => data.sender_required,
        "senderRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.sender_required_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "formula" => data.formula,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "formulaMetadata" => Docusign.PropertyMetadata.encode(data.formula_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(Decline) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      font_size: nil,
      height: nil,
      font: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      decline_reason: nil,
      merge_field: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      button_text_metadata: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil,
      decline_reason_metadata: nil,
      button_text: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            decline_reason: binary | nil,
            merge_field: Docusign.MergeField.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            button_text_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil,
            decline_reason_metadata: Docusign.PropertyMetadata.t() | nil,
            button_text: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, decline_reason} <-
          case(data["declineReason"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["declineReason"]}}
          end,
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, button_text_metadata} <-
          Docusign.PropertyMetadata.decode(data["buttonTextMetadata"]),
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, decline_reason_metadata} <-
          Docusign.PropertyMetadata.decode(data["declineReasonMetadata"]),
        {:ok, button_text} <-
          case(data["buttonText"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["buttonText"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           font_size: font_size,
           height: height,
           font: font,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           decline_reason: decline_reason,
           merge_field: merge_field,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           button_text_metadata: button_text_metadata,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels,
           decline_reason_metadata: decline_reason_metadata,
           button_text: button_text
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["decline" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "declineReason" => data.decline_reason,
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "buttonTextMetadata" => Docusign.PropertyMetadata.encode(data.button_text_metadata),
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end,
        "declineReasonMetadata" => Docusign.PropertyMetadata.encode(data.decline_reason_metadata),
        "buttonText" => data.button_text
      }
    end
  end

  defmodule(EmailSettings) do
    @moduledoc "#{nil}
    "
    defstruct(
      bcc_email_addresses: nil,
      reply_email_address_override: nil,
      reply_email_name_override: nil
    )

    @type t :: %__MODULE__{
            bcc_email_addresses: [Docusign.BccEmailAddress.t()] | nil,
            reply_email_address_override: binary | nil,
            reply_email_name_override: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, bcc_email_addresses} <-
          case(data["bccEmailAddresses"]) do
            nil ->
              nil

            _ ->
              data["bccEmailAddresses"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.BccEmailAddress.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, reply_email_address_override} <-
          case(data["replyEmailAddressOverride"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["replyEmailAddressOverride"]}}
          end,
        {:ok, reply_email_name_override} <-
          case(data["replyEmailNameOverride"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["replyEmailNameOverride"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           bcc_email_addresses: bcc_email_addresses,
           reply_email_address_override: reply_email_address_override,
           reply_email_name_override: reply_email_name_override
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["emailSettings" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "bccEmailAddresses" =>
          case(data.bcc_email_addresses) do
            nil ->
              nil

            _ ->
              Enum.map(data.bcc_email_addresses, fn item ->
                Docusign.BccEmailAddress.encode(item)
              end)
          end,
        "replyEmailAddressOverride" => data.reply_email_address_override,
        "replyEmailNameOverride" => data.reply_email_name_override
      }
    end
  end

  defmodule(LocalePolicyTab) do
    @moduledoc "#{nil}
    "
    defstruct(
      address_format: nil,
      calendar_type: nil,
      culture_name: nil,
      currency_code: nil,
      currency_negative_format: nil,
      currency_positive_format: nil,
      custom_date_format: nil,
      custom_time_format: nil,
      date_format: nil,
      initial_format: nil,
      name_format: nil,
      time_format: nil,
      time_zone: nil
    )

    @type t :: %__MODULE__{
            address_format: binary | nil,
            calendar_type: binary | nil,
            culture_name: binary | nil,
            currency_code: binary | nil,
            currency_negative_format: binary | nil,
            currency_positive_format: binary | nil,
            custom_date_format: binary | nil,
            custom_time_format: binary | nil,
            date_format: binary | nil,
            initial_format: binary | nil,
            name_format: binary | nil,
            time_format: binary | nil,
            time_zone: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, address_format} <-
          case(data["addressFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["addressFormat"]}}
          end,
        {:ok, calendar_type} <-
          case(data["calendarType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["calendarType"]}}
          end,
        {:ok, culture_name} <-
          case(data["cultureName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["cultureName"]}}
          end,
        {:ok, currency_code} <-
          case(data["currencyCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["currencyCode"]}}
          end,
        {:ok, currency_negative_format} <-
          case(data["currencyNegativeFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["currencyNegativeFormat"]}}
          end,
        {:ok, currency_positive_format} <-
          case(data["currencyPositiveFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["currencyPositiveFormat"]}}
          end,
        {:ok, custom_date_format} <-
          case(data["customDateFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customDateFormat"]}}
          end,
        {:ok, custom_time_format} <-
          case(data["customTimeFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTimeFormat"]}}
          end,
        {:ok, date_format} <-
          case(data["dateFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["dateFormat"]}}
          end,
        {:ok, initial_format} <-
          case(data["initialFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["initialFormat"]}}
          end,
        {:ok, name_format} <-
          case(data["nameFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["nameFormat"]}}
          end,
        {:ok, time_format} <-
          case(data["timeFormat"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["timeFormat"]}}
          end,
        {:ok, time_zone} <-
          case(data["timeZone"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["timeZone"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           address_format: address_format,
           calendar_type: calendar_type,
           culture_name: culture_name,
           currency_code: currency_code,
           currency_negative_format: currency_negative_format,
           currency_positive_format: currency_positive_format,
           custom_date_format: custom_date_format,
           custom_time_format: custom_time_format,
           date_format: date_format,
           initial_format: initial_format,
           name_format: name_format,
           time_format: time_format,
           time_zone: time_zone
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["localePolicyTab" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "addressFormat" => data.address_format,
        "calendarType" => data.calendar_type,
        "cultureName" => data.culture_name,
        "currencyCode" => data.currency_code,
        "currencyNegativeFormat" => data.currency_negative_format,
        "currencyPositiveFormat" => data.currency_positive_format,
        "customDateFormat" => data.custom_date_format,
        "customTimeFormat" => data.custom_time_format,
        "dateFormat" => data.date_format,
        "initialFormat" => data.initial_format,
        "nameFormat" => data.name_format,
        "timeFormat" => data.time_format,
        "timeZone" => data.time_zone
      }
    end
  end

  defmodule(Note) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["note" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(Document) do
    @moduledoc "#{nil}
    "
    defstruct(
      apply_anchor_tabs: nil,
      assign_tabs_to_recipient_id: nil,
      display: nil,
      document_base64: nil,
      document_fields: nil,
      document_id: nil,
      encrypted_with_key_manager: nil,
      file_extension: nil,
      file_format_hint: nil,
      html_definition: nil,
      include_in_download: nil,
      match_boxes: nil,
      name: nil,
      order: nil,
      pages: nil,
      password: nil,
      pdf_form_field_option: nil,
      remote_url: nil,
      signer_must_acknowledge: nil,
      signer_must_acknowledge_use_account_default: nil,
      tabs: nil,
      template_locked: nil,
      template_required: nil,
      transform_pdf_fields: nil,
      uri: nil
    )

    @type t :: %__MODULE__{
            apply_anchor_tabs: binary | nil,
            assign_tabs_to_recipient_id: binary | nil,
            display: binary | nil,
            document_base64: binary | nil,
            document_fields: [Docusign.NameValue.t()] | nil,
            document_id: binary | nil,
            encrypted_with_key_manager: binary | nil,
            file_extension: binary | nil,
            file_format_hint: binary | nil,
            html_definition: Docusign.DocumentHtmlDefinition.t() | nil,
            include_in_download: binary | nil,
            match_boxes: [Docusign.MatchBox.t()] | nil,
            name: binary | nil,
            order: binary | nil,
            pages: binary | nil,
            password: binary | nil,
            pdf_form_field_option: binary | nil,
            remote_url: binary | nil,
            signer_must_acknowledge: binary | nil,
            signer_must_acknowledge_use_account_default: boolean | nil,
            tabs: Docusign.EnvelopeRecipientTabs.t() | nil,
            template_locked: binary | nil,
            template_required: binary | nil,
            transform_pdf_fields: binary | nil,
            uri: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, apply_anchor_tabs} <-
          case(data["applyAnchorTabs"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["applyAnchorTabs"]}}
          end,
        {:ok, assign_tabs_to_recipient_id} <-
          case(data["assignTabsToRecipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["assignTabsToRecipientId"]}}
          end,
        {:ok, display} <-
          case(data["display"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["display"]}}
          end,
        {:ok, document_base64} <-
          case(data["documentBase64"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentBase64"]}}
          end,
        {:ok, document_fields} <-
          case(data["documentFields"]) do
            nil ->
              nil

            _ ->
              data["documentFields"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.NameValue.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, encrypted_with_key_manager} <-
          case(data["encryptedWithKeyManager"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["encryptedWithKeyManager"]}}
          end,
        {:ok, file_extension} <-
          case(data["fileExtension"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fileExtension"]}}
          end,
        {:ok, file_format_hint} <-
          case(data["fileFormatHint"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fileFormatHint"]}}
          end,
        {:ok, html_definition} <- Docusign.DocumentHtmlDefinition.decode(data["htmlDefinition"]),
        {:ok, include_in_download} <-
          case(data["includeInDownload"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["includeInDownload"]}}
          end,
        {:ok, match_boxes} <-
          case(data["matchBoxes"]) do
            nil ->
              nil

            _ ->
              data["matchBoxes"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.MatchBox.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, order} <-
          case(data["order"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["order"]}}
          end,
        {:ok, pages} <-
          case(data["pages"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pages"]}}
          end,
        {:ok, password} <-
          case(data["password"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["password"]}}
          end,
        {:ok, pdf_form_field_option} <-
          case(data["pdfFormFieldOption"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pdfFormFieldOption"]}}
          end,
        {:ok, remote_url} <-
          case(data["remoteUrl"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["remoteUrl"]}}
          end,
        {:ok, signer_must_acknowledge} <-
          case(data["signerMustAcknowledge"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["signerMustAcknowledge"]}}
          end,
        {:ok, signer_must_acknowledge_use_account_default} <-
          case(data["signerMustAcknowledgeUseAccountDefault"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error,
               {:decode, {:invalid_boolean, x}, ["signerMustAcknowledgeUseAccountDefault"]}}
          end,
        {:ok, tabs} <- Docusign.EnvelopeRecipientTabs.decode(data["tabs"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, transform_pdf_fields} <-
          case(data["transformPdfFields"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["transformPdfFields"]}}
          end,
        {:ok, uri} <-
          case(data["uri"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["uri"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           apply_anchor_tabs: apply_anchor_tabs,
           assign_tabs_to_recipient_id: assign_tabs_to_recipient_id,
           display: display,
           document_base64: document_base64,
           document_fields: document_fields,
           document_id: document_id,
           encrypted_with_key_manager: encrypted_with_key_manager,
           file_extension: file_extension,
           file_format_hint: file_format_hint,
           html_definition: html_definition,
           include_in_download: include_in_download,
           match_boxes: match_boxes,
           name: name,
           order: order,
           pages: pages,
           password: password,
           pdf_form_field_option: pdf_form_field_option,
           remote_url: remote_url,
           signer_must_acknowledge: signer_must_acknowledge,
           signer_must_acknowledge_use_account_default:
             signer_must_acknowledge_use_account_default,
           tabs: tabs,
           template_locked: template_locked,
           template_required: template_required,
           transform_pdf_fields: transform_pdf_fields,
           uri: uri
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["document" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "applyAnchorTabs" => data.apply_anchor_tabs,
        "assignTabsToRecipientId" => data.assign_tabs_to_recipient_id,
        "display" => data.display,
        "documentBase64" => data.document_base64,
        "documentFields" =>
          case(data.document_fields) do
            nil ->
              nil

            _ ->
              Enum.map(data.document_fields, fn item -> Docusign.NameValue.encode(item) end)
          end,
        "documentId" => data.document_id,
        "encryptedWithKeyManager" => data.encrypted_with_key_manager,
        "fileExtension" => data.file_extension,
        "fileFormatHint" => data.file_format_hint,
        "htmlDefinition" => Docusign.DocumentHtmlDefinition.encode(data.html_definition),
        "includeInDownload" => data.include_in_download,
        "matchBoxes" =>
          case(data.match_boxes) do
            nil ->
              nil

            _ ->
              Enum.map(data.match_boxes, fn item -> Docusign.MatchBox.encode(item) end)
          end,
        "name" => data.name,
        "order" => data.order,
        "pages" => data.pages,
        "password" => data.password,
        "pdfFormFieldOption" => data.pdf_form_field_option,
        "remoteUrl" => data.remote_url,
        "signerMustAcknowledge" => data.signer_must_acknowledge,
        "signerMustAcknowledgeUseAccountDefault" =>
          data.signer_must_acknowledge_use_account_default,
        "tabs" => Docusign.EnvelopeRecipientTabs.encode(data.tabs),
        "templateLocked" => data.template_locked,
        "templateRequired" => data.template_required,
        "transformPdfFields" => data.transform_pdf_fields,
        "uri" => data.uri
      }
    end
  end

  defmodule(RecipientEmailNotification) do
    @moduledoc "#{nil}
    "
    defstruct(
      email_body: nil,
      email_body_metadata: nil,
      email_subject: nil,
      email_subject_metadata: nil,
      supported_language: nil,
      supported_language_metadata: nil
    )

    @type t :: %__MODULE__{
            email_body: binary | nil,
            email_body_metadata: Docusign.PropertyMetadata.t() | nil,
            email_subject: binary | nil,
            email_subject_metadata: Docusign.PropertyMetadata.t() | nil,
            supported_language: binary | nil,
            supported_language_metadata: Docusign.PropertyMetadata.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, email_body} <-
          case(data["emailBody"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailBody"]}}
          end,
        {:ok, email_body_metadata} <- Docusign.PropertyMetadata.decode(data["emailBodyMetadata"]),
        {:ok, email_subject} <-
          case(data["emailSubject"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["emailSubject"]}}
          end,
        {:ok, email_subject_metadata} <-
          Docusign.PropertyMetadata.decode(data["emailSubjectMetadata"]),
        {:ok, supported_language} <-
          case(data["supportedLanguage"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["supportedLanguage"]}}
          end,
        {:ok, supported_language_metadata} <-
          Docusign.PropertyMetadata.decode(data["supportedLanguageMetadata"])
      ) do
        {:ok,
         %__MODULE__{
           email_body: email_body,
           email_body_metadata: email_body_metadata,
           email_subject: email_subject,
           email_subject_metadata: email_subject_metadata,
           supported_language: supported_language,
           supported_language_metadata: supported_language_metadata
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientEmailNotification" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "emailBody" => data.email_body,
        "emailBodyMetadata" => Docusign.PropertyMetadata.encode(data.email_body_metadata),
        "emailSubject" => data.email_subject,
        "emailSubjectMetadata" => Docusign.PropertyMetadata.encode(data.email_subject_metadata),
        "supportedLanguage" => data.supported_language,
        "supportedLanguageMetadata" =>
          Docusign.PropertyMetadata.encode(data.supported_language_metadata)
      }
    end
  end

  defmodule(Page) do
    @moduledoc "#{nil}
    "
    defstruct(
      dpi: nil,
      error_details: nil,
      height: nil,
      image_bytes: nil,
      mime_type: nil,
      page_id: nil,
      sequence: nil,
      width: nil
    )

    @type t :: %__MODULE__{
            dpi: binary | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            height: binary | nil,
            image_bytes: binary | nil,
            mime_type: binary | nil,
            page_id: binary | nil,
            sequence: binary | nil,
            width: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, dpi} <-
          case(data["dpi"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["dpi"]}}
          end,
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, image_bytes} <-
          case(data["imageBytes"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["imageBytes"]}}
          end,
        {:ok, mime_type} <-
          case(data["mimeType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mimeType"]}}
          end,
        {:ok, page_id} <-
          case(data["pageId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageId"]}}
          end,
        {:ok, sequence} <-
          case(data["sequence"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["sequence"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           dpi: dpi,
           error_details: error_details,
           height: height,
           image_bytes: image_bytes,
           mime_type: mime_type,
           page_id: page_id,
           sequence: sequence,
           width: width
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["page" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "dpi" => data.dpi,
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "height" => data.height,
        "imageBytes" => data.image_bytes,
        "mimeType" => data.mime_type,
        "pageId" => data.page_id,
        "sequence" => data.sequence,
        "width" => data.width
      }
    end
  end

  defmodule(Checkbox) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      selected_metadata: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      font_size: nil,
      height: nil,
      font: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      selected: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      shared_metadata: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      require_initial_on_shared_change: nil,
      tab_id_metadata: nil,
      shared: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      require_initial_on_shared_change_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            selected_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            selected: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            shared_metadata: Docusign.PropertyMetadata.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            require_initial_on_shared_change: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            shared: binary | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            require_initial_on_shared_change_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, selected_metadata} <- Docusign.PropertyMetadata.decode(data["selectedMetadata"]),
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, selected} <-
          case(data["selected"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["selected"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, shared_metadata} <- Docusign.PropertyMetadata.decode(data["sharedMetadata"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, require_initial_on_shared_change} <-
          case(data["requireInitialOnSharedChange"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["requireInitialOnSharedChange"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, shared} <-
          case(data["shared"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["shared"]}}
          end,
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, require_initial_on_shared_change_metadata} <-
          Docusign.PropertyMetadata.decode(data["requireInitialOnSharedChangeMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           selected_metadata: selected_metadata,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           font_size: font_size,
           height: height,
           font: font,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           selected: selected,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           shared_metadata: shared_metadata,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           require_initial_on_shared_change: require_initial_on_shared_change,
           tab_id_metadata: tab_id_metadata,
           shared: shared,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           require_initial_on_shared_change_metadata: require_initial_on_shared_change_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["checkbox" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "selectedMetadata" => Docusign.PropertyMetadata.encode(data.selected_metadata),
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "selected" => data.selected,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "sharedMetadata" => Docusign.PropertyMetadata.encode(data.shared_metadata),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "requireInitialOnSharedChange" => data.require_initial_on_shared_change,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "shared" => data.shared,
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "requireInitialOnSharedChangeMetadata" =>
          Docusign.PropertyMetadata.encode(data.require_initial_on_shared_change_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(PaymentDetails) do
    @moduledoc "#{nil}
    "
    defstruct(
      allowed_payment_methods: nil,
      charge_id: nil,
      currency_code: nil,
      currency_code_metadata: nil,
      custom_metadata: nil,
      custom_metadata_required: nil,
      customer_id: nil,
      gateway_account_id: nil,
      gateway_account_id_metadata: nil,
      gateway_display_name: nil,
      gateway_name: nil,
      line_items: nil,
      payment_option: nil,
      payment_source_id: nil,
      signer_values: nil,
      status: nil,
      total: nil
    )

    @type t :: %__MODULE__{
            allowed_payment_methods: [binary] | nil,
            charge_id: binary | nil,
            currency_code: binary | nil,
            currency_code_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_metadata: binary | nil,
            custom_metadata_required: boolean | nil,
            customer_id: binary | nil,
            gateway_account_id: binary | nil,
            gateway_account_id_metadata: Docusign.PropertyMetadata.t() | nil,
            gateway_display_name: binary | nil,
            gateway_name: binary | nil,
            line_items: [Docusign.PaymentLineItem.t()] | nil,
            payment_option: binary | nil,
            payment_source_id: binary | nil,
            signer_values: Docusign.PaymentSignerValues.t() | nil,
            status: binary | nil,
            total: Docusign.Money.t() | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, allowed_payment_methods} <-
          case(data["allowedPaymentMethods"]) do
            nil ->
              nil

            _ ->
              data["allowedPaymentMethods"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, charge_id} <-
          case(data["chargeId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["chargeId"]}}
          end,
        {:ok, currency_code} <-
          case(data["currencyCode"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["currencyCode"]}}
          end,
        {:ok, currency_code_metadata} <-
          Docusign.PropertyMetadata.decode(data["currencyCodeMetadata"]),
        {:ok, custom_metadata} <-
          case(data["customMetadata"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customMetadata"]}}
          end,
        {:ok, custom_metadata_required} <-
          case(data["customMetadataRequired"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["customMetadataRequired"]}}
          end,
        {:ok, customer_id} <-
          case(data["customerId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customerId"]}}
          end,
        {:ok, gateway_account_id} <-
          case(data["gatewayAccountId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["gatewayAccountId"]}}
          end,
        {:ok, gateway_account_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["gatewayAccountIdMetadata"]),
        {:ok, gateway_display_name} <-
          case(data["gatewayDisplayName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["gatewayDisplayName"]}}
          end,
        {:ok, gateway_name} <-
          case(data["gatewayName"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["gatewayName"]}}
          end,
        {:ok, line_items} <-
          case(data["lineItems"]) do
            nil ->
              nil

            _ ->
              data["lineItems"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.PaymentLineItem.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, payment_option} <-
          case(data["paymentOption"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["paymentOption"]}}
          end,
        {:ok, payment_source_id} <-
          case(data["paymentSourceId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["paymentSourceId"]}}
          end,
        {:ok, signer_values} <- Docusign.PaymentSignerValues.decode(data["signerValues"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, total} <- Docusign.Money.decode(data["total"])
      ) do
        {:ok,
         %__MODULE__{
           allowed_payment_methods: allowed_payment_methods,
           charge_id: charge_id,
           currency_code: currency_code,
           currency_code_metadata: currency_code_metadata,
           custom_metadata: custom_metadata,
           custom_metadata_required: custom_metadata_required,
           customer_id: customer_id,
           gateway_account_id: gateway_account_id,
           gateway_account_id_metadata: gateway_account_id_metadata,
           gateway_display_name: gateway_display_name,
           gateway_name: gateway_name,
           line_items: line_items,
           payment_option: payment_option,
           payment_source_id: payment_source_id,
           signer_values: signer_values,
           status: status,
           total: total
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["paymentDetails" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "allowedPaymentMethods" =>
          case(data.allowed_payment_methods) do
            nil ->
              nil

            _ ->
              Enum.map(data.allowed_payment_methods, fn item -> item end)
          end,
        "chargeId" => data.charge_id,
        "currencyCode" => data.currency_code,
        "currencyCodeMetadata" => Docusign.PropertyMetadata.encode(data.currency_code_metadata),
        "customMetadata" => data.custom_metadata,
        "customMetadataRequired" => data.custom_metadata_required,
        "customerId" => data.customer_id,
        "gatewayAccountId" => data.gateway_account_id,
        "gatewayAccountIdMetadata" =>
          Docusign.PropertyMetadata.encode(data.gateway_account_id_metadata),
        "gatewayDisplayName" => data.gateway_display_name,
        "gatewayName" => data.gateway_name,
        "lineItems" =>
          case(data.line_items) do
            nil ->
              nil

            _ ->
              Enum.map(data.line_items, fn item -> Docusign.PaymentLineItem.encode(item) end)
          end,
        "paymentOption" => data.payment_option,
        "paymentSourceId" => data.payment_source_id,
        "signerValues" => Docusign.PaymentSignerValues.encode(data.signer_values),
        "status" => data.status,
        "total" => Docusign.Money.encode(data.total)
      }
    end
  end

  defmodule(Title) do
    @moduledoc "#{nil}
    "
    defstruct(
      form_page_label_metadata: nil,
      locale_policy: nil,
      conceal_value_on_document: nil,
      conceal_value_on_document_metadata: nil,
      x_position: nil,
      name: nil,
      form_order: nil,
      tab_order: nil,
      template_locked_metadata: nil,
      anchor_case_sensitive: nil,
      anchor_allow_white_space_in_characters: nil,
      x_position_metadata: nil,
      error_details: nil,
      recipient_id: nil,
      disable_auto_size_metadata: nil,
      conditional_parent_value_metadata: nil,
      recipient_id_guid: nil,
      y_position_metadata: nil,
      page_number: nil,
      anchor_case_sensitive_metadata: nil,
      anchor_x_offset: nil,
      width: nil,
      value_metadata: nil,
      original_value_metadata: nil,
      font_size: nil,
      height: nil,
      font: nil,
      value: nil,
      anchor_ignore_if_not_present: nil,
      status_metadata: nil,
      anchor_string: nil,
      tab_label_metadata: nil,
      conditional_parent_label_metadata: nil,
      smart_contract_information: nil,
      anchor_horizontal_alignment: nil,
      tooltip: nil,
      font_color_metadata: nil,
      custom_tab_id_metadata: nil,
      anchor_string_metadata: nil,
      template_required_metadata: nil,
      anchor_tab_processor_version: nil,
      font_color: nil,
      font_size_metadata: nil,
      custom_tab_id: nil,
      recipient_id_guid_metadata: nil,
      page_number_metadata: nil,
      width_metadata: nil,
      locked_metadata: nil,
      merge_field: nil,
      required_metadata: nil,
      tab_id: nil,
      anchor_units_metadata: nil,
      italic_metadata: nil,
      required: nil,
      tab_id_metadata: nil,
      form_page_label: nil,
      merge_field_xml: nil,
      anchor_y_offset: nil,
      height_metadata: nil,
      template_locked: nil,
      tab_order_metadata: nil,
      italic: nil,
      tab_type: nil,
      source: nil,
      anchor_tab_processor_version_metadata: nil,
      original_value: nil,
      max_length_metadata: nil,
      anchor_y_offset_metadata: nil,
      bold_metadata: nil,
      underline_metadata: nil,
      document_id: nil,
      conditional_parent_value: nil,
      template_required: nil,
      bold: nil,
      underline: nil,
      anchor_ignore_if_not_present_metadata: nil,
      max_length: nil,
      y_position: nil,
      tab_group_labels_metadata: nil,
      anchor_horizontal_alignment_metadata: nil,
      form_page_number: nil,
      form_page_number_metadata: nil,
      document_id_metadata: nil,
      anchor_units: nil,
      font_metadata: nil,
      anchor_allow_white_space_in_characters_metadata: nil,
      name_metadata: nil,
      tab_label: nil,
      anchor_x_offset_metadata: nil,
      disable_auto_size: nil,
      form_order_metadata: nil,
      status: nil,
      anchor_match_whole_word_metadata: nil,
      tool_tip_metadata: nil,
      conditional_parent_label: nil,
      locked: nil,
      tab_type_metadata: nil,
      recipient_id_metadata: nil,
      anchor_match_whole_word: nil,
      tab_group_labels: nil
    )

    @type t :: %__MODULE__{
            form_page_label_metadata: Docusign.PropertyMetadata.t() | nil,
            locale_policy: Docusign.LocalePolicyTab.t() | nil,
            conceal_value_on_document: binary | nil,
            conceal_value_on_document_metadata: Docusign.PropertyMetadata.t() | nil,
            x_position: binary | nil,
            name: binary | nil,
            form_order: binary | nil,
            tab_order: binary | nil,
            template_locked_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_case_sensitive: binary | nil,
            anchor_allow_white_space_in_characters: binary | nil,
            x_position_metadata: Docusign.PropertyMetadata.t() | nil,
            error_details: Docusign.ErrorDetails.t() | nil,
            recipient_id: binary | nil,
            disable_auto_size_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_value_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_guid: binary | nil,
            y_position_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number: binary | nil,
            anchor_case_sensitive_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_x_offset: binary | nil,
            width: binary | nil,
            value_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value_metadata: Docusign.PropertyMetadata.t() | nil,
            font_size: binary | nil,
            height: binary | nil,
            font: binary | nil,
            value: binary | nil,
            anchor_ignore_if_not_present: binary | nil,
            status_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string: binary | nil,
            tab_label_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label_metadata: Docusign.PropertyMetadata.t() | nil,
            smart_contract_information: Docusign.SmartContractInformation.t() | nil,
            anchor_horizontal_alignment: binary | nil,
            tooltip: binary | nil,
            font_color_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_string_metadata: Docusign.PropertyMetadata.t() | nil,
            template_required_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_tab_processor_version: binary | nil,
            font_color: binary | nil,
            font_size_metadata: Docusign.PropertyMetadata.t() | nil,
            custom_tab_id: binary | nil,
            recipient_id_guid_metadata: Docusign.PropertyMetadata.t() | nil,
            page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            width_metadata: Docusign.PropertyMetadata.t() | nil,
            locked_metadata: Docusign.PropertyMetadata.t() | nil,
            merge_field: Docusign.MergeField.t() | nil,
            required_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_id: binary | nil,
            anchor_units_metadata: Docusign.PropertyMetadata.t() | nil,
            italic_metadata: Docusign.PropertyMetadata.t() | nil,
            required: binary | nil,
            tab_id_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_label: binary | nil,
            merge_field_xml: binary | nil,
            anchor_y_offset: binary | nil,
            height_metadata: Docusign.PropertyMetadata.t() | nil,
            template_locked: binary | nil,
            tab_order_metadata: Docusign.PropertyMetadata.t() | nil,
            italic: binary | nil,
            tab_type: binary | nil,
            source: binary | nil,
            anchor_tab_processor_version_metadata: Docusign.PropertyMetadata.t() | nil,
            original_value: binary | nil,
            max_length_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_y_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            bold_metadata: Docusign.PropertyMetadata.t() | nil,
            underline_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id: binary | nil,
            conditional_parent_value: binary | nil,
            template_required: binary | nil,
            bold: binary | nil,
            underline: binary | nil,
            anchor_ignore_if_not_present_metadata: Docusign.PropertyMetadata.t() | nil,
            max_length: binary | nil,
            y_position: binary | nil,
            tab_group_labels_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_horizontal_alignment_metadata: Docusign.PropertyMetadata.t() | nil,
            form_page_number: binary | nil,
            form_page_number_metadata: Docusign.PropertyMetadata.t() | nil,
            document_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_units: binary | nil,
            font_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_allow_white_space_in_characters_metadata: Docusign.PropertyMetadata.t() | nil,
            name_metadata: Docusign.PropertyMetadata.t() | nil,
            tab_label: binary | nil,
            anchor_x_offset_metadata: Docusign.PropertyMetadata.t() | nil,
            disable_auto_size: binary | nil,
            form_order_metadata: Docusign.PropertyMetadata.t() | nil,
            status: binary | nil,
            anchor_match_whole_word_metadata: Docusign.PropertyMetadata.t() | nil,
            tool_tip_metadata: Docusign.PropertyMetadata.t() | nil,
            conditional_parent_label: binary | nil,
            locked: binary | nil,
            tab_type_metadata: Docusign.PropertyMetadata.t() | nil,
            recipient_id_metadata: Docusign.PropertyMetadata.t() | nil,
            anchor_match_whole_word: binary | nil,
            tab_group_labels: [binary] | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, form_page_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageLabelMetadata"]),
        {:ok, locale_policy} <- Docusign.LocalePolicyTab.decode(data["localePolicy"]),
        {:ok, conceal_value_on_document} <-
          case(data["concealValueOnDocument"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["concealValueOnDocument"]}}
          end,
        {:ok, conceal_value_on_document_metadata} <-
          Docusign.PropertyMetadata.decode(data["concealValueOnDocumentMetadata"]),
        {:ok, x_position} <-
          case(data["xPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["xPosition"]}}
          end,
        {:ok, name} <-
          case(data["name"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["name"]}}
          end,
        {:ok, form_order} <-
          case(data["formOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formOrder"]}}
          end,
        {:ok, tab_order} <-
          case(data["tabOrder"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabOrder"]}}
          end,
        {:ok, template_locked_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateLockedMetadata"]),
        {:ok, anchor_case_sensitive} <-
          case(data["anchorCaseSensitive"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorCaseSensitive"]}}
          end,
        {:ok, anchor_allow_white_space_in_characters} <-
          case(data["anchorAllowWhiteSpaceInCharacters"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorAllowWhiteSpaceInCharacters"]}}
          end,
        {:ok, x_position_metadata} <- Docusign.PropertyMetadata.decode(data["xPositionMetadata"]),
        {:ok, error_details} <- Docusign.ErrorDetails.decode(data["errorDetails"]),
        {:ok, recipient_id} <-
          case(data["recipientId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientId"]}}
          end,
        {:ok, disable_auto_size_metadata} <-
          Docusign.PropertyMetadata.decode(data["disableAutoSizeMetadata"]),
        {:ok, conditional_parent_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentValueMetadata"]),
        {:ok, recipient_id_guid} <-
          case(data["recipientIdGuid"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["recipientIdGuid"]}}
          end,
        {:ok, y_position_metadata} <- Docusign.PropertyMetadata.decode(data["yPositionMetadata"]),
        {:ok, page_number} <-
          case(data["pageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["pageNumber"]}}
          end,
        {:ok, anchor_case_sensitive_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorCaseSensitiveMetadata"]),
        {:ok, anchor_x_offset} <-
          case(data["anchorXOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorXOffset"]}}
          end,
        {:ok, width} <-
          case(data["width"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["width"]}}
          end,
        {:ok, value_metadata} <- Docusign.PropertyMetadata.decode(data["valueMetadata"]),
        {:ok, original_value_metadata} <-
          Docusign.PropertyMetadata.decode(data["originalValueMetadata"]),
        {:ok, font_size} <-
          case(data["fontSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontSize"]}}
          end,
        {:ok, height} <-
          case(data["height"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["height"]}}
          end,
        {:ok, font} <-
          case(data["font"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["font"]}}
          end,
        {:ok, value} <-
          case(data["value"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["value"]}}
          end,
        {:ok, anchor_ignore_if_not_present} <-
          case(data["anchorIgnoreIfNotPresent"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorIgnoreIfNotPresent"]}}
          end,
        {:ok, status_metadata} <- Docusign.PropertyMetadata.decode(data["statusMetadata"]),
        {:ok, anchor_string} <-
          case(data["anchorString"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorString"]}}
          end,
        {:ok, tab_label_metadata} <- Docusign.PropertyMetadata.decode(data["tabLabelMetadata"]),
        {:ok, conditional_parent_label_metadata} <-
          Docusign.PropertyMetadata.decode(data["conditionalParentLabelMetadata"]),
        {:ok, smart_contract_information} <-
          Docusign.SmartContractInformation.decode(data["smartContractInformation"]),
        {:ok, anchor_horizontal_alignment} <-
          case(data["anchorHorizontalAlignment"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorHorizontalAlignment"]}}
          end,
        {:ok, tooltip} <-
          case(data["tooltip"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tooltip"]}}
          end,
        {:ok, font_color_metadata} <- Docusign.PropertyMetadata.decode(data["fontColorMetadata"]),
        {:ok, custom_tab_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["customTabIdMetadata"]),
        {:ok, anchor_string_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorStringMetadata"]),
        {:ok, template_required_metadata} <-
          Docusign.PropertyMetadata.decode(data["templateRequiredMetadata"]),
        {:ok, anchor_tab_processor_version} <-
          case(data["anchorTabProcessorVersion"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorTabProcessorVersion"]}}
          end,
        {:ok, font_color} <-
          case(data["fontColor"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["fontColor"]}}
          end,
        {:ok, font_size_metadata} <- Docusign.PropertyMetadata.decode(data["fontSizeMetadata"]),
        {:ok, custom_tab_id} <-
          case(data["customTabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["customTabId"]}}
          end,
        {:ok, recipient_id_guid_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdGuidMetadata"]),
        {:ok, page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["pageNumberMetadata"]),
        {:ok, width_metadata} <- Docusign.PropertyMetadata.decode(data["widthMetadata"]),
        {:ok, locked_metadata} <- Docusign.PropertyMetadata.decode(data["lockedMetadata"]),
        {:ok, merge_field} <- Docusign.MergeField.decode(data["mergeField"]),
        {:ok, required_metadata} <- Docusign.PropertyMetadata.decode(data["requiredMetadata"]),
        {:ok, tab_id} <-
          case(data["tabId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabId"]}}
          end,
        {:ok, anchor_units_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorUnitsMetadata"]),
        {:ok, italic_metadata} <- Docusign.PropertyMetadata.decode(data["italicMetadata"]),
        {:ok, required} <-
          case(data["required"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["required"]}}
          end,
        {:ok, tab_id_metadata} <- Docusign.PropertyMetadata.decode(data["tabIdMetadata"]),
        {:ok, form_page_label} <-
          case(data["formPageLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageLabel"]}}
          end,
        {:ok, merge_field_xml} <-
          case(data["mergeFieldXml"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["mergeFieldXml"]}}
          end,
        {:ok, anchor_y_offset} <-
          case(data["anchorYOffset"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorYOffset"]}}
          end,
        {:ok, height_metadata} <- Docusign.PropertyMetadata.decode(data["heightMetadata"]),
        {:ok, template_locked} <-
          case(data["templateLocked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateLocked"]}}
          end,
        {:ok, tab_order_metadata} <- Docusign.PropertyMetadata.decode(data["tabOrderMetadata"]),
        {:ok, italic} <-
          case(data["italic"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["italic"]}}
          end,
        {:ok, tab_type} <-
          case(data["tabType"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabType"]}}
          end,
        {:ok, source} <-
          case(data["source"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["source"]}}
          end,
        {:ok, anchor_tab_processor_version_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorTabProcessorVersionMetadata"]),
        {:ok, original_value} <-
          case(data["originalValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["originalValue"]}}
          end,
        {:ok, max_length_metadata} <- Docusign.PropertyMetadata.decode(data["maxLengthMetadata"]),
        {:ok, anchor_y_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorYOffsetMetadata"]),
        {:ok, bold_metadata} <- Docusign.PropertyMetadata.decode(data["boldMetadata"]),
        {:ok, underline_metadata} <- Docusign.PropertyMetadata.decode(data["underlineMetadata"]),
        {:ok, document_id} <-
          case(data["documentId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["documentId"]}}
          end,
        {:ok, conditional_parent_value} <-
          case(data["conditionalParentValue"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentValue"]}}
          end,
        {:ok, template_required} <-
          case(data["templateRequired"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["templateRequired"]}}
          end,
        {:ok, bold} <-
          case(data["bold"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["bold"]}}
          end,
        {:ok, underline} <-
          case(data["underline"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["underline"]}}
          end,
        {:ok, anchor_ignore_if_not_present_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorIgnoreIfNotPresentMetadata"]),
        {:ok, max_length} <-
          case(data["maxLength"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["maxLength"]}}
          end,
        {:ok, y_position} <-
          case(data["yPosition"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["yPosition"]}}
          end,
        {:ok, tab_group_labels_metadata} <-
          Docusign.PropertyMetadata.decode(data["tabGroupLabelsMetadata"]),
        {:ok, anchor_horizontal_alignment_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorHorizontalAlignmentMetadata"]),
        {:ok, form_page_number} <-
          case(data["formPageNumber"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["formPageNumber"]}}
          end,
        {:ok, form_page_number_metadata} <-
          Docusign.PropertyMetadata.decode(data["formPageNumberMetadata"]),
        {:ok, document_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["documentIdMetadata"]),
        {:ok, anchor_units} <-
          case(data["anchorUnits"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorUnits"]}}
          end,
        {:ok, font_metadata} <- Docusign.PropertyMetadata.decode(data["fontMetadata"]),
        {:ok, anchor_allow_white_space_in_characters_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorAllowWhiteSpaceInCharactersMetadata"]),
        {:ok, name_metadata} <- Docusign.PropertyMetadata.decode(data["nameMetadata"]),
        {:ok, tab_label} <-
          case(data["tabLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tabLabel"]}}
          end,
        {:ok, anchor_x_offset_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorXOffsetMetadata"]),
        {:ok, disable_auto_size} <-
          case(data["disableAutoSize"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["disableAutoSize"]}}
          end,
        {:ok, form_order_metadata} <- Docusign.PropertyMetadata.decode(data["formOrderMetadata"]),
        {:ok, status} <-
          case(data["status"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["status"]}}
          end,
        {:ok, anchor_match_whole_word_metadata} <-
          Docusign.PropertyMetadata.decode(data["anchorMatchWholeWordMetadata"]),
        {:ok, tool_tip_metadata} <- Docusign.PropertyMetadata.decode(data["toolTipMetadata"]),
        {:ok, conditional_parent_label} <-
          case(data["conditionalParentLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["conditionalParentLabel"]}}
          end,
        {:ok, locked} <-
          case(data["locked"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["locked"]}}
          end,
        {:ok, tab_type_metadata} <- Docusign.PropertyMetadata.decode(data["tabTypeMetadata"]),
        {:ok, recipient_id_metadata} <-
          Docusign.PropertyMetadata.decode(data["recipientIdMetadata"]),
        {:ok, anchor_match_whole_word} <-
          case(data["anchorMatchWholeWord"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["anchorMatchWholeWord"]}}
          end,
        {:ok, tab_group_labels} <-
          case(data["tabGroupLabels"]) do
            nil ->
              nil

            _ ->
              data["tabGroupLabels"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with(
                    {:ok, item} <-
                      case(data) do
                        x when is_binary(x) ->
                          {:ok, x}

                        x ->
                          {:error, {:decode, {:invalid_string, x}, [nil]}}
                      end
                  ) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end
      ) do
        {:ok,
         %__MODULE__{
           form_page_label_metadata: form_page_label_metadata,
           locale_policy: locale_policy,
           conceal_value_on_document: conceal_value_on_document,
           conceal_value_on_document_metadata: conceal_value_on_document_metadata,
           x_position: x_position,
           name: name,
           form_order: form_order,
           tab_order: tab_order,
           template_locked_metadata: template_locked_metadata,
           anchor_case_sensitive: anchor_case_sensitive,
           anchor_allow_white_space_in_characters: anchor_allow_white_space_in_characters,
           x_position_metadata: x_position_metadata,
           error_details: error_details,
           recipient_id: recipient_id,
           disable_auto_size_metadata: disable_auto_size_metadata,
           conditional_parent_value_metadata: conditional_parent_value_metadata,
           recipient_id_guid: recipient_id_guid,
           y_position_metadata: y_position_metadata,
           page_number: page_number,
           anchor_case_sensitive_metadata: anchor_case_sensitive_metadata,
           anchor_x_offset: anchor_x_offset,
           width: width,
           value_metadata: value_metadata,
           original_value_metadata: original_value_metadata,
           font_size: font_size,
           height: height,
           font: font,
           value: value,
           anchor_ignore_if_not_present: anchor_ignore_if_not_present,
           status_metadata: status_metadata,
           anchor_string: anchor_string,
           tab_label_metadata: tab_label_metadata,
           conditional_parent_label_metadata: conditional_parent_label_metadata,
           smart_contract_information: smart_contract_information,
           anchor_horizontal_alignment: anchor_horizontal_alignment,
           tooltip: tooltip,
           font_color_metadata: font_color_metadata,
           custom_tab_id_metadata: custom_tab_id_metadata,
           anchor_string_metadata: anchor_string_metadata,
           template_required_metadata: template_required_metadata,
           anchor_tab_processor_version: anchor_tab_processor_version,
           font_color: font_color,
           font_size_metadata: font_size_metadata,
           custom_tab_id: custom_tab_id,
           recipient_id_guid_metadata: recipient_id_guid_metadata,
           page_number_metadata: page_number_metadata,
           width_metadata: width_metadata,
           locked_metadata: locked_metadata,
           merge_field: merge_field,
           required_metadata: required_metadata,
           tab_id: tab_id,
           anchor_units_metadata: anchor_units_metadata,
           italic_metadata: italic_metadata,
           required: required,
           tab_id_metadata: tab_id_metadata,
           form_page_label: form_page_label,
           merge_field_xml: merge_field_xml,
           anchor_y_offset: anchor_y_offset,
           height_metadata: height_metadata,
           template_locked: template_locked,
           tab_order_metadata: tab_order_metadata,
           italic: italic,
           tab_type: tab_type,
           source: source,
           anchor_tab_processor_version_metadata: anchor_tab_processor_version_metadata,
           original_value: original_value,
           max_length_metadata: max_length_metadata,
           anchor_y_offset_metadata: anchor_y_offset_metadata,
           bold_metadata: bold_metadata,
           underline_metadata: underline_metadata,
           document_id: document_id,
           conditional_parent_value: conditional_parent_value,
           template_required: template_required,
           bold: bold,
           underline: underline,
           anchor_ignore_if_not_present_metadata: anchor_ignore_if_not_present_metadata,
           max_length: max_length,
           y_position: y_position,
           tab_group_labels_metadata: tab_group_labels_metadata,
           anchor_horizontal_alignment_metadata: anchor_horizontal_alignment_metadata,
           form_page_number: form_page_number,
           form_page_number_metadata: form_page_number_metadata,
           document_id_metadata: document_id_metadata,
           anchor_units: anchor_units,
           font_metadata: font_metadata,
           anchor_allow_white_space_in_characters_metadata:
             anchor_allow_white_space_in_characters_metadata,
           name_metadata: name_metadata,
           tab_label: tab_label,
           anchor_x_offset_metadata: anchor_x_offset_metadata,
           disable_auto_size: disable_auto_size,
           form_order_metadata: form_order_metadata,
           status: status,
           anchor_match_whole_word_metadata: anchor_match_whole_word_metadata,
           tool_tip_metadata: tool_tip_metadata,
           conditional_parent_label: conditional_parent_label,
           locked: locked,
           tab_type_metadata: tab_type_metadata,
           recipient_id_metadata: recipient_id_metadata,
           anchor_match_whole_word: anchor_match_whole_word,
           tab_group_labels: tab_group_labels
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["title" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "formPageLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_label_metadata),
        "localePolicy" => Docusign.LocalePolicyTab.encode(data.locale_policy),
        "concealValueOnDocument" => data.conceal_value_on_document,
        "concealValueOnDocumentMetadata" =>
          Docusign.PropertyMetadata.encode(data.conceal_value_on_document_metadata),
        "xPosition" => data.x_position,
        "name" => data.name,
        "formOrder" => data.form_order,
        "tabOrder" => data.tab_order,
        "templateLockedMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_locked_metadata),
        "anchorCaseSensitive" => data.anchor_case_sensitive,
        "anchorAllowWhiteSpaceInCharacters" => data.anchor_allow_white_space_in_characters,
        "xPositionMetadata" => Docusign.PropertyMetadata.encode(data.x_position_metadata),
        "errorDetails" => Docusign.ErrorDetails.encode(data.error_details),
        "recipientId" => data.recipient_id,
        "disableAutoSizeMetadata" =>
          Docusign.PropertyMetadata.encode(data.disable_auto_size_metadata),
        "conditionalParentValueMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_value_metadata),
        "recipientIdGuid" => data.recipient_id_guid,
        "yPositionMetadata" => Docusign.PropertyMetadata.encode(data.y_position_metadata),
        "pageNumber" => data.page_number,
        "anchorCaseSensitiveMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_case_sensitive_metadata),
        "anchorXOffset" => data.anchor_x_offset,
        "width" => data.width,
        "valueMetadata" => Docusign.PropertyMetadata.encode(data.value_metadata),
        "originalValueMetadata" => Docusign.PropertyMetadata.encode(data.original_value_metadata),
        "fontSize" => data.font_size,
        "height" => data.height,
        "font" => data.font,
        "value" => data.value,
        "anchorIgnoreIfNotPresent" => data.anchor_ignore_if_not_present,
        "statusMetadata" => Docusign.PropertyMetadata.encode(data.status_metadata),
        "anchorString" => data.anchor_string,
        "tabLabelMetadata" => Docusign.PropertyMetadata.encode(data.tab_label_metadata),
        "conditionalParentLabelMetadata" =>
          Docusign.PropertyMetadata.encode(data.conditional_parent_label_metadata),
        "smartContractInformation" =>
          Docusign.SmartContractInformation.encode(data.smart_contract_information),
        "anchorHorizontalAlignment" => data.anchor_horizontal_alignment,
        "tooltip" => data.tooltip,
        "fontColorMetadata" => Docusign.PropertyMetadata.encode(data.font_color_metadata),
        "customTabIdMetadata" => Docusign.PropertyMetadata.encode(data.custom_tab_id_metadata),
        "anchorStringMetadata" => Docusign.PropertyMetadata.encode(data.anchor_string_metadata),
        "templateRequiredMetadata" =>
          Docusign.PropertyMetadata.encode(data.template_required_metadata),
        "anchorTabProcessorVersion" => data.anchor_tab_processor_version,
        "fontColor" => data.font_color,
        "fontSizeMetadata" => Docusign.PropertyMetadata.encode(data.font_size_metadata),
        "customTabId" => data.custom_tab_id,
        "recipientIdGuidMetadata" =>
          Docusign.PropertyMetadata.encode(data.recipient_id_guid_metadata),
        "pageNumberMetadata" => Docusign.PropertyMetadata.encode(data.page_number_metadata),
        "widthMetadata" => Docusign.PropertyMetadata.encode(data.width_metadata),
        "lockedMetadata" => Docusign.PropertyMetadata.encode(data.locked_metadata),
        "mergeField" => Docusign.MergeField.encode(data.merge_field),
        "requiredMetadata" => Docusign.PropertyMetadata.encode(data.required_metadata),
        "tabId" => data.tab_id,
        "anchorUnitsMetadata" => Docusign.PropertyMetadata.encode(data.anchor_units_metadata),
        "italicMetadata" => Docusign.PropertyMetadata.encode(data.italic_metadata),
        "required" => data.required,
        "tabIdMetadata" => Docusign.PropertyMetadata.encode(data.tab_id_metadata),
        "formPageLabel" => data.form_page_label,
        "mergeFieldXml" => data.merge_field_xml,
        "anchorYOffset" => data.anchor_y_offset,
        "heightMetadata" => Docusign.PropertyMetadata.encode(data.height_metadata),
        "templateLocked" => data.template_locked,
        "tabOrderMetadata" => Docusign.PropertyMetadata.encode(data.tab_order_metadata),
        "italic" => data.italic,
        "tabType" => data.tab_type,
        "source" => data.source,
        "anchorTabProcessorVersionMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_tab_processor_version_metadata),
        "originalValue" => data.original_value,
        "maxLengthMetadata" => Docusign.PropertyMetadata.encode(data.max_length_metadata),
        "anchorYOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_y_offset_metadata),
        "boldMetadata" => Docusign.PropertyMetadata.encode(data.bold_metadata),
        "underlineMetadata" => Docusign.PropertyMetadata.encode(data.underline_metadata),
        "documentId" => data.document_id,
        "conditionalParentValue" => data.conditional_parent_value,
        "templateRequired" => data.template_required,
        "bold" => data.bold,
        "underline" => data.underline,
        "anchorIgnoreIfNotPresentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_ignore_if_not_present_metadata),
        "maxLength" => data.max_length,
        "yPosition" => data.y_position,
        "tabGroupLabelsMetadata" =>
          Docusign.PropertyMetadata.encode(data.tab_group_labels_metadata),
        "anchorHorizontalAlignmentMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_horizontal_alignment_metadata),
        "formPageNumber" => data.form_page_number,
        "formPageNumberMetadata" =>
          Docusign.PropertyMetadata.encode(data.form_page_number_metadata),
        "documentIdMetadata" => Docusign.PropertyMetadata.encode(data.document_id_metadata),
        "anchorUnits" => data.anchor_units,
        "fontMetadata" => Docusign.PropertyMetadata.encode(data.font_metadata),
        "anchorAllowWhiteSpaceInCharactersMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_allow_white_space_in_characters_metadata),
        "nameMetadata" => Docusign.PropertyMetadata.encode(data.name_metadata),
        "tabLabel" => data.tab_label,
        "anchorXOffsetMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_x_offset_metadata),
        "disableAutoSize" => data.disable_auto_size,
        "formOrderMetadata" => Docusign.PropertyMetadata.encode(data.form_order_metadata),
        "status" => data.status,
        "anchorMatchWholeWordMetadata" =>
          Docusign.PropertyMetadata.encode(data.anchor_match_whole_word_metadata),
        "toolTipMetadata" => Docusign.PropertyMetadata.encode(data.tool_tip_metadata),
        "conditionalParentLabel" => data.conditional_parent_label,
        "locked" => data.locked,
        "tabTypeMetadata" => Docusign.PropertyMetadata.encode(data.tab_type_metadata),
        "recipientIdMetadata" => Docusign.PropertyMetadata.encode(data.recipient_id_metadata),
        "anchorMatchWholeWord" => data.anchor_match_whole_word,
        "tabGroupLabels" =>
          case(data.tab_group_labels) do
            nil ->
              nil

            _ ->
              Enum.map(data.tab_group_labels, fn item -> item end)
          end
      }
    end
  end

  defmodule(RecipientIdentityVerification) do
    @moduledoc "#{nil}
    "
    defstruct(input_options: nil, workflow_id: nil)

    @type t :: %__MODULE__{
            input_options: [Docusign.RecipientIdentityInputOption.t()] | nil,
            workflow_id: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, input_options} <-
          case(data["inputOptions"]) do
            nil ->
              nil

            _ ->
              data["inputOptions"]
              |> Enum.reverse()
              |> Enum.reduce({:ok, []}, fn
                data, {:ok, items} ->
                  with({:ok, item} <- Docusign.RecipientIdentityInputOption.decode(data)) do
                    {:ok, [item | items]}
                  end

                _, error ->
                  error
              end)
          end,
        {:ok, workflow_id} <-
          case(data["workflowId"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["workflowId"]}}
          end
      ) do
        {:ok, %__MODULE__{input_options: input_options, workflow_id: workflow_id}}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["recipientIdentityVerification" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "inputOptions" =>
          case(data.input_options) do
            nil ->
              nil

            _ ->
              Enum.map(data.input_options, fn item ->
                Docusign.RecipientIdentityInputOption.encode(item)
              end)
          end,
        "workflowId" => data.workflow_id
      }
    end
  end

  defmodule(DocumentHtmlDisplaySettings) do
    @moduledoc "#{nil}
    "
    defstruct(
      cell_style: nil,
      collapsible_settings: nil,
      display: nil,
      display_label: nil,
      display_order: nil,
      display_page_number: nil,
      hide_label_when_opened: nil,
      inline_outer_style: nil,
      label_when_opened: nil,
      pre_label: nil,
      scroll_to_top_when_opened: nil,
      table_style: nil
    )

    @type t :: %__MODULE__{
            cell_style: binary | nil,
            collapsible_settings: Docusign.DocumentHtmlCollapsibleDisplaySettings.t() | nil,
            display: binary | nil,
            display_label: binary | nil,
            display_order: integer | nil,
            display_page_number: integer | nil,
            hide_label_when_opened: boolean | nil,
            inline_outer_style: binary | nil,
            label_when_opened: binary | nil,
            pre_label: binary | nil,
            scroll_to_top_when_opened: boolean | nil,
            table_style: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, cell_style} <-
          case(data["cellStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["cellStyle"]}}
          end,
        {:ok, collapsible_settings} <-
          Docusign.DocumentHtmlCollapsibleDisplaySettings.decode(data["collapsibleSettings"]),
        {:ok, display} <-
          case(data["display"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["display"]}}
          end,
        {:ok, display_label} <-
          case(data["displayLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["displayLabel"]}}
          end,
        {:ok, display_order} <-
          case(data["displayOrder"]) do
            x when is_nil(x) or is_integer(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_integer, x}, ["displayOrder"]}}
          end,
        {:ok, display_page_number} <-
          case(data["displayPageNumber"]) do
            x when is_nil(x) or is_integer(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_integer, x}, ["displayPageNumber"]}}
          end,
        {:ok, hide_label_when_opened} <-
          case(data["hideLabelWhenOpened"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["hideLabelWhenOpened"]}}
          end,
        {:ok, inline_outer_style} <-
          case(data["inlineOuterStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["inlineOuterStyle"]}}
          end,
        {:ok, label_when_opened} <-
          case(data["labelWhenOpened"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["labelWhenOpened"]}}
          end,
        {:ok, pre_label} <-
          case(data["preLabel"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["preLabel"]}}
          end,
        {:ok, scroll_to_top_when_opened} <-
          case(data["scrollToTopWhenOpened"]) do
            x when is_nil(x) or is_boolean(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_boolean, x}, ["scrollToTopWhenOpened"]}}
          end,
        {:ok, table_style} <-
          case(data["tableStyle"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["tableStyle"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           cell_style: cell_style,
           collapsible_settings: collapsible_settings,
           display: display,
           display_label: display_label,
           display_order: display_order,
           display_page_number: display_page_number,
           hide_label_when_opened: hide_label_when_opened,
           inline_outer_style: inline_outer_style,
           label_when_opened: label_when_opened,
           pre_label: pre_label,
           scroll_to_top_when_opened: scroll_to_top_when_opened,
           table_style: table_style
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["documentHtmlDisplaySettings" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "cellStyle" => data.cell_style,
        "collapsibleSettings" =>
          Docusign.DocumentHtmlCollapsibleDisplaySettings.encode(data.collapsible_settings),
        "display" => data.display,
        "displayLabel" => data.display_label,
        "displayOrder" => data.display_order,
        "displayPageNumber" => data.display_page_number,
        "hideLabelWhenOpened" => data.hide_label_when_opened,
        "inlineOuterStyle" => data.inline_outer_style,
        "labelWhenOpened" => data.label_when_opened,
        "preLabel" => data.pre_label,
        "scrollToTopWhenOpened" => data.scroll_to_top_when_opened,
        "tableStyle" => data.table_style
      }
    end
  end

  defmodule(DateStampProperties) do
    @moduledoc "#{nil}
    "
    defstruct(date_area_height: nil, date_area_width: nil, date_area_x: nil, date_area_y: nil)

    @type t :: %__MODULE__{
            date_area_height: binary | nil,
            date_area_width: binary | nil,
            date_area_x: binary | nil,
            date_area_y: binary | nil
          }
    @doc false
    def(decode(data)) do
      with(
        {:ok, date_area_height} <-
          case(data["dateAreaHeight"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["dateAreaHeight"]}}
          end,
        {:ok, date_area_width} <-
          case(data["dateAreaWidth"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["dateAreaWidth"]}}
          end,
        {:ok, date_area_x} <-
          case(data["dateAreaX"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["dateAreaX"]}}
          end,
        {:ok, date_area_y} <-
          case(data["dateAreaY"]) do
            x when is_nil(x) or is_binary(x) ->
              {:ok, x}

            x ->
              {:error, {:decode, {:invalid_string, x}, ["dateAreaY"]}}
          end
      ) do
        {:ok,
         %__MODULE__{
           date_area_height: date_area_height,
           date_area_width: date_area_width,
           date_area_x: date_area_x,
           date_area_y: date_area_y
         }}
      else
        {:error, {:decode, reason, trace}} ->
          {:error, {:decode, reason, ["dateStampProperties" | trace]}}

        error ->
          error
      end
    end

    @doc false
    def(encode(data)) do
      %{
        "dateAreaHeight" => data.date_area_height,
        "dateAreaWidth" => data.date_area_width,
        "dateAreaX" => data.date_area_x,
        "dateAreaY" => data.date_area_y
      }
    end
  end

  (
    @doc "#{"Gets the status of a single envelope."}
    
    #{"Retrieves the overall status for the specified envelope.\nTo get the status of a list of envelopes, use\n[Envelope: listStatusChanges ](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopes/liststatuschanges/).\n\n### Related topics\n\n- [How to get envelope information](https://developers.docusign.com/docs/esign-rest-api/how-to/get-envelope-information/)\n"}
    
    #{"### Query parameters\n\n- `advanced_update`: When **true**, envelope information can be added or modified.\n- `include`: Specifies additional information about the envelope to return. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:\n\n- `custom_fields`: The custom fields associated with the envelope.\n- `documents`: The documents associated with the envelope.\n- `attachments`: The attachments associated with the envelope.\n- `extensions`: Information about the email settings associated with the envelope.\n- `folders`: The folder where the envelope exists.\n- `recipients`: The recipients associated with the envelope.\n- `powerform`: The PowerForms associated with the envelope.\n- `tabs`: The tabs associated with the envelope.\n- `payment_tabs`: The payment tabs associated with the envelope.\n\n"}
    
    #{""}
    "
    @spec envelopes__get_envelope(Tesla.Client.t(), binary, binary, [opt]) ::
            {:ok, Docusign.Envelope.t()} | {:error, Docusign.ErrorDetails.t()} | {:error, any}
          when opt: {:advanced_update, binary} | {:include, binary}
    def(envelopes__get_envelope(client \\ new(), account_id, envelope_id, query \\ [])) do
      case(
        Tesla.request(client,
          method: :get,
          url: "/v2.1/accounts/:account_id/envelopes/:envelope_id",
          opts: [path_params: [account_id: account_id, envelope_id: envelope_id]],
          query: Tesla.OpenApi.encode_query(query, advanced_update: nil, include: nil)
        )
      ) do
        {:ok, %{status: 200, body: body}} ->
          Docusign.Envelope.decode(body)

        {:ok, %{status: 400, body: body}} ->
          with({:ok, data} <- Docusign.ErrorDetails.decode(body)) do
            {:error, data}
          end

        {:error, error} ->
          {:error, error}
      end
    end

    defoverridable(envelopes__get_envelope: 4)
  )

  (
    @doc "#{"Returns a URL to the recipient view UI."}
    
    #{"Returns a URL that enables you to\n[embed the recipient view](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/embedding/)\nof the\nDocuSign UI in your applications. If the recipient is a signer,\nthen the view will provide the signing ceremony.\n\nThis method is only used with envelopes in the `sent` status.\n\nDue to screen space issues,\ndo not use an `<iframe>` for embedded operations on mobile devices.\nFor iOS devices, DocuSign recommends using a WebView.\n\n## Authentication\n\nYour application is responsible for authenticating the identity\nof the recipient or signer when you use this method. Use the\nfollowing parameters to record how the recipient\nwas authenticated.\n\n- `assertionId`\n- `authenticationInstant`\n- `authenticationMethod`\n- `clientUserId`\n- `securityDomain`\n\nAt a minimum, `authenticationMethod` and `clientUserId` are\nrequired. The information that you provide is included in the\nenvelope's certificate of completion.\n\n## Redirects\nAfter the signer completes or ends the signing ceremony, DocuSign\nredirects the user's browser back to your app via the\n`returnUrl` that you supply.\n\n**Note**: The user may be redirected through various DocuSign\nsubdomains, depending on the region of the account sending the\nenvelope. Please consult the **Allowlists for DocuSign eSignature service**\nsection in [Security for DocuSign eSignature](https://www.docusign.com/trust/security/esignature)\nwhen setting up your allowlists.\n\n### The event status parameter\nDocuSign appends an `event` query parameter to the `returnUrl` with the\noutcome of the signing ceremony. Your app can use this event\nparameter to determine the next step for the envelope.\nDo not fetch the envelope status by using\n[Envelopes: get](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopes/get/)\nor a similar method because doing so could break\nthe DocuSign rule against polling.\n\n**Note**: Because a user can cancel redirection, close their\nbrowser after signing, or spoof the landing URL, the\n`returnUrl` should not be the single source of truth for envelope\nstatus for your integration.\n\n## The URL is time-limited\n\n\nThe URL returned in this method's response is valid for one use,\nand you must use or display it within a couple of minutes after\nit is generated. After the recipient is redirected to the\nrecipient view, they must interact with the DocuSign system\nperiodically or their session will time out.\n\nBecause the URL is time-limited, it should not be stored or sent\nthrough email. After you receive it, immediately redirect the\nuser's browser to the URL.\n\nIf you want to invite someone to an embedded signing session via\nemail, the email invitation's URL must be to your application.\nWhen invoked, your app should request a `recipientView` URL from\nDocuSign and then redirect the signer to that URL.\n\n## Maintaining State\nAfter the recipient completes the recipient view (or signing\nceremony), they are redirected to your application. Your\napplication can recover state information about the transaction\nby storing information in a cookie, or by including query\nparameters in the `returnUrl` field. For example.\n`https://myapp.example.com/docusign_return?myState=12345` When the\nuser is redirected to your app, the `event` query parameter will\nbe appended. In this example, prevent spoofing by not using a\nguessable value as the state value.\n\n### Revoking the URL\n\nYou can revoke this URL by making\na DELETE HTTP request to the URL\nwith no request body.\n\n\n### Related topics\n\n- [How to request a signature by email](https://developers.docusign.com/docs/esign-rest-api/how-to/request-signature-email-remote/)\n- [How to request a signature through your app](https://developers.docusign.com/docs/esign-rest-api/how-to/request-signature-in-app-embedded/)\n- [How to request a signature using a composite template](https://developers.docusign.com/docs/esign-rest-api/how-to/request-signature-composite-template-embedded/)\n- [How to send an envelope via your app](https://developers.docusign.com/docs/esign-rest-api/how-to/embedded-sending/)\n- [How to set envelope tab values](https://developers.docusign.com/docs/esign-rest-api/how-to/set-envelope-tab-values/)\n- [How to set tab values in a template](https://developers.docusign.com/docs/esign-rest-api/how-to/set-template-tab-values/)\n\n"}
    
    #{""}
    
    #{""}
    "
    @spec views__post_envelope_recipient_view(
            Tesla.Client.t(),
            binary,
            binary,
            Docusign.RecipientViewRequest.t()
          ) ::
            {:ok, Docusign.EnvelopeViews.t()}
            | {:error, Docusign.ErrorDetails.t()}
            | {:error, any}
    def(
      views__post_envelope_recipient_view(
        client \\ new(),
        account_id,
        envelope_id,
        recipient_view_request
      )
    ) do
      case(
        Tesla.request(client,
          method: :post,
          url: "/v2.1/accounts/:account_id/envelopes/:envelope_id/views/recipient",
          opts: [path_params: [account_id: account_id, envelope_id: envelope_id]],
          body: Docusign.RecipientViewRequest.encode(recipient_view_request)
        )
      ) do
        {:ok, %{status: 201, body: body}} ->
          Docusign.EnvelopeViews.decode(body)

        {:ok, %{status: 400, body: body}} ->
          with({:ok, data} <- Docusign.ErrorDetails.decode(body)) do
            {:error, data}
          end

        {:error, error} ->
          {:error, error}
      end
    end

    defoverridable(views__post_envelope_recipient_view: 4)
  )

  (
    @doc "#{"Creates an envelope."}
    
    #{"Creates and sends an envelope or creates a draft envelope.\nEnvelopes are fundamental resources in the DocuSign platform.\n\nWith this method you can:\n\n* Create and send an envelope\n  with [documents][], [recipients][], and [tabs][].\n* [Create and send an envelope from a template](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/).\n* [Create and send an envelope from\n  a combination of documents and templates](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/composite/).\n* Create a draft envelope.\n\n\nWhen you use this method\nto create and send an envelope\nin a single request,\nthe following parameters in the request body (an [`envelopeDefinition`][envelopeDefinition] object) are required:\n\n| Parameter      | Description |\n| :--------      | :---------- |\n| `status`       | Set to `sent` to send the envelope to recipients.<br>Set to `created` (or don't set at all) to save the envelope as a draft. |\n| `emailSubject` | The subject of the email used to send the envelope. |\n| `documents`    | The [documents][] to be signed. |\n| `recipients`   | The email addresses of the envelope [recipients][]. |\n\n\nWhen you create an envelope by using a\n[composite template](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/composite/),\nyou should specify the envelope custom fields in the inline template.\nAny custom fields that you specify at the root level are ignored.\n\nIf the envelope has a workflow definition\nand the `workflowStatus` is `paused`,\nthe envelope will not be sent immediately,\neven if the envelope's `status` is `sent`.\n\n\n### Related topics\n\n\nThere are many ways to use envelopes.\nYou can create and send an envelope\nwith a single API request,\nor you can use several API requests\nto create, populate, and send envelopes.\n\n\n| See:                  | To learn about:                                                                                                                    |\n| :----------------------- | :--------------------------------------------------------------------------------------------------------------------------------- |\n| [Envelopes][envelopes]   | Envelopes, [adding documents][addingdocs], [tracking][], [locking][], [deleting][], [templates][]                                  |\n| [Documents][documents]   | Documents, [attachments][], [supplemental documents][supdocs], [authoritative copies][authcopies], [purging][]                     |\n| [Recipients][recipients] | Recipients, [recipient types][reciptypes], [recipient status][recipstatus]                                                         |\n| [Tabs][tabs]             | Tabs, [anchoring tabs][tabanchor],   [custom tabs][tabcustom], [payments][] |\n\n\n\nThe following how-to articles show how to\nconfigure this method's\n[`envelopeDefinition`][envelopeDefinition] request body\nto perform common tasks.\n\nRequesting signatures\n\n- [How to request a signature by email](https://developers.docusign.com/docs/esign-rest-api/how-to/request-signature-email-remote/)\n- [How to request a signature by email using a template](https://developers.docusign.com/docs/esign-rest-api/how-to/request-signature-template-remote/)\n- [How to request a signature by SMS delivery](https://developers.docusign.com/docs/esign-rest-api/how-to/request-signature-sms/)\n- [How to request a signature using a composite template](https://developers.docusign.com/docs/esign-rest-api/how-to/request-signature-composite-template-embedded/)\n\nRequiring authentication\n\n- [How to require access code authentication for a recipient](https://developers.docusign.com/docs/esign-rest-api/how-to/require-access-code-recipient/)\n- [How to require SMS authentication for a recipient](https://developers.docusign.com/docs/esign-rest-api/how-to/sms-auth/)\n- [How to require phone authentication for a recipient](https://developers.docusign.com/docs/esign-rest-api/how-to/phone-auth/)\n- [How to require knowledge-based authentication (KBA) for a recipient](https://developers.docusign.com/docs/esign-rest-api/how-to/knowledge-based-authentication/)\n- [How to require ID verification (IDV) for a recipient](https://developers.docusign.com/docs/esign-rest-api/how-to/id-verification/)\n\nSending envelopes\n\n- [How to send an envelope via your app](https://developers.docusign.com/docs/esign-rest-api/how-to/embedded-sending/)\n- [How to bulk-send envelopes](https://developers.docusign.com/docs/esign-rest-api/how-to/bulk-send-envelopes/)\n- [How to send a request for payment](https://developers.docusign.com/docs/esign-rest-api/how-to/request-a-payment/)\n\nSetting tab values\n\n- [How to set envelope tab values](https://developers.docusign.com/docs/esign-rest-api/how-to/set-envelope-tab-values/)\n- [How to set tab values in a template](https://developers.docusign.com/docs/esign-rest-api/how-to/set-template-tab-values/)\n\nApplying brands\n\n- [How to apply a brand to an envelope](https://developers.docusign.com/docs/esign-rest-api/how-to/apply-brand-to-envelope/)\n- [How to apply a brand and template to an envelope](https://developers.docusign.com/docs/esign-rest-api/how-to/apply-brand-and-template-to-envelope/)\n\nDocuments, conditional recipients, pausing a workflow\n\n- [How to attach documents via binary transfer](https://developers.docusign.com/docs/esign-rest-api/how-to/send-binary/)\n- [How to use conditional recipients](https://developers.docusign.com/docs/esign-rest-api/how-to/use-conditional-recipients/)\n- [How to pause a signature workflow](https://developers.docusign.com/docs/esign-rest-api/how-to/pause-workflow/)\n\n\n\n\n\n[addingdocs]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/\n[attachments]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/\n[authcopies]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/\n[conoverview]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/overview/\n[deleting]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/\n[documents]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/\n[envelopeDefinition]:   https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopes/create/#definition__envelopedefinition\n[envelopes]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/\n[locking]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/\n[payments]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/payment/\n[purging]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/\n[recipients]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/\n[recipstatus]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/\n[reciptypes]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/\n[supdocs]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/\n[tabanchor]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place/\n[tabcustom]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/custom-tabs/\n[tabs]:                 https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/\n[tabtypes]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/\n[templates]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/\n[tracking]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/\n\n"}
    
    #{"### Query parameters\n\n- `cdse_mode`: Reserved for DocuSign.\n\n- `change_routing_order`: When true, users can define the routing order of recipients while sending documents for signature.\n- `completed_documents_only`: Reserved for DocuSign.\n\n- `merge_roles_on_draft`: When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)\n\n**Note**: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates.\n"}
    
    #{""}
    "
    @spec envelopes__post_envelopes(Tesla.Client.t(), binary, Docusign.EnvelopeDefinition.t(), [
            opt
          ]) ::
            {:ok, Docusign.EnvelopeSummary.t()}
            | {:error, Docusign.ErrorDetails.t()}
            | {:error, any}
          when opt:
                 {:cdse_mode, binary}
                 | {:change_routing_order, binary}
                 | {:completed_documents_only, binary}
                 | {:merge_roles_on_draft, binary}
    def(
      envelopes__post_envelopes(client \\ new(), account_id, envelope_definition, query \\ [])
    ) do
      case(
        Tesla.request(client,
          method: :post,
          url: "/v2.1/accounts/:account_id/envelopes",
          opts: [path_params: [account_id: account_id]],
          body: Docusign.EnvelopeDefinition.encode(envelope_definition),
          query:
            Tesla.OpenApi.encode_query(query,
              cdse_mode: nil,
              change_routing_order: nil,
              completed_documents_only: nil,
              merge_roles_on_draft: nil
            )
        )
      ) do
        {:ok, %{status: 201, body: body}} ->
          Docusign.EnvelopeSummary.decode(body)

        {:ok, %{status: 400, body: body}} ->
          with({:ok, data} <- Docusign.ErrorDetails.decode(body)) do
            {:error, data}
          end

        {:error, error} ->
          {:error, error}
      end
    end

    defoverridable(envelopes__post_envelopes: 4)
  )

  (
    @middleware [
      {Tesla.Middleware.BaseUrl, "https://www.docusign.net/restapi"},
      Tesla.Middleware.PathParams,
      Tesla.Middleware.EncodeJson,
      Tesla.Middleware.DecodeJson,
      Tesla.Middleware.DecodeFormUrlencoded
    ]
    @doc "See `new/2`.\n"
    @spec new() :: Tesla.Client.t()
    def(new()) do
      new([], nil)
    end

    @doc "Get new API client instance\n"
    @spec new([Tesla.Client.middleware()], Tesla.Client.adapter()) :: Tesla.Client.t()
    def(new(middleware, adapter)) do
      Tesla.client(@middleware ++ middleware, adapter)
    end

    defoverridable(new: 0, new: 2)
  )
end